#Область ПрограммныйИнтерфейс

Функция ТекстПоляHTMLРедактора() Экспорт
	Текст=
	"<!DOCTYPE html>
	|<html lang=""ru"">
	|<head>
	|    <meta charset=""UTF-8"" />
	|    <title>without bootstrap</title>
	|   <!-- include libraries(jQuery, bootstrap) -->
	|    <link href=""https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"" rel=""stylesheet"" />
	|    <script src=""https://code.jquery.com/jquery-3.5.1.min.js""></script>
	|    <script src=""https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js""></script>
	|    <!-- include summernote css/js -->
	|    <link href=""https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css"" rel=""stylesheet"" />
	|    <script src=""https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js""></script>
	|    <script src=""https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/lang/summernote-ru-RU.js""></script>
	|    <style>
	|        #interactionButton {
	|            display: none;
	|        }
	|    </style>
	|</head>
	|<body>
	|    <div id=""summernote""></div>
	|    <button id=""interactionButton"">Кнопка</button>
	|    <script>
	|        var UploadFileButton = function (context) {
	|            var ui = $.summernote.ui;
	|            // create button
	|            var button = ui.button({
	|                contents: '<svg xmlns=""http://www.w3.org/2000/svg"" width=""14"" height=""14"" fill=""currentColor"" class=""bi bi-paperclip"" viewBox=""0 0 16 16""><path d=""M4.5 3a2.5 2.5 0 0 1 5 0v9a1.5 1.5 0 0 1-3 0V5a.5.5 0 0 1 1 0v7a.5.5 0 0 0 1 0V3a1.5 1.5 0 1 0-3 0v9a2.5 2.5 0 0 0 5 0V5a.5.5 0 0 1 1 0v7a3.5 3.5 0 1 1-7 0V3z""></path></svg>',
	|                tooltip: 'Присоединить файл',
	|                // button: 'uploadFile',
	|                click: function () {
	|                    eventTo1C({
	|                        event: ""uploadFile"",
	|                    });
	|                }
	|            });
	|
	|            return button.render(); // return button as jquery object
	|
	|        }
	|
	|        $(""#summernote"").summernote({
	|            placeholder: ""Место для ввода текста"",
	|            tabsize: 2,
	|            // height: 100%,
	|            lang: ""ru-RU"",
	|            codeviewFilter: true,
	|            focus: true,
	|            spellCheck: true,
	|            toolbar: [
	|                [""style"", [""style""]],
	|                [""font"", [""bold"", ""italic"", ""underline"", ""strikethrough"", ""clear""]],
	|                [""fontname"", [""fontname"", ""fontsize""]],
	|                [""color"", [""color"", ""forecolor""]],
	|                [""para"", [""ul"", ""ol"", ""paragraph""]],
	|                [""table"", [""table""]],
	|                [""insert"", [""link"", ""picture"", ""hr"", ""uploadFile""]],
	|                [""action"", [""undo"", ""redo""]],
	|                [""view"", [""help""]],
	|            ],
	|            buttons: {
	|                uploadFile: UploadFileButton
	|           },
	|           callbacks: {
	|               onImageUpload: function (files) {
	|                   // upload image to server and create imgNode...
	|					console.log('image');
	|                    getFile(files[0]);
	|               },
	|            },
	|       });
	|
	|        $(""#summernote"").summernote(""fullscreen.toggle"");
	|
	|        $(""#summernote"").on(""summernote.paste"", function (e, e2) {
	|
	|            var orEvent = e2.originalEvent;
	|			 console.log(orEvent);
	|			 console.log(orEvent.clipboardData.getData(""image/png""));
		|            if (orEvent.clipboardData.types == undefined || orEvent.clipboardData.types.length===0) {
	|             	orEvent.preventDefault();
	|                eventTo1C({
	|                    event: ""clipImage"",
	|                });
	|            }
	|        });
	|
	|        function getHtmltext() {
	|
	|            return $(""#summernote"").summernote(""code"");
	|
	|        }
	|
	|        function setHtmlText(text) {
	|
	|            $(""#summernote"").summernote(""code"", text);
	|
	|        }
	|
	|        function eventTo1C(value) {
	|
	|            var event = new CustomEvent(""click"", {
	|                detail: value
	|            });
	|
	|            document.getElementById(""interactionButton"").dispatchEvent(event);
	|
	|        }
	|
	|        function getFile(file) {
	|
	|            var reader = new FileReader()
	|
	|            reader.onload = function () {
	|
	|                var fileInfo = {
	|
	|                    name: file.name,
	|
	|                    value: reader.result,
	|
	|                    size: file.size
	|
	|                };
	|
	|                eventTo1C({
	|
	|                    event: ""uploadImage"",
	|
	|                    data: fileInfo,
	|
	|                });
	|
	|            }
	|
	|            reader.readAsDataURL(file);
	|
	|        }
	|        
	|        function insertImage(url,filename) {
	|
	|            $(""#summernote"").summernote('insertImage', url,filename);
	|
	|        }
	|
	|    </script>
	|</body>
	|</html>";
	
	Возврат Текст;
	
КонецФункции

Процедура ВставитьПолеРедактированияТекстаНаФорму(Форма, ГруппаЭлементовТекста, ПутьКДанным) Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	ПутьКДаннымБезЛишнего=РВ_РедакторWysiwygHTMLКлиентСервер.ПолучитьПутьКДаннымБезЛишнего(ПутьКДанным);
	ПравильныйПутьКДанным=ПутьКДанным;
	
	//1. Реквизит поля просмотра
	ПутьКПолюРедактирования=РВ_РедакторWysiwygHTMLКлиентСервер.ПолучитьИмяЭлементаРедактированияКомментария(ПутьКДанным);
	
	НовыйРеквизит=Новый РеквизитФормы(ПутьКПолюРедактирования, ОписаниеТиповСтрока);
	
	МассивДобавляемыхРеквизитов=Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	
	//2. Реквизит таблицы присоединенных файлов
	ПутьКТаблицеПрисоединенныхФайлов=РВ_РедакторWysiwygHTMLКлиентСервер.ИмяТаблицыПрисоединенныхФайлов(ПутьКДаннымБезЛишнего);
	Если Форма.Элементы.Найти(ПутьКТаблицеПрисоединенныхФайлов) = Неопределено Тогда
		
		НовыйРеквизит = Новый РеквизитФормы(ПутьКТаблицеПрисоединенныхФайлов, Новый ОписаниеТипов("ТаблицаЗначений"));
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы("Ссылка", Справочники.ТипВсеСсылки(), ПутьКТаблицеПрисоединенныхФайлов);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы("ПутьКФайлу", ОписаниеТиповСтрока, ПутьКТаблицеПрисоединенныхФайлов);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы("ИмяФайла", ОписаниеТиповСтрока, ПутьКТаблицеПрисоединенныхФайлов);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		НовыйРеквизит = Новый РеквизитФормы("Адрес", ОписаниеТиповСтрока, ПутьКТаблицеПрисоединенныхФайлов);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		НовыйРеквизит = Новый РеквизитФормы("ЭтоНовый", Новый ОписаниеТипов("Булево"), ПутьКТаблицеПрисоединенныхФайлов);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, );
	
	Форма[ПутьКПолюРедактирования]=ТекстПоляHTMLРедактора();

	
	
	//1. Группа редактирвания
	ОписаниеЭлемента=НовыйОписаниеРеквизитаЭлемента();
	ОписаниеЭлемента.Имя=РВ_РедакторWysiwygHTMLКлиентСервер.ПолучитьИмяГруппыРедактированияКомментария(ПутьКДанным);
	ОписаниеЭлемента.РодительЭлемента=ГруппаЭлементовТекста;
	ОписаниеЭлемента.Заголовок="Редатирование";
	
	ОписаниеЭлемента.Параметры.Тип=Тип("ГруппаФормы");
	ОписаниеЭлемента.Параметры.Вставить("Вид", ВидГруппыФормы.ОбычнаяГруппа);
	ОписаниеЭлемента.Параметры.Вставить("АвтоМаксимальнаяШирина", Ложь);
	ОписаниеЭлемента.Параметры.Вставить("АвтоМаксимальнаяВысота", Ложь);
	ОписаниеЭлемента.Параметры.Вставить("РастягиватьПоГоризонтали", Истина);
	ОписаниеЭлемента.Параметры.Вставить("РастягиватьПоВертикали", Истина);
	ОписаниеЭлемента.Параметры.Вставить("ОтображатьЗаголовок",Ложь);
	
	ГруппаРедактирования=СоздатьЭлементПоОписанию(Форма, ОписаниеЭлемента);
	
	//2. текст редактирования
	ОписаниеЭлемента=НовыйОписаниеРеквизитаЭлемента();
	ОписаниеЭлемента.Имя=РВ_РедакторWysiwygHTMLКлиентСервер.ПолучитьИмяЭлементаРедактированияКомментария(ПутьКДанным);
	ОписаниеЭлемента.ПутьКДанным=ПутьКПолюРедактирования;
	ОписаниеЭлемента.РодительЭлемента=ГруппаРедактирования;
	
	ОписаниеЭлемента.Параметры.Вставить("Вид", ВидПоляФормы.ПолеHTMLДокумента);
	ОписаниеЭлемента.Параметры.Вставить("АвтоМаксимальнаяШирина", Ложь);
	ОписаниеЭлемента.Параметры.Вставить("АвтоМаксимальнаяВысота", Ложь);
	ОписаниеЭлемента.Параметры.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
	ОписаниеЭлемента.Параметры.Вставить("РастягиватьПоГоризонтали", Истина);
	ОписаниеЭлемента.Параметры.Вставить("РастягиватьПоВертикали", Истина);
	
	ОписаниеЭлемента.Действия.Вставить("ДокументСформирован", "РВ_РедакторWysiwyg_Подключаемый_ДокументСформированПоляРедактированияКомментария");
	ТекстРедактирования=СоздатьЭлементПоОписанию(Форма, ОписаниеЭлемента);
	
	// 5.3 Присоединенные файлы
	ОписаниеЭлемента=НовыйОписаниеРеквизитаЭлемента();
	ОписаниеЭлемента.Имя=РВ_РедакторWysiwygHTMLКлиентСервер.ИмяГруппыНовыхПрисоединенныхФайлов(ПутьКДаннымБезЛишнего);
	ОписаниеЭлемента.РодительЭлемента=ГруппаРедактирования;
	ОписаниеЭлемента.Заголовок="Новые файлы";
	
	ОписаниеЭлемента.Параметры.Тип=Тип("ГруппаФормы");
	ОписаниеЭлемента.Параметры.Вставить("Вид", ВидГруппыФормы.ОбычнаяГруппа);
	ОписаниеЭлемента.Параметры.Вставить("АвтоМаксимальнаяШирина", Ложь);
	ОписаниеЭлемента.Параметры.Вставить("АвтоМаксимальнаяВысота", Ложь);
	ОписаниеЭлемента.Параметры.Вставить("Поведение", ПоведениеОбычнойГруппы.Свертываемая);
	
	ГруппаНовыеПрисоединенныеФайлы=СоздатьЭлементПоОписанию(Форма, ОписаниеЭлемента);

КонецПроцедуры

Процедура ВывестиЭлементыПрисоединенногоФайлаНаФорму(Форма, ИмяФайла, ИдентификаторСтроки, ПутьКДаннымБезЛишнего) Экспорт
	
	Элементы = Форма.Элементы;
	
	ИмяГруппыНовыхФайлов=РВ_РедакторWysiwygHTMLКлиентСервер.ИмяГруппыНовыхПрисоединенныхФайлов(ПутьКДаннымБезЛишнего);
	ГруппаНовыеПрисоединенныеФайлы = Элементы.Найти(ИмяГруппыНовыхФайлов);
	
	ИмяГруппыТекФайла=РВ_РедакторWysiwygHTMLКлиентСервер.ИмяГруппыНовогоПрисоединеногоФайла(ПутьКДаннымБезЛишнего,
	ИдентификаторСтроки);
	ГруппаТекФайла = Элементы.Добавить(ИмяГруппыТекФайла, Тип("ГруппаФормы"), ГруппаНовыеПрисоединенныеФайлы);
	ГруппаТекФайла.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТекФайла.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаТекФайла.ОтображатьЗаголовок = Ложь;
	
	ИмяЭлемента=РВ_РедакторWysiwygHTMLКлиентСервер.ИмяЭлементаНадписиНовогоПрисоединеногоФайла(ПутьКДаннымБезЛишнего,
	ИдентификаторСтроки);
	Эскиз = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаТекФайла);
	//	Эскиз.Вид = ВидПоляФормы.ПолеНадписи;
	//	Эскиз.ПутьКДанным = "ТаблицаПрисоединенныхФайлов["+ИндексСтроки+"].Адрес";	
	Эскиз.Заголовок = ИмяФайла;
	//	Эскиз.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	//	Эскиз.РазмерКартинки = РазмерКартинки.Пропорционально;
	//	Эскиз.РастягиватьПоГоризонтали = Ложь;
	//	Эскиз.РастягиватьПоВертикали = Ложь;
	//	Эскиз.Ширина = 10;
	//	Эскиз.Высота = 4;
	
	ИмяГруппыКоманд=РВ_РедакторWysiwygHTMLКлиентСервер.ИмяГруппыКомандНовогоПрисоединеногоФайла(ПутьКДаннымБезЛишнего,
	ИдентификаторСтроки);
	ГруппаКоманд = Элементы.Добавить(ИмяГруппыКоманд, Тип("ГруппаФормы"), ГруппаТекФайла);
	ГруппаКоманд.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКоманд.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаКоманд.ОтображатьЗаголовок = Ложь;
	
	// удалить
	ИмяКомандыУдалить = РВ_РедакторWysiwygHTMLКлиентСервер.ИмяКомандыУдалитьНовогоПрисоединеногоФайла(ПутьКДаннымБезЛишнего,
	ИдентификаторСтроки);
	
	Команда = Форма.Команды.Добавить(ИмяКомандыУдалить);
	Команда.Заголовок  = "Удалить";
	Команда.Действие   = "РВ_РедакторWysiwyg_Подключаемый_УдалитьНовыйПрисоединенныйФайл";
	Команда.Картинка   = БиблиотекаКартинок.Удалить;
	Команда.ИзменяетСохраняемыеДанные = Истина;
	Команда.Отображение = ОтображениеКнопки.Картинка;
	
	КнопкаУдалить = Элементы.Добавить(ИмяКомандыУдалить, Тип("КнопкаФормы"), ГруппаКоманд);
	КнопкаУдалить.ИмяКоманды = ИмяКомандыУдалить;
	
	// открыть
	ИмяКомандыОткрыть = РВ_РедакторWysiwygHTMLКлиентСервер.ИмяКомандыОткрытьНовогоПрисоединеногоФайла(ПутьКДаннымБезЛишнего,
	ИдентификаторСтроки);
	
	Команда = Форма.Команды.Добавить(ИмяКомандыОткрыть);
	Команда.Заголовок  = "Открыть";
	Команда.Действие   = "РВ_РедакторWysiwyg_Подключаемый_ОткрытьНовыйПрисоединенныйФайл";
	Команда.Картинка   = БиблиотекаКартинок.ПоказатьДанные;
	Команда.Отображение = ОтображениеКнопки.Картинка;
	
	КнопкаУдалить = Элементы.Добавить(ИмяКомандыОткрыть, Тип("КнопкаФормы"), ГруппаКоманд);
	КнопкаУдалить.ИмяКоманды = ИмяКомандыОткрыть;
	
	// вставить загруженное изображение
	//Доступно только если формат загружаемого файла является картинкой
	//ИмяКомандыВставить = РВ_РедакторWysiwygHTMLКлиентСервер.ИмяКомандыВставитьНовогоПрисоединеногоФайла(ПутьКДаннымБезЛишнего,
	//ИдентификаторСтроки);
	//
	
	//Команда = Форма.Команды.Добавить(ИмяКомандыВставить);
	//Команда.Заголовок  = ИмяФайла;
	//Команда.Действие   = "РМ_Подключаемый_ОбработкаКомандыПоляКомментария";
	//Команда.Отображение = ОтображениеКнопки.Текст;
	
	//Подменю = Элементы.Найти(РВ_РедакторWysiwygHTMLКлиентСервер.ПрефиксЭлементовФормы()+"ПодменюВставитьЗагруженноеИзображение_" + ПутьКДаннымБезЛишнего);
	//
	//КнопкаВставить = Элементы.Добавить(ИмяКомандыВставить, Тип("КнопкаФормы"), Подменю);
	//КнопкаВставить.ИмяКоманды = ИмяКомандыВставить;
	
КонецПроцедуры

//@skip-warning
Функция ПолучитьСсылкуНаПрисоединенныйФайлПоИдентификатору(Идентификатор) Экспорт
	//	Возврат Справочники.ЗадачаПрисоединенныеФайлы.ПолучитьСсылку(Идентификатор);
КонецФункции

Процедура УдалитьНовыеПрисоединенныеФайлыСФормыПослеЗаписи(Форма,ПутьКДанным) Экспорт
	
	Элементы = Форма.Элементы;
	
	ПутьКДаннымБезЛишнего=РВ_РедакторWysiwygHTMLКлиентСервер.ПолучитьПутьКДаннымБезЛишнего(ПутьКДанным);
	ИмяТаблицыПрисоединенныхФайлов=РВ_РедакторWysiwygHTMLКлиентСервер.ИмяТаблицыПрисоединенныхФайлов(ПутьКДаннымБезЛишнего);
	
	СтрокиФайлов = Форма[ИмяТаблицыПрисоединенныхФайлов].НайтиСтроки(Новый Структура("ЭтоНовый", Истина));
	Для Каждого СтрокаФайла Из СтрокиФайлов Цикл
		СтрокаФайла.ЭтоНовый = Ложь;
	КонецЦикла;
	
	ИмяГруппыНовыхПрисоединенныхФайлов=РВ_РедакторWysiwygHTMLКлиентСервер.ИмяГруппыНовыхПрисоединенныхФайлов(ПутьКДаннымБезЛишнего);
	ГруппаНовыеПрисоединенныеФайлы = Элементы.Найти(ИмяГруппыНовыхПрисоединенныхФайлов);
	
	Если ГруппаНовыеПрисоединенныеФайлы <> Неопределено Тогда
		Для Каждого ГруппаФайла Из ГруппаНовыеПрисоединенныеФайлы.ПодчиненныеЭлементы Цикл
			Элементы.Удалить(ГруппаФайла);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНовыеПрисоединенныеФайлы(Форма, ВладелецФайлов,ПутьКДанным,Предмет=Неопределено) Экспорт
	ПутьКДаннымБезЛишнего=РВ_РедакторWysiwygHTMLКлиентСервер.ПолучитьПутьКДаннымБезЛишнего(ПутьКДанным);
	
	ДанныеПрисоединенныхФайлов = РВ_РедакторWysiwygHTMLКлиентСервер.ДанныеПрисоединенныхФайлов(Форма, ПутьКДаннымБезЛишнего);
	
	Для Каждого СтрокаФайла Из ДанныеПрисоединенныхФайлов Цикл
		
		// при удалении не сохраненного файла адрес в хранилище очищается
		Если Не ЗначениеЗаполнено(СтрокаФайла.Адрес) Или Не СтрокаФайла.ЭтоНовый Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СтрокаФайла.ПутьКФайлу);
		РасширениеБезТочки = СтрЗаменить(ЧастиИмениФайла.Расширение, ".", "");
		ИмяБезРасширения = ЧастиИмениФайла.ИмяБезРасширения;
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецФайлов);
		ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
		ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		
		СтрокаФайла.Ссылка=РВ_РедакторWysiwygHTMLПереопределяемый.ЗаписатьПрисоединенныйФайлВБазу(ПараметрыФайла,СтрокаФайла.Адрес,Форма, ПутьКДанным,Предмет);
	КонецЦикла;
КонецПроцедуры

Процедура ПрочитатьПрисоединенныеФайлы(Форма, ВладелецФайлов, ПутьКДанным) Экспорт
	
	ПутьКДаннымБезЛишнего=РВ_РедакторWysiwygHTMLКлиентСервер.ПолучитьПутьКДаннымБезЛишнего(ПутьКДанным);
	ИмяТаблицыПрисоединенныхФайлов=РВ_РедакторWysiwygHTMLКлиентСервер.ИмяТаблицыПрисоединенныхФайлов(ПутьКДаннымБезЛишнего);
	
	Форма[ИмяТаблицыПрисоединенныхФайлов].Очистить();
	
	ВсеПрисоединенныеФайлы = Новый Массив;
	РВ_РедакторWysiwygHTMLПереопределяемый.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВсеПрисоединенныеФайлы,ВладелецФайлов,Форма,ПутьКДанным);
	
	Если ВсеПрисоединенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	ДополнительныеПараметры = Новый Структура("ИдентификаторФормы", УникальныйИдентификатор);
	
	Для Каждого Файл Из ВсеПрисоединенныеФайлы Цикл
		
		ДанныеФайла = Неопределено;
		РВ_РедакторWysiwygHTMLПереопределяемый.ПриПолученииДанныхФайла(ДанныеФайла,Файл,УникальныйИдентификатор,Форма,ВладелецФайлов,ПутьКДанным);
		
		Если ДанныеФайла=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаФайла = Форма[ИмяТаблицыПрисоединенныхФайлов].Добавить();
		СтрокаФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
		СтрокаФайла.Адрес = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		СтрокаФайла.ЭтоНовый = Ложь;
		СтрокаФайла.Ссылка = Файл;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область РаботаСФормами

Функция НовыйОписаниеРеквизитаЭлемента() Экспорт
	СтруктураРеквизита = Новый Структура;
	
	СтруктураРеквизита.Вставить("СоздаватьРеквизит", Истина);
	СтруктураРеквизита.Вставить("Имя", "");
	СтруктураРеквизита.Вставить("ОписаниеТипов", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(10)));
	СтруктураРеквизита.Вставить("ПутьКДанным", "");
	СтруктураРеквизита.Вставить("Заголовок", "");
	
	СтруктураРеквизита.Вставить("СоздаватьЭлемент", Истина);
	СтруктураРеквизита.Вставить("РодительЭлемента", Неопределено);
	СтруктураРеквизита.Вставить("ПередЭлементом", Неопределено);
	СтруктураРеквизита.Вставить("МногострочныйРежим", Неопределено);
	СтруктураРеквизита.Вставить("РасширенноеРедактирование", Неопределено);
	СтруктураРеквизита.Вставить("РастягиватьПоГоризонтали", Неопределено);
	СтруктураРеквизита.Вставить("РастягиватьПоВертикали", Неопределено);
	СтруктураРеквизита.Вставить("Параметры", НовыйПараметрыРеквизита());
	СтруктураРеквизита.Вставить("Действия", Новый Структура);
	Возврат СтруктураРеквизита;
	
КонецФункции

Функция НовыйПараметрыРеквизита()
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Тип", Тип("ПолеФормы"));
	Параметры.Вставить("Вид_ПоУмолчанию", ВидПоляФормы.ПолеВвода);
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйОписаниеКомандыКнопки() Экспорт
	Структура = Новый Структура;
	
	Структура.Вставить("СоздаватьКоманду", Истина);
	Структура.Вставить("СоздаватьКнопку", Истина);
	
	Структура.Вставить("Имя", "");
	Структура.Вставить("Действие", "");
	Структура.Вставить("ИмяКоманды", "");
	Структура.Вставить("ЭтоГиперссылка", Ложь);
	Структура.Вставить("РодительЭлемента", Неопределено);
	Структура.Вставить("ПередЭлементом", Неопределено);
	Структура.Вставить("Заголовок", "");
	Структура.Вставить("Подсказка", "");
	Структура.Вставить("СочетаниеКлавиш", Неопределено);
	Структура.Вставить("Картинка", Неопределено);
	
	Возврат Структура;
КонецФункции

Функция СоздатьКомандуПоОписанию(Форма, ОписаниеКоманды) Экспорт
	Если Не ОписаниеКоманды.СоздаватьКоманду Тогда
		Возврат Неопределено;
	КонецЕсли;
	Команда = Форма.Команды.Добавить(ОписаниеКоманды.Имя);
	Команда.Заголовок  = ОписаниеКоманды.Заголовок;
	Команда.Подсказка  = ОписаниеКоманды.Подсказка;
	Команда.Действие   = ОписаниеКоманды.Действие;
	Команда.Картинка   = ОписаниеКоманды.Картинка;
	Если ОписаниеКоманды.СочетаниеКлавиш <> Неопределено Тогда
		Команда.СочетаниеКлавиш = ОписаниеКоманды.СочетаниеКлавиш;
	КонецЕсли;
	
	Возврат Команда;
КонецФункции

Функция СоздатьЭлементПоОписанию(Форма, ОписаниеРеквизита) Экспорт
	Если Не ОписаниеРеквизита.СоздаватьЭлемент Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяЭлементаФормы = ИмяТаблицыПоляФормы(Форма, ОписаниеРеквизита.РодительЭлемента) + ОписаниеРеквизита.Имя;
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлементаФормы);
	Если ЭлементФормы <> Неопределено Тогда
		Возврат ЭлементФормы;
	КонецЕсли;

	Если ОписаниеРеквизита.ПередЭлементом = Неопределено Тогда
		ЭлементФормы = Форма.Элементы.Добавить(ИмяЭлементаФормы, ОписаниеРеквизита.Параметры.Тип, ЭлементФормы(Форма,
			ОписаниеРеквизита.РодительЭлемента));
	Иначе
		ЭлементФормы = Форма.Элементы.Вставить(ИмяЭлементаФормы, ОписаниеРеквизита.Параметры.Тип, ЭлементФормы(Форма,
			ОписаниеРеквизита.РодительЭлемента), ЭлементФормы(Форма, ОписаниеРеквизита.ПередЭлементом));
	КонецЕсли;
	
	ЭлементФормы.Заголовок = ОписаниеРеквизита.Заголовок;
	
	Если Тип(ЭлементФормы) = Тип("ПолеФормы") Тогда
		ЭлементФормы.Вид = ОписаниеРеквизита.Параметры.Вид_ПоУмолчанию;
		Попытка
			Если ТипЗнч(Реквизит(Форма, ОписаниеРеквизита.Имя, ОписаниеРеквизита.ПутьКРеквизиту)) = Тип("Булево") Тогда
				ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
			КонецЕсли;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭлементФормы, ОписаниеРеквизита.Параметры);
	
	Если Тип(ЭлементФормы) = Тип("ПолеФормы") Тогда
		Если ЗначениеЗаполнено(ОписаниеРеквизита.ПутьКДанным) Тогда
			ЭлементФормы.ПутьКДанным = ОписаниеРеквизита.ПутьКДанным;
		Иначе
			ЭлементФормы.ПутьКДанным = ОписаниеРеквизита.Имя;
		КонецЕсли;
		
		Если ОписаниеРеквизита.МногострочныйРежим <> Неопределено Тогда
			ЭлементФормы.МногострочныйРежим=ОписаниеРеквизита.МногострочныйРежим;
		КонецЕсли;
		Если ОписаниеРеквизита.РасширенноеРедактирование <> Неопределено Тогда
			ЭлементФормы.РасширенноеРедактирование=ОписаниеРеквизита.РасширенноеРедактирование;
		КонецЕсли;
		
	КонецЕсли;
	Если ОписаниеРеквизита.РастягиватьПоГоризонтали <> Неопределено Тогда
		ЭлементФормы.РастягиватьПоГоризонтали=ОписаниеРеквизита.РастягиватьПоГоризонтали;
	КонецЕсли;
	Если ОписаниеРеквизита.РастягиватьПоВертикали <> Неопределено Тогда
		ЭлементФормы.РастягиватьПоВертикали=ОписаниеРеквизита.РастягиватьПоВертикали;
	КонецЕсли;
	
	Для Каждого Действие Из ОписаниеРеквизита.Действия Цикл
		ЭлементФормы.УстановитьДействие(Действие.Ключ, Действие.Значение);
	КонецЦикла;
	Возврат ЭлементФормы;
КонецФункции

Функция СоздатьКнопкуПоОписанию(Форма, ОписаниеКнопки) Экспорт
	Если Не ОписаниеКнопки.СоздаватьКнопку Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Кнопка = Форма.Элементы.Вставить(ОписаниеКнопки.Имя, Тип("КнопкаФормы"), ЭлементФормы(Форма,
	ОписаниеКнопки.РодительЭлемента), ЭлементФормы(Форма, ОписаниеКнопки.ПередЭлементом));
	Если Не ОписаниеКнопки.СоздаватьКоманду Тогда
		Кнопка.Заголовок = ОписаниеКнопки.Заголовок;
	КонецЕсли;
	Если ОписаниеКнопки.ЭтоГиперссылка = Ложь Тогда
		Если ЭтоКнопкаКоманднойПанели(Форма, ОписаниеКнопки.РодительЭлемента) Тогда
			Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		Иначе
			Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КонецЕсли;
	Иначе
		Если ЭтоКнопкаКоманднойПанели(Форма, ОписаниеКнопки.РодительЭлемента) Тогда
			Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
		Иначе
			Кнопка.Вид = ВидКнопкиФормы.ГиперссылкаКоманднойПанели;
		КонецЕсли;
	КонецЕсли;
	Кнопка.ИмяКоманды = ОписаниеКнопки.ИмяКоманды;
	
КонецФункции

Функция ЭтоКнопкаКоманднойПанели(Форма, Знач РодительКнопки)
	Если РодительКнопки = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли РодительКнопки = Форма.КоманднаяПанель Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(РодительКнопки) = Тип("УправляемаяФорма") Тогда
		Возврат Ложь;
	Иначе
		РодительКнопки = ЭлементФормы(Форма, РодительКнопки);
		Возврат ЭтоКнопкаКоманднойПанели(Форма, РодительКнопки.Родитель);
	КонецЕсли;
КонецФункции

Функция ИмяТаблицыПоляФормы(Форма, Знач РодительЭлемента)
	Если РодительЭлемента = Неопределено Тогда
		Возврат "";
	ИначеЕсли ТипЗнч(РодительЭлемента) = Тип("ТаблицаФормы") Тогда
		Возврат РодительЭлемента.Имя;
	ИначеЕсли ТипЗнч(РодительЭлемента) = Тип("УправляемаяФорма") Тогда
		Возврат "";
	Иначе
		РодительКнопки = ЭлементФормы(Форма, РодительЭлемента);
		Возврат ИмяТаблицыПоляФормы(Форма, РодительЭлемента.Родитель);
	КонецЕсли;
КонецФункции

Функция ЭлементФормы(Форма, Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Возврат Форма.Элементы.Найти(Идентификатор);
	Иначе
		Возврат Идентификатор;
	КонецЕсли;
КонецФункции

Функция Реквизит(Форма, ИмяРеквизита, ПутьКРеквизиту = "") Экспорт
	Если ПутьКРеквизиту <> "" Тогда
		Разделитель = СтрНайти(ПутьКРеквизиту, ".");
		Если Разделитель = 0 Тогда
			ИмяШага = ПутьКРеквизиту;
			ОстатокПути = "";
		Иначе
			ИмяШага = Лев(ПутьКРеквизиту, Разделитель - 1);
			ОстатокПути = Сред(ПутьКРеквизиту, Разделитель + 1);
		КонецЕсли;
		Возврат Реквизит(Форма[ИмяШага], ИмяРеквизита, ОстатокПути);
	Иначе
		НесуществующееЗначение = Неопределено;
		Структура = Новый Структура(ИмяРеквизита, НесуществующееЗначение);
		ЗаполнитьЗначенияСвойств(Структура, Форма);
		Если Структура[ИмяРеквизита] = НесуществующееЗначение Тогда
			Возврат НесуществующееЗначение;
		КонецЕсли;
		Возврат Форма[ИмяРеквизита];
	КонецЕсли;
КонецФункции

#КонецОбласти