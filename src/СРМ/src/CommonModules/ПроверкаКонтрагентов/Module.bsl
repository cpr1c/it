#Область ПрограммныйИнтерфейс

#Область Проверка

#Область ПроверкаОдногоКонтрагента

// Проверка одного контрагента по ИНН, КПП и Дате.
//
// Параметры:
//  Параметры - Структура - Параметры запуска фонового задания. Ключи структуры:
//    * Контрагент - ОпределяемыйТип.Контрагент - Проверяемый контрагент.
//    * ИНН - Строка - ИНН Контрагента.
//    * КПП - Строка - КПП Контрагента.
//    * Дата - Дата - Дата, на которую выполняется проверка контрагента. Может быть не указана,
//        тогда берется текущая дата.
//  АдресХранилища - Строка - Адрес временного хранилища, в который будет помещен результат проверки контрагента.
//
Процедура ПроверитьКонтрагента(Параметры, АдресХранилища) Экспорт 
	
	// Готовим данные в нужном формате для передачи на проверку.
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	
	НоваяСтрока = ДанныеКонтрагентов.Добавить();
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		НоваяСтрока.ОбластьДанныхВспомогательныеДанные = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры);
	
	ЭтоПроверкаПоКнопке = Параметры.Свойство("ЭтоПроверкаПоКнопке") И Параметры.ЭтоПроверкаПоКнопке;
	
	ВыполнятьПредварительнуюПроверкуКонтрагента = Параметры.Свойство("ВыполнятьПредварительнуюПроверкуКонтрагента") 
		И Параметры.ВыполнятьПредварительнуюПроверкуКонтрагента;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("АдресХранилища", 								АдресХранилища);
	ДополнительныеПараметры.Вставить("ЭтоПроверкаСправочника", 						Истина);
	ДополнительныеПараметры.Вставить("СохранятьРезультатСразуПослеПроверки", 		Параметры.СохранятьРезультатСразуПослеПроверки);
	ДополнительныеПараметры.Вставить("ВыполнятьПредварительнуюПроверкуКонтрагента", ВыполнятьПредварительнуюПроверкуКонтрагента);
	ДополнительныеПараметры.Вставить("ЭтоПроверкаПоКнопке", 						ЭтоПроверкаПоКнопке);
	 
	ПроверитьВебСервисомФНС(ДанныеКонтрагентов, ДополнительныеПараметры);
	
КонецПроцедуры

// Состояние контрагента
//
// Параметры:
//		ИНН		 - Строка - ИНН Контрагента.
//		КПП		 - Строка - КПП Контрагента.
//		Дата	 - Дата - Дата, на которую выполняется проверка контрагента. Может быть не указана,
//		                  тогда берется текущая дата.
// 
// Возвращаемое значение:
//  Перечисление.СостоянияСуществованияКонтрагента - Состояния контрагента согласно данным ФНС.
//
Функция СостояниеКонтрагента(ИНН, КПП, Дата = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИНН",        ИНН);
	ДополнительныеПараметры.Вставить("КПП",        КПП);
	ДополнительныеПараметры.Вставить("Дата",       Дата);
	ДополнительныеПараметры.Вставить("Контрагент", Неопределено);
	ДополнительныеПараметры.Вставить("СохранятьРезультатСразуПослеПроверки", Ложь);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПроверитьКонтрагента(ДополнительныеПараметры, АдресХранилища);
	
	Состояние = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Возврат Состояние;
	
КонецФункции

#КонецОбласти

#Область ПроверкаНесколькихКонтрагентов

// Проверка нескольких контрагентов.
//
// Параметры:
//  ДанныеКонтрагентов		 - ТаблицаЗначений - Содержит данные проверяемых контрагентов. 
//		Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагента.
//	ДополнительныеПараметры  - Структура - Дополнительные параметры проверки.
// 		Структура может быть пустой или иметь следующие элементы:
//		- ЭтоПроверкаСправочника/ЭтоПроверкаДокумента/ЭтоПроверкаОтчета для указания вида
//			проверяемого объекта.
//		- СохранятьРезультатСразуПослеПроверки - флаг, позволяющий сразу после проверки
//		контрагента сохранить результат в регистр СостоянияКонтрагентов при проверке
//		в режиме ЭтоПроверкаСправочника = Истина.
//		- АдресХранилища - адрес, по которому будет сохранен результат проверки при проверке
//		в режиме ЭтоПроверкаСправочника = Истина.
//		- ВыполнятьПредварительнуюПроверкуКонтрагента - флаг, действующий при проверке
//		в режиме ЭтоПроверкаСправочника = Истина, который показывает, что предварительная проверка ИНН, КПП
//		и Даты уже была выполнена ранее и здесь проверку можно пропустить.
Процедура ПроверитьВебСервисомФНС(ДанныеКонтрагентов, ДополнительныеПараметры) Экспорт
	
	ЭтоПроверкаОтчета 			= ДополнительныеПараметры.Свойство("ЭтоПроверкаОтчета") И ДополнительныеПараметры.ЭтоПроверкаОтчета;
	БратьСостоянияТолькоИзКэша 	= ДополнительныеПараметры.Свойство("ИзКэша") И ДополнительныеПараметры.ИзКэша;
	
	ЕстьДоступКВебСервисуФНС = БратьСостоянияТолькоИзКэша ИЛИ ЕстьДоступКВебСервисуФНС();
	ДополнительныеПараметры.Вставить("ЕстьДоступКВебСервисуФНС", ЕстьДоступКВебСервисуФНС);
	
	// Проверяем данные в контрагентах, справочниках, документах предварительными проверками 
	// даже при отсутствующем доступе к веб-сервису.
	// В отчет из-за большого количества данных при отсутствующем доступе к веб-сервису данные не проверяем.
	Если ЕстьДоступКВебСервисуФНС
		ИЛИ НЕ ЕстьДоступКВебСервисуФНС И НЕ ЭтоПроверкаОтчета Тогда
		
		// Приведение данных к нужному формату, выявление записей с ошибками.
		ПодготовитьДанныеИВыполнитьПредварительнуюПроверку(ДанныеКонтрагентов, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Если ЕстьДоступКВебСервисуФНС И НЕ БратьСостоянияТолькоИзКэша Тогда
		// Получение результатов проверки от веб-сервиса.
		// Проверяем только тех контрагентов, у которых неопределено состояние существования и у которых нет ошибок.
		Отбор = Новый Структура();
		Отбор.Вставить("Состояние", Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка());
		ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор);
	КонецЕсли;
	
	// Даже при отсутствии доступа к веб-сервису запоминаем результат, так
	// как предварительная проверка выявляет ошибки и без доступа к веб-сервису.
	ЗапомнитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, ДополнительныеПараметры);
		
КонецПроцедуры

// Метод фонового задания по проверки контрагентов в документе.
//
// Параметры:
//  Параметры	 - Структура - Параметры фонового задания. Ключи:
//		"ДанныеКонтрагентов" - ТаблицаЗначений - - Содержит данные проверяемых контрагентов. 
//			Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагентаДляДокумента.
//		"АдресХранилища" - Строка - Адрес, в который будет помещен результат проверки контрагента
//		"СохранятьРезультатСразуПослеПроверки" - Булево - Признак, указывающий нужно ли результат проверки контрагента
// 			сразу сохранять в регистр.
//		"ЭтоПроверкаПоКнопке" - Булево - Если Истина, то данные берутся не из кэша, а из Интернета.
Процедура ПроверитьКонтрагентовВДокументе(Параметры) Экспорт
	
	ПроверяемыеКонтрагенты 	= Параметры.ДанныеКонтрагентов;
	АдресХранилища 			= Параметры.АдресХранилища;
	ЭтоПроверкаПоКнопке 	= Параметры.Свойство("ЭтоПроверкаПоКнопке") И Параметры.ЭтоПроверкаПоКнопке;
	
	ДанныеКонтрагентов = ПроверяемыеКонтрагенты.Скопировать();
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоПроверкаДокумента", 	Истина);
	ДополнительныеПараметры.Вставить("ЭтоПроверкаПоКнопке", 	ЭтоПроверкаПоКнопке);
				
	ПроверитьВебСервисомФНС(ДанныеКонтрагентов, ДополнительныеПараметры);
	
	ЗаполнитьСостоянияВДокументе(ПроверяемыеКонтрагенты, ДанныеКонтрагентов);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеКонтрагентов", 					ПроверяемыеКонтрагенты);
	Результат.Вставить("ЕстьДоступКВебСервисуФНС", 				ДополнительныеПараметры.ЕстьДоступКВебСервисуФНС);
	Результат.Вставить("СохранятьРезультатСразуПослеПроверки", 	Параметры.СохранятьРезультатСразуПослеПроверки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Метод регламентного задания по проверке контрагентов в справочнике.
// 		В модели сервиса обновляет состояния контрагентов по каждой записи регистра.
// 		В локальном режима записывает недостающих контрагентов в регистр и обновляет состояния по каждой записи регистра.
Процедура ПроверитьКонтрагентовРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаКонтрагентов);
	
	// Проверяем, включен ли механизм.
	Если НЕ ПроверкаКонтрагентовВключена() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияКонтрагентов.Контрагент,
	|	СостоянияКонтрагентов.ИНН,
	|	СостоянияКонтрагентов.КПП,
	|	ЛОЖЬ КАК ЭтоИностранныйКонтрагент,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(СостоянияКонтрагентов.ИНН, 12, 1) <> """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоЮридическоеЛицо,
	|	&Дата КАК Дата,
	|	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка) КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
	|ГДЕ
	|	СостоянияКонтрагентов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке)";

	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
			
	КонецЕсли;

	// Указываем дату, на которую будет выполняться проверка.
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	ДанныеКонтрагентов.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	// Выполняется проверка только тех ИНН и КПП, которые записаны в регистр.
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоПроверкаСправочника", Истина);
	
	ПроверитьВебСервисомФНС(ДанныеКонтрагентов, ДополнительныеПараметры);
	
	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме.
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		ПроверитьНепроверенныхКонтрагентов(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет первоначальное заполнение регистра на основе справочника контрагентов.
// 		Заполнение выполняется:
// 		1. После ручного включения проверки фоновым заданием.
// 		2. В режиме сервисов - обновлением ИБ в каждой области отдельно.
//
// Параметры:
//  Параметры	 - Структура, Неопределено - Параметры очереди заданий в модели сервиса.
//		В локальной версии - Неопределено.
Процедура ПроверитьКонтрагентовПослеВключенияПроверки(Параметры = Неопределено) Экспорт
	
	ЭтоОбновлениеИБВМоделиСервиса = Ложь;
	РазмерПорции = 1000;
	
	Если Параметры = Неопределено Тогда
		// Это заполнение регистра после включения проверки.
	Иначе
		// Это обновление ИБ.
		// Обновление должно выполняться только в модели сервиса.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			ЭтоОбновлениеИБВМоделиСервиса = Истина;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме,
	// либо в модели сервисов в отложенном обновлении из областей данных. 
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Запуск фонового задания по проверке контрагентов после 
//		включения проверки в предложении на подключение или из настроек.
Процедура ПроверитьКонтрагентовПослеВключенияПроверкиФоновоеЗадание() Экспорт
	
	Попытка
	
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
		ПараметрыВыполнения.КлючФоновогоЗадания = "ПроверкаПослеВключенияМеханизма";
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка контрагентов'");
		
		ПараметрыПроцедуры = Новый Структура;
		
		ДлительныеОперации.ВыполнитьВФоне(
			"ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверкиВФоне",
			ПараметрыПроцедуры, 
			ПараметрыВыполнения);

	Исключение
		
		// Исключение возникнет при попытке запуска фонового задания, пока не отработало предыдущее фоновое задание.
		// Специальной обработки не требуется.
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Фоновое задание по обработке непроверенных контрагентов после включения'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;
	
КонецПроцедуры

// Вспомогательный API. Контрагенты проверяются по данным ФНС.
//  По завершению проверки в переданную таблицу добавляется колонка c состоянием контрагента.
//
// Параметры:
//  ПроверяемыеКонтрагенты - ТаблицаЗначений - Таблица, содержащая контрагентов на проверку.
//    Колонки таблицы: Контрагент, ИНН, КПП, Дата.
//  ВидПроверки - Строка - Может принимать одно следующих значений: 
//    * ИзКэша - результат проверки выбирается только из кэша.
//    * АктуальныеДанные - результат проверки получается только на основе данных, возвращенных веб-сервисом проверки.
//    * Смешанный - сначала выбираются данные из кэша, затем идет обращение к веб-сервису проверки.
//  ДополнительныеПараметры - Структура - Может содержать один из следующих ключей.
//    * ЭтоПроверкаДокумента - Булево - особенность для документов: если дата документа больше текущей, то сервис ФСН
//        выдает ошибку. Чтобы такого не было, документы с будущей датой проверяем на текущую дату.
//    * ЭтоПроверкаОтчета - Булево - Для отчетов предварительная проверка не выполняется, все данные сразу уходят
//        на веб-сервис ФНС.
//    * ЭтоПроверкаСправочника - Булево - Для справочника часть состояний берется из кэша в режиме
//        проверки ИзКэша или Смешанный. После проверки данные проверки сохраняются в регистр сведений.
Процедура ВыполнитьПроверкуКонтрагентов(ПроверяемыеКонтрагенты, Знач ВидПроверки = "Смешанный", Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	// Проверка корректности переданного параметра.
	Если ВидПроверки <> "ИзКэша" И ВидПроверки <> "АктуальныеДанные" И ВидПроверки <> "Смешанный" Тогда
		ВызватьИсключение(НСтр("ru = 'Недопустимое значение параметра (параметр номер ''2'')'"));
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ИзКэша", 				ВидПроверки = "ИзКэша");
	ДополнительныеПараметры.Вставить("АктуальныеДанные", 	ВидПроверки = "АктуальныеДанные");
	ДополнительныеПараметры.Вставить("Смешанный", 			ВидПроверки = "Смешанный");
	
	Если ПроверяемыеКонтрагенты.Колонки.Найти("Состояние") = Неопределено Тогда
		ПроверяемыеКонтрагенты.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСуществованияКонтрагента"));
	КонецЕсли;
	
	ДанныеКонтрагентов = ПроверяемыеКонтрагенты.Скопировать();
	
	ПроверитьВебСервисомФНС(ДанныеКонтрагентов, ДополнительныеПараметры);
	
	ЭтоПроверкаДокумента = ДополнительныеПараметры.Свойство("ЭтоПроверкаДокумента") И ДополнительныеПараметры.ЭтоПроверкаДокумента;
	
	Если ЭтоПроверкаДокумента Тогда
		ЗаполнитьСостоянияВДокументе(ПроверяемыеКонтрагенты, ДанныеКонтрагентов);
	Иначе
		ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Добавление описания расположения контрагента в документе в таблицу описаний.
//
// Параметры:
//  Описание		 - ТаблицаЗначений - таблица, хранящая описание расположения контрагентов в документе.
//  Ссылка			 - ДокументСсылка - Документ, в котором выполняется проверка контрагента.
//  Элемент			 - ПолеВвода, ДекорацияФормы - Элемент, в котором находится проверяемый контрагент или счет-фактура.
//  Контрагент		 - ОпределяемыйТип.Контрагент - Проверяемый контрагент.
//  ЭлементРодитель	 - ГруппаФормы - Группа, которая содержит элемент с контрагентом или
//                     счетом-фактурой.
//		Данный элемент будет подкрашен по результату проверки контрагентов. Может не указываться.
Процедура ДополнитьОписание(
		Описание,  
		Ссылка, 
		Элемент, 
		Контрагент,
		ЭлементРодитель = Неопределено) Экспорт
	
	СтрокаОписания = Описание.Добавить();
	СтрокаОписания.Ссылка				= Ссылка;
	СтрокаОписания.Элемент				= Элемент;
	СтрокаОписания.ЭлементРодитель		= ЭлементРодитель;
	СтрокаОписания.Контрагент 			= Контрагент;
	
КонецПроцедуры

// Добавление записи к таблице описания расположения контрагентов в табличных частях документа.
//
// Параметры:
//  Форма	 			 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  Описание 			 - ТаблицаЗначений - Таблица с описанием расположения контрагентов в табличной части документа.
//  ИмяТаблицыФормы		 - Строка - Имя таблицы формы, в которой расположен контрагент.
//  ИмяПоляСКонтрагентом - Строка - Имя колонки с контрагентом в таблице формы, в которой расположен контрагент.
//  ИмяПоляСДатой		 - Строка - Имя колонки с датой в таблице формы, на которую выполняется проверка контрагента.
//		Если в таблице формы нет такой колонки, то не заполняется.
//
Процедура ДополнитьОписаниеТабличныхЧастей(Форма, Описание, ИмяТаблицыФормы, ИмяПоляСКонтрагентом, ИмяПоляСДатой) Экспорт
	
	Если КолонкаТаблицыСкрытаФункциональнойОпцией(Форма, ИмяТаблицыФормы, ИмяПоляСКонтрагентом) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОписания = Описание.Добавить();

	// ТЧ
	СтрокаОписания.ИмяТаблицыФормы 			= ИмяТаблицыФормы;
	СтрокаОписания.ИмяТабличнойЧасти 		= ИмяРеквизита(Форма, ИмяТаблицыФормы);
	
	// Контрагент
	СтрокаОписания.ИмяПоляСКонтрагентом		= ИмяПоляСКонтрагентом;
	СтрокаОписания.ИмяКолонкиСКонтрагентом	= ИмяРеквизита(Форма, ИмяПоляСКонтрагентом);
	СтрокаОписания.КонтрагентСкрытФункциональнойОпцией = ПолеКонтрагентаСкрытоФункциональнойОпцией(Форма, СтрокаОписания);
	
	// Дата
	СтрокаОписания.ИмяПоляСДатой			= ИмяПоляСДатой;
	СтрокаОписания.ИмяКолонкиСДатой			= ИмяРеквизита(Форма, ИмяПоляСДатой);

КонецПроцедуры

// Устанавливает текст и видимость предупреждения про тестовый режим работы сервиса.
//
// Параметры:
//  Элемент	 - ДекорацияФормы - Элемент, в который выводится информация про
// 			тестовый режим работы сервиса.
//
Процедура УстановитьВидимостьИЗаголовокПредупрежденияПроТестовыйРежим(Элемент) Экспорт
	
	Если ТестовыйРежимРаботыСервисаЗавершился() Тогда
		Элемент.Видимость = Ложь;
	Иначе
		Элемент.Видимость = Истина;
		Элемент.Заголовок = 
			НСтр("ru = 'В настоящее время веб-сервис ФНС работает в тестовом режиме.'");
	КонецЕсли;
	
КонецПроцедуры

// Тестовый режим работы сервиса завершился.
// 
// Возвращаемое значение:
//  Булево - Истина, если тестовый режим работы сервиса завершился.
//
Функция ТестовыйРежимРаботыСервисаЗавершился() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Установка надписей в панели проверки контрагентов в отчета при создании на сервере.
//
// Параметры:
//  Форма	- УправляемаяФорма - Форма отчета, в котором выводится результат проверки контрагентов.
Процедура УстановитьНадписиВПанелиОтчетаПриСозданииНаСервере(Форма) Экспорт
	
	СсылкаНаИнструкцию = Новый ФорматированнаяСтрока(" ", ПроверкаКонтрагентовКлиентСервер.СсылкаНаИнструкцию());
	
	// Все контрагенты корректны
	ЭлементФормы = Форма.Элементы.Найти("ТекстПриКорректныхКонтрагентах");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Проверка контрагентов по данным ФНС выполнена успешно'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
	// Есть некорректные контрагенты.
	ЭлементФормы = Форма.Элементы.Найти("ТекстПриНекорректныхКонтрагентах");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Обнаружены недействующие контрагенты по данным ФНС'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
	// Выполняется проверка
	ЭлементФормы = Форма.Элементы.Найти("ТекстПриПроверкеВПроцессеВыполнения");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Выполняется проверка контрагентов согласно данным ФНС'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
	// Нет доступа к сервису
	ЭлементФормы = Форма.Элементы.Найти("ТекстНетДоступаКСервису");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Не удалось произвести проверку контрагентов: сервис ФНС временно недоступен'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВДокументах

// Запуск фонового задания по проверке контрагента.
//
// Параметры:
//  Форма						 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  ПараметрыФоновогоЗадания	 - ТаблицаФормы - Если изменения контрагента или даты произошли в табличной части.
//								 - ПолеФормы - Элемент управления, содержащий контрагента или счет-фактуру, в случае, 
//		если произошло изменение в контрагенте, находящегося в шапке или в счете-фактуре, находящегося в подвале.
//								 - Дата - Дата документа, в случае если произошло изменение даты
//								 - Неопределено - если требуется проверка всех контрагентов в документе.
//								 - Булево - если это запуск проверки контрагента при создании на сервере.
Процедура ПроверитьКонтрагентовВДокументеФоновоеЗадание(Форма, ПараметрыФоновогоЗадания) Экспорт
	
	ДанныеКонтрагентов = ДанныеКонтрагентовВДокументеДляПроверкиФоновымЗаданием(Форма, ПараметрыФоновогоЗадания);
	Если ДанныеКонтрагентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКонтрагентов.Количество() > 0 Тогда
		
		// Инициализируем параметры фонового задания.
		Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища 			= ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания 	= Неопределено;
		Форма.РеквизитыПроверкиКонтрагентов.ЗаданиеВыполнено 		= Ложь;
		
		СохранятьРезультатСразуПослеПроверки = ПараметрыФоновогоЗадания.Свойство("СохранятьРезультатСразуПослеПроверки") 
			И ПараметрыФоновогоЗадания.СохранятьРезультатСразуПослеПроверки;
		
		ПараметрыЗапуска = Новый Структура;
		ПараметрыЗапуска.Вставить("ДанныеКонтрагентов", 					ДанныеКонтрагентов);
		ПараметрыЗапуска.Вставить("АдресХранилища", 						Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища);
		ПараметрыЗапуска.Вставить("СохранятьРезультатСразуПослеПроверки",	СохранятьРезультатСразуПослеПроверки);
		ПараметрыЗапуска.Вставить("ЭтоПроверкаПоКнопке",					Форма.РеквизитыПроверкиКонтрагентов.ЭтоПроверкаПоКнопке);
		
		Параметры = Новый Массив;
		Параметры.Добавить(ПараметрыЗапуска);
		
		Попытка
		 	ФоновоеЗадание = ФоновыеЗадания.Выполнить("ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументе", 
				Параметры, , НСтр("ru = 'Проверка контрагентов в документе'"));
				
			Если ФоновоеЗадание <> Неопределено Тогда
					
				Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания = ФоновоеЗадание.УникальныйИдентификатор;
				Форма.РеквизитыПроверкиКонтрагентов.ЗаданиеВыполнено 
					= ПроверкаКонтрагентовВызовСервера.ЗаданиеВыполнено(ФоновоеЗадание.УникальныйИдентификатор);
					
			КонецЕсли;
		Исключение
			
			// Исключение возникнет при попытке запуска фонового задания, пока не отработало предыдущее фоновое задание.
			// Специальной обработки не требуется.
			КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Фоновое задание в документе'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
		КонецПопытки;
			
	КонецЕсли;
	
КонецПроцедуры

// Отображение результата проверки контрагентов в документе.
//
// Параметры:
//  Форма	- УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
Процедура ОтобразитьРезультатПроверкиКонтрагентаВДокументе(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ИнициализацияВыполненаПолностью Тогда
		
		СтандартнаяОбработка = Истина;
		РаботаСКонтрагентамиПереопределяемый.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(Форма, СтандартнаяОбработка);
		
		// Если действия по отображению результата проверки переопределили, то стандартную обработку не выполняем.
		Если НЕ СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
		
		ПроверкаКонтрагентовКлиентСервер.ПредотвратитьСбросРедактируемогоЗначения(Форма);
		
		СостояниеПроверки = Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаВыполнена;
		
		Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища) 
			И ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища) Тогда
			
			РезультатРаботыФоновогоЗадания = ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища);
			
			Если РезультатРаботыФоновогоЗадания <> Неопределено Тогда
				
				ЕстьДоступКВебСервисуФНС = РезультатРаботыФоновогоЗадания.ЕстьДоступКВебСервисуФНС;
				
				Если ЕстьДоступКВебСервисуФНС Тогда
					СостояниеПроверки = Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаВыполнена;
				Иначе
					СостояниеПроверки = Перечисления.СостоянияПроверкиКонтрагентов.НетДоступаКВебСервису;
				КонецЕсли;
					
				// Фоновое задание отработало
				ДанныеКонтрагентов = РезультатРаботыФоновогоЗадания.ДанныеКонтрагентов;
				ЗапомнитьРезультатПроверкиКонтрагентов(Форма, ДанныеКонтрагентов);
				
				Если РезультатРаботыФоновогоЗадания.СохранятьРезультатСразуПослеПроверки Тогда
					
					// Определение объекта и ссылки.
					ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
					ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
					
					СохранитьРезультатПроверкиКонтрагентов(Форма, ДокументОбъект);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Очищаем свойства фонового задания.
		Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища 			= Неопределено;
		Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания 	= Неопределено;
		Форма.РеквизитыПроверкиКонтрагентов.ЗаданиеВыполнено 		= Истина;
			
		ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, СостояниеПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливаются параметры динамического списка документов и применяется условное оформление.
//
// Параметры:
//  Список	 - ДинамическийСписок - Список документов.
Процедура ПриСозданииНаСервереСписокДокументов(Список) Экспорт
	
	УстановитьПараметрыДинамическогоСписка(Список);
	УстановитьУсловноеОформлениеСпискаДокументов(Список);
	
КонецПроцедуры

// Запоминание результатов проверки контрагентов в дополнительные свойства для последующего сохранения
//	в регистр при помощи подписки на события.
//
// Параметры:
//  Форма			- УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  ТекущийОбъект	- ДокументОбъект - документ, запись которого выполняется.
Процедура ПередЗаписьюНаСервереДокумент(Форма, ТекущийОбъект) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ИнициализацияВыполненаПолностью Тогда
		
		// Для документов с табличными частями.
		Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
			
			ДанныеКонтрагентов = ДанныеКонтрагентовВДокументе(Форма);
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеКонтрагентов", ДанныеКонтрагентов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Запуск проверки контрагента, установка условного оформления.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  Параметры		 - Структура - Если изменения произошли в табличной части. 
//		В записи с ключем ИмяТаблицы указывается ИмяТаблицы, в записи с ключем Идентификатор указывается Идентификатор
//		строки,  в которой произошло изменение контрагента или даты.
//					- Строка - Имя элемента управления формы, в случае если произошло изменение в контрагенте, находящегося в шапке.
//					- Дата - Дата документа, в случае если произошло изменение даты
//					- Неопределено - если требуется проверка всех контрагентов в документе.
Процедура ПриСозданииНаСервереДокумент(Форма, Параметры) Экспорт
	
	ИнициализироватьРеквизитыФормыДокумент(Форма);
	
	// В режиме проверки по кнопке инициализацию при открытии не выполняем.
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда 
		
		УправлениеФормойДокументаПриИнициализации(Форма);
		
		// Определение объекта и ссылки.
		Если НЕ ЭтоМедленныйРежимРаботы() Тогда
			ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
			ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;

			Форма.РеквизитыПроверкиКонтрагентов.ЭтотДокументБылСОшибкой = ЭтоДокументСОшибкамиПроверкиКонтрагентов(ДокументСсылка);
			
			ПоказатьПредварительныйРезультатИзКэшаПриОткрытииДокумента(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Восстановление результатов проверки контрагентов в табличной части после записи.
//
// Параметры:
//  Форма			- УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  ТекущийОбъект	- ДокументОбъект - документ, запись которого выполняется.
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ИнициализацияВыполненаПолностью Тогда
		
		Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
			ВосстановитьРезультатПроверкиКонтрагентовВТабличныхЧастяхПослеЗаписи(Форма, ТекущийОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохранение результатов проверки контрагентов в регистр при записи.
//
// Параметры:
//  Форма			- УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
//  ТекущийОбъект	- ДокументОбъект - документ, запись которого выполняется.
Процедура ПриЗаписиНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ИнициализацияВыполненаПолностью Тогда
		
		СохранитьРезультатПроверкиКонтрагентов(Форма, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательный API. Инициализировать реквизиты проверки контрагента в форме документа
//	при создании на сервере документа.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма документа, в котором выполняется проверка контрагентов.
Процедура ИнициализироватьРеквизитыФормыДокумент(Форма) Экспорт
	
	ИнициализироватьРеквизитыПроверкиКонтрагентовВДокументе(Форма, Ложь);
	Форма.РеквизитыПроверкиКонтрагентов.ЭтоПроверкаКонтрагентовПриОткрытии = Истина;
	
КонецПроцедуры

// Формирует описание документа, согласно которому осуществляется проверка контрагентов и вывод
//  информации о результатах проверки в форму документа.
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - Форма документа, в котором выполняется проверка контрагентов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица описания документа.
//
Функция ОписаниеДокументов(Форма) Экспорт
	
	Если НЕ Форма.РеквизитыПроверкиКонтрагентов.ИнициализацияВыполненаПолностью Тогда
		// Принудительная инициализация.
		ИнициализироватьРеквизитыПроверкиКонтрагентовВДокументе(Форма, Истина);
		УправлениеФормойДокументаПриИнициализации(Форма);
	КонецЕсли;
	
	ОбщееОписание = ШаблонТаблицыОписания();
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВШапке Тогда
		
		Описание = ШаблонТаблицыОписания();
		РаботаСКонтрагентамиПереопределяемый.СформироватьОписаниеДокументовСКонтрагентомВШапке(Форма, Описание);
		
		// Дополняем описание состоянием.
		Для Каждого СтрокаОписания Из Описание Цикл
			СтрокаОписания.СостояниеКонтрагента = Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента;
		КонецЦикла;
		
		ПрисоединитьОписание(ОбщееОписание, Описание);
		
	КонецЕсли;
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСоСчетомФактуройВПодвале Тогда
		
		Описание = ШаблонТаблицыОписания();
		РаботаСКонтрагентамиПереопределяемый.СформироватьОписаниеДокументовСоСчетомФактуройВПодвале(Форма, Описание);
		
		// Дополняем описание состоянием.
		Для Каждого СтрокаОписания Из Описание Цикл
			СтрокаОписания.СостояниеКонтрагента = Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентовВСчетеФактуре;
		КонецЦикла;
		
		ПрисоединитьОписание(ОбщееОписание, Описание);
		
	КонецЕсли;
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактура Тогда
		
		Описание = ШаблонТаблицыОписания();
		РаботаСКонтрагентамиПереопределяемый.СформироватьОписаниеСчетовФактур(Форма, Описание);

		// Дополняем описание состоянием.
		Если Форма.РеквизитыПроверкиКонтрагентов <> Неопределено Тогда
			Для Каждого СтрокаОписания Из Описание Цикл
				
				ИмяРеквизитаСчетаФактуры 	= ИмяРеквизита(Форма, СтрокаОписания.Элемент.Имя);
				Свойство 					= ИмяРеквизитаСостоянияКонтрагентаВСчетеФактуре(ИмяРеквизитаСчетаФактуры);
				
				СтрокаОписания.СостояниеКонтрагента = Форма.РеквизитыПроверкиКонтрагентов[Свойство];
				
			КонецЦикла;
		КонецЕсли;
		
		ПрисоединитьОписание(ОбщееОписание, Описание);
		
	КонецЕсли;
		
	Возврат ОбщееОписание;
	
КонецФункции

// Заполнение данных контрагента в документе.
//
// Параметры:
//  Ссылка				 - ДокументСсылка - Документ, в котором выполняется проверка контрагентов.
//  ДанныеКонтрагентов	 - ТаблицаЗначений - Содержит данные проверяемых контрагентов. 
//		Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагента.
//  Контрагент			 - ОпределяемыйТип.Контрагент - Контрагент, данными которого дополняются данные таблицы
//                                                   ДанныеКонтрагентов.
//  Дата				 - Дата - Дата, на которую выполняется проверка контрагента.
//  Состояние			 - Перечисления.СостоянияСуществованияКонтрагента - Результат проверки контрагента.
Процедура ДополнитьДанныеКонтрагентовВДокументе(
			Ссылка,
			ДанныеКонтрагентов, 
			Контрагент, 
			Дата,
			Состояние = Неопределено) Экспорт
		
	// Добавляем новую строку в таблицу, только если такой строки еще нет.
	Отбор = Новый Структура("Ссылка, Контрагент, Дата", Ссылка, Контрагент, Дата);
	НайденныеСтроки = ДанныеКонтрагентов.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ДобавитьСтрокуВДанныеКонтрагентовВДокументе(Ссылка, ДанныеКонтрагентов, Контрагент, Дата, Состояние);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет итоговое состояние контрагентов в документе.
//
// Параметры:
//  ДанныеКонтрагентов	 - ТаблицаЗначений	 - Содержит данные проверяемых контрагентов.
//  	Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагента.
//  Отбор				 - Структура		 - отбор, накладываемый на таблицу данные контрагента.
// 
// Возвращаемое значение:
//  Структура - описание состояния контрагентов - заполнен ли контрагент, его состояние, количество контрагентов.
//
Функция ИтоговоеСостояниеКонтрагентаВДокументе(ДанныеКонтрагентов, Отбор = Неопределено) Экспорт
	
	// Инициализируем
	СостояниеКонтрагента 		= ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка");
	
	ЕстьНепустойКонтрагент		= Ложь;
	КонтрагентовНесколько 		= Ложь;
	
	Если Отбор = Неопределено Тогда
		ДанныеПоКонтрагентам = ДанныеКонтрагентов.Скопировать();
	Иначе
		ДанныеПоКонтрагентам = ДанныеКонтрагентов.Скопировать(Отбор);
	КонецЕсли;
	
	СвернутьДанныеКонтрагентов(ДанныеПоКонтрагентам, "Ссылка");
		
	Если ДанныеПоКонтрагентам.Количество() = 1 Тогда
		
		ДанныеПоКонтрагенту 	= ДанныеПоКонтрагентам[0];
		ЕстьНепустойКонтрагент 	= ЗначениеЗаполнено(ДанныеПоКонтрагенту.Контрагент); 
		СостояниеКонтрагента 	= ДанныеПоКонтрагенту.Состояние;
		КонтрагентовНесколько 	= Ложь;
		
	Иначе
		
		// Прорисовываем результат проверки в счет-фактуре.
		ЕстьНедействующиеКонтрагенты 		= Ложь;
		ЕстьДействующиеКонтрагенты 			= Ложь;
		ЕстьКонтрагентыСОшибками 			= Ложь;
		ЕстьКонтрагентыНеПодлежащиеПроверке = Ложь;
		ЕстьКонтрагентыСПустымИННКПП 		= Ложь;
		
		Для каждого ДанныеПоКонтрагенту Из ДанныеПоКонтрагентам Цикл
			
			// Заполненность контрагента
			Если ЗначениеЗаполнено(ДанныеПоКонтрагенту.Контрагент) Тогда
				ЕстьНепустойКонтрагент = Истина;
			КонецЕсли;
			
			// Состояние существования
			Если ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеНедействующегоКонтрагента(ДанныеПоКонтрагенту.Состояние) Тогда
				ЕстьНедействующиеКонтрагенты = Истина;
			ИначеЕсли ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеКонтрагентаСОшибкой(ДанныеПоКонтрагенту.Состояние) Тогда
				ЕстьКонтрагентыСОшибками = Истина;
			ИначеЕсли ДанныеПоКонтрагенту.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке") Тогда
				ЕстьКонтрагентыНеПодлежащиеПроверке = Истина;
			ИначеЕсли ДанныеПоКонтрагенту.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустойИННИлиКПП") Тогда
				ЕстьКонтрагентыСПустымИННКПП = Истина;
			ИначеЕсли ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеДействующегоКонтрагента(ДанныеПоКонтрагенту.Состояние)
				И ДанныеПоКонтрагенту.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка") Тогда
				ЕстьДействующиеКонтрагенты = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьНепустойКонтрагент Тогда
			КонтрагентовНесколько = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьНедействующиеКонтрагенты И НЕ ЕстьДействующиеКонтрагенты И НЕ ЕстьКонтрагентыСОшибками Тогда
			// Контрагент не проверен
		    СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка");
		ИначеЕсли ЕстьНедействующиеКонтрагенты Тогда
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентОтсутствуетВБазеФНС");
		ИначеЕсли ЕстьКонтрагентыСОшибками Тогда
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных");
		ИначеЕсли ЕстьКонтрагентыНеПодлежащиеПроверке Тогда
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке");
		ИначеЕсли ЕстьКонтрагентыСПустымИННКПП Тогда
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустойИННИлиКПП");
		Иначе
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС");
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("КонтрагентЗаполнен", 	ЕстьНепустойКонтрагент);
	Результат.Вставить("СостояниеКонтрагента", 	СостояниеКонтрагента);
	Результат.Вставить("КонтрагентовНесколько", КонтрагентовНесколько);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаКонтрагентовВОтчетах

// Инициализация данных для проверки.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
Процедура ПередФормированиемОтчета(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		
		Форма.РеквизитыПроверкиКонтрагентов.ЕстьДоступКВебСервисуФНС 	= ЕстьДоступКВебСервисуФНС();
		Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки 			= Истина;
		Форма.ПроверкаКонтрагентовПереключательРежимаОтображения 		= "Все";
		
		Если Форма.РеквизитыПроверкиКонтрагентов.ОтчетСРазделами Тогда
			
			Форма.РеквизитыПроверкиКонтрагентов.НедействующиеКонтрагентыКоличество 		= 0;
			Форма.РеквизитыПроверкиКонтрагентов.КонтрагентыСПустымСостояниемКоличество 	= 0;
			
			Если ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища) Тогда
				УдалитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища);
			КонецЕсли;
			
			Если ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхОтчета) Тогда
				УдалитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхОтчета);
			КонецЕсли;
			
			Если ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресРезультатаЗаполненияОтчета) Тогда
				УдалитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресРезультатаЗаполненияОтчета);
			КонецЕсли;
			
			Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища 					= "";
			Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхОтчета 				= "";
			Форма.РеквизитыПроверкиКонтрагентов.АдресРезультатаЗаполненияОтчета	= "";
			
		Иначе
			
			Форма.ПроверкаКонтрагентовНедействующиеКонтрагенты.Очистить();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавление контрагента на проверку.
//
// Параметры:
//  СтруктураПараметров				 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  НомерСтрокиТабличногоДокумента	 - Число - Номер строки табличного документа, содержащей контрагент.
//  Контрагент						 - СправочникСсылка - Проверяемый контрагент в строке отчета.
//  ИНН								 - Строка - ИНН контрагента.
//  КПП								 - Строка - ИНН контрагента.
//  Дата							 - Дата - Дата, на которую необходимо выполнять проверку контрагента.
//	НомерРаздела					 - Число - Номер раздела отчета, в котором выводится контрагент.
Процедура ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, НомерСтрокиТабличногоДокумента, Контрагент, ИНН, КПП, Дата, НомерРаздела = 0) Экспорт
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	
	// Если проверка не включена, то не добавляем контрагентов на проверку.
	Если НЕ ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
	
	// Проверяем условия, при которых добавлять контрагентов на проверку не нужно.
	Если НедействующиеКонтрагенты = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) 
		ИЛИ ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполненности даты события.
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = НедействующиеКонтрагенты.Добавить();
	НоваяСтрока.СтрокаТабличногоДокумента 	= НомерСтрокиТабличногоДокумента;
	НоваяСтрока.Контрагент 					= Контрагент;
	НоваяСтрока.Дата 						= НачалоДня(Дата);
	НоваяСтрока.ИНН 						= ИНН;
	НоваяСтрока.КПП 						= КПП;
	
	// Дополнительная колонка, которая используется
	// для проверки в отчете, выводимом блоками.
	Если НедействующиеКонтрагенты.Колонки.Найти("НомерРаздела") <> Неопределено Тогда
		НоваяСтрока.НомерРаздела = НомерРаздела;
	КонецЕсли;
	
КонецПроцедуры

// Определяет, нужно ли выводить данную строку в отчете по некорректным контрагентам.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  Контрагент						 - СправочникСсылка - Проверяемый контрагент в строке отчета.
//  ИНН								 - Строка - ИНН контрагента.
//  КПП								 - Строка - ИНН контрагента.
//  Дата							 - Дата - Дата, на которую необходимо выполнять проверку контрагента.
// Возвращаемое значение:
//  Булево - Истина, если данную строку необходимо выводить в отчете по некорректным контрагентам.
Функция ВыводитьСтрокуОтчета(СтруктураПараметров, Контрагент, ИНН, КПП, Дата) Экспорт
	
	Если НЕ ЭтоОтчетПоНекорректнымКонтрагентам(СтруктураПараметров) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыводитьСтроку			= Истина;
	СтандартнаяОбработка 	= Истина;
	РаботаСКонтрагентамиПереопределяемый.ОпределитьНужноЛиВыводитьСтрокуОтчета(
		СтруктураПараметров, Контрагент, ИНН, КПП, Дата, ВыводитьСтроку, СтандартнаяОбработка);
	
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат ВыводитьСтроку;
	КонецЕсли;
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Контрагент", Контрагент);
	СтруктураОтбора.Вставить("ИНН", ИНН);
	СтруктураОтбора.Вставить("КПП", КПП);
	СтруктураОтбора.Вставить("Дата", НачалоДня(Дата));
	
	ВыводитьСтроку = НедействующиеКонтрагенты.НайтиСтроки(СтруктураОтбора).Количество() > 0;
	
	Возврат ВыводитьСтроку;
	
КонецФункции

// Запоминает данные отчета полученные при первоначальном формировании отчета
// 		и используемые в дальнейшем для проверки контрагентов в отчете.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  ДанныеОтчета		 - РезультатЗапроса - Данные отчета полученные при первоначальном формировании отчета
// 		и используемые в дальнейшем для проверки контрагентов.
Процедура ЗапомнитьДанныеОтчета(СтруктураПараметров, ДанныеОтчета) Экспорт
	
	Если СтруктураПараметров.Свойство("ДанныеДляПроверкиКонтрагентов") 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовИспользуется
		И НЕ СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("ПроверкаКонтрагентовАдресДанныхОтчета") Тогда
		
		СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовАдресДанныхОтчета = 
			ПоместитьВоВременноеХранилище(ДанныеОтчета, СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовАдресДанныхОтчета);
	КонецЕсли; 
	
КонецПроцедуры

// Сохранение таблицы с контрагентами, участвующими в отчете.
//
// Параметры:
//  Форма				 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  РезультатВыполнения	 - Структура - Результат формирования отчета, содержащий свойство ДанныеДляПроверкиКонтрагентов.
//  АдресХранилища	 	 - Строка - Адрес временного хранилища с результатом заполнения отчета.
//									Во временном хранилище хранится структура с обязательным ключом 
//									"ДанныеДляПроверкиКонтрагентов".
Процедура ЗапомнитьРезультатФормированияОтчета(Форма, РезультатВыполнения, АдресХранилища = Неопределено) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ОтчетСРазделами Тогда
		
		// Адрес хранилища с результатами заполнения отчета запоминаем всегда, 
		// чтобы из него получать данные разделов отчета для вывода.
		Форма.РеквизитыПроверкиКонтрагентов.АдресРезультатаЗаполненияОтчета = АдресХранилища;
		
	КонецЕсли;

	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется И РезультатВыполнения.Свойство("ДанныеДляПроверкиКонтрагентов") Тогда
		
		ДанныеДляПроверкиКонтрагентов = РезультатВыполнения.ДанныеДляПроверкиКонтрагентов;
		
		Если ДанныеДляПроверкиКонтрагентов.Свойство("ПроверкаКонтрагентовАдресДанныхОтчета") Тогда
			Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхОтчета = ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовАдресДанныхОтчета;
		КонецЕсли;
		
		// Сразу после формирования отчета все контрагенты в нем непроверенные, запоминаем их количество.
		Форма.РеквизитыПроверкиКонтрагентов.НедействующиеКонтрагентыКоличество 		= ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты.Количество();
		Форма.РеквизитыПроверкиКонтрагентов.КонтрагентыСПустымСостояниемКоличество 	= Форма.РеквизитыПроверкиКонтрагентов.НедействующиеКонтрагентыКоличество;
			
		Если НЕ Форма.РеквизитыПроверкиКонтрагентов.ОтчетСРазделами Тогда
			Форма.ЗначениеВРеквизитФормы(ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты, "ПроверкаКонтрагентовНедействующиеКонтрагенты");
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Добавление в параметры формирования отчета обязательных данных, необходимых для проверки контрагентов в отчете.
//
// Параметры:
//	ПараметрыОтчета - Структура - Структура параметров отчета, 
//								  в которую будут добавлены данные для проверки контрагентов.
//
Процедура ДобавитьОбщиеПараметрыДляПроверкиКонтрагентовВОтчете(ПараметрыОтчета) Экспорт

	ДанныеДляПроверкиКонтрагентов = Новый Структура;
	ДанныеДляПроверкиКонтрагентов.Вставить("ПроверкаКонтрагентовИспользуется", 	Ложь);
	ДанныеДляПроверкиКонтрагентов.Вставить("ОтчетСРазделами", 					Ложь);
	ДанныеДляПроверкиКонтрагентов.Вставить("РазделыОтчета",						НоваяТаблицаРазделыОтчета());

	ПараметрыОтчета.Вставить("ДанныеДляПроверкиКонтрагентов", ДанныеДляПроверкиКонтрагентов);

КонецПроцедуры

// Добавление в параметры формирования отчета данных, необходимых для проверки контрагентов в отчете.
//
// Параметры:
//  Форма						 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ПараметрыОтчета				 - Структура - Параметры формирования отчета.
//  ЭтоПервоеФормированиеОтчета	 - Булево - Истина, если это формирование отчета перед проверкой контрагентов.
//		Ложь, если это формирование отчета при проверке контрагентов.
//  ПолныйОтчет					 - ТабличныйДокумент - Табличный документ, содержащий в себе сформированный отчет 
// 		в исходном виде (до проверки контрагентов). Если ЭтоПервоеФормированиеОтчета = Истина, то ПолныйОтчет можно не
// 		передавать.
Процедура ДобавитьПараметрыДляПроверкиКонтрагентов(Форма, ПараметрыОтчета, ЭтоПервоеФормированиеОтчета, ПолныйОтчет = Неопределено) Экспорт
	
	ДобавитьОбщиеПараметрыДляПроверкиКонтрагентовВОтчете(ПараметрыОтчета);

	ДанныеДляПроверкиКонтрагентов 									= ПараметрыОтчета.ДанныеДляПроверкиКонтрагентов;
	ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовИспользуется 	= Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется;
	ДанныеДляПроверкиКонтрагентов.ОтчетСРазделами 					= Форма.РеквизитыПроверкиКонтрагентов.ОтчетСРазделами;
	ДанныеДляПроверкиКонтрагентов.Вставить("ВыводитьТолькоНекорректныхКонтрагентов",	НЕ ЭтоПервоеФормированиеОтчета);
	
	НедействующиеКонтрагенты = ШаблонТаблицыДанныеКонтрагентаДляОтчета();
	
	Если ЭтоПервоеФормированиеОтчета Тогда
		
		ДанныеДляПроверкиКонтрагентов.Вставить("ПроверкаКонтрагентовАдресДанныхОтчета", ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор));
		
	Иначе
		
		ДанныеДляПроверкиКонтрагентов.Вставить("ДанныеОтчета", 	ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхОтчета));
		ДанныеДляПроверкиКонтрагентов.Вставить("ПолныйОтчет",	ПолныйОтчет);

		Если Форма.РеквизитыПроверкиКонтрагентов.ОтчетСРазделами Тогда
			
			РезультатЗаполненияОтчета = ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресРезультатаЗаполненияОтчета);
			
			Если ТипЗнч(РезультатЗаполненияОтчета) = Тип("Структура")
				И РезультатЗаполненияОтчета.Свойство("ДанныеДляПроверкиКонтрагентов") Тогда
				
				Если РезультатЗаполненияОтчета.ДанныеДляПроверкиКонтрагентов.Свойство("НедействующиеКонтрагенты") Тогда
					НедействующиеКонтрагенты = РезультатЗаполненияОтчета.ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
				КонецЕсли;
				
				Если РезультатЗаполненияОтчета.ДанныеДляПроверкиКонтрагентов.Свойство("РазделыОтчета") Тогда
					ДанныеДляПроверкиКонтрагентов.Вставить("ПолныеРазделыОтчета", РезультатЗаполненияОтчета.ДанныеДляПроверкиКонтрагентов.РазделыОтчета);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ОтчетСРазделами Тогда
		ДанныеДляПроверкиКонтрагентов.Вставить("НедействующиеКонтрагенты", НедействующиеКонтрагенты);
	Иначе
		ДанныеДляПроверкиКонтрагентов.Вставить("НедействующиеКонтрагенты",
			Форма.РеквизитФормыВЗначение("ПроверкаКонтрагентовНедействующиеКонтрагенты", Тип("ТаблицаЗначений")));
	КонецЕсли;
		
	ПараметрыОтчета.Вставить("ДанныеДляПроверкиКонтрагентов", ДанныеДляПроверкиКонтрагентов);
	
КонецПроцедуры

// Определяем, формируется ли отчет стандартным способом.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  ДанныеОтчета		 - РезультатЗапроса - Данные отчета полученные при первоначальном формировании отчета
// 		и используемые в дальнейшем для проверки контрагентов.
// Возвращаемое значение:
//  Булево - Истина, если это формирование отчета до проверки контрагентов.
Функция ФормироватьОтчетСтандартнымСпособом(СтруктураПараметров, ДанныеОтчета) Экспорт
	
	ФормироватьОтчетСтандартнымСпособом = Истина;
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	Если ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовИспользуется И ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов Тогда
		ДанныеОтчета = ДанныеДляПроверкиКонтрагентов.ДанныеОтчета;
		ФормироватьОтчетСтандартнымСпособом = Ложь;
	КонецЕсли;
	
	Возврат ФормироватьОтчетСтандартнымСпособом;
	
КонецФункции

// Дополнение результата формирования отчета результатами проверки контрагентов.
//
// Параметры:
//  РезультатФормирования	 - Структура - Результат формирования отчета.
//  СтруктураПараметров		 - Структура - Результат проверки контрагентов.
//
Процедура ДополнитьРезультатФормированияОтчетаДаннымиПоПроверкеКонтрагентов(РезультатФормирования, СтруктураПараметров) Экспорт
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	РезультатФормирования.Вставить("ДанныеДляПроверкиКонтрагентов", ДанныеДляПроверкиКонтрагентов);
	
КонецПроцедуры

// Метод фонового задания по проверке контрагентов в отчете.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  АдресХранилища		 - Строка - Адрес временного хранилища, в который помещается результат
//		выполнения фонового задания по проверке контрагентов.
//
Процедура ОпределитьНедействующихКонтрагентовВОтчетеФоновоеЗадание(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляПроверкиКонтрагентов 	= СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	ПолныйОтчет 					= ДанныеДляПроверкиКонтрагентов.ПолныйОтчет;
 	Результат 						= Новый Структура;
	
	// Проверяем контрагентов на корректность.
	ПроверяемыеКонтрагенты  = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
	РезультатПроверки 		= ОпределитьНедействующихКонтрагентовВОтчете(ПроверяемыеКонтрагенты);
	
	Если РезультатПроверки.ЕстьДоступКВебСервисуФНС Тогда
		
		Если ПроверяемыеКонтрагенты.Количество() > 0 Тогда
			
			ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты = ПроверяемыеКонтрагенты;

			Если ДанныеДляПроверкиКонтрагентов.ОтчетСРазделами Тогда
				
				// Выделяем в разделах отчета строки с некорректными контрагентами.
				ВыделитьКонтрагентовСОшибкамиВРазделеОтчета(ПроверяемыеКонтрагенты, СтруктураПараметров);
				
				// Формируем отчет, в котором оставляем только некорректных контрагентов.
				ОставитьНедействующихКонтрагентовВОтчете(СтруктураПараметров);

				Результат.Вставить("РазделыОтчетаПоНекорректнымКонтрагентам", 	ДанныеДляПроверкиКонтрагентов.РазделыОтчета);
				Результат.Вставить("РазделыОтчета", 							ДанныеДляПроверкиКонтрагентов.ПолныеРазделыОтчета);
			
			Иначе
				
				// Простой отчет без разделов. Выделяем в нем строки с некорректными контрагентами.
				ВыделитьКонтрагентовСОшибкамиВОтчете(ПроверяемыеКонтрагенты, ПолныйОтчет);

				// Формируем отчет, в котором оставляем только некорректных контрагентов.
				ОтчетПоНекорректнымКонтрагентам = ОставитьНедействующихКонтрагентовВОтчете(СтруктураПараметров);
				
				// Отчет, содержащий только некорректных контрагентов.
				Результат.Вставить("ОтчетПоНекорректнымКонтрагентам", 	ОтчетПоНекорректнымКонтрагентам); 
				// Отчет, содержащий всех контрагентов; некорректные подсвечены красным.
				Результат.Вставить("РезультатФормированияОтчета", 		ПолныйОтчет);
				
			КонецЕсли;

		Иначе
			
			Если ДанныеДляПроверкиКонтрагентов.ОтчетСРазделами Тогда
				Результат.Вставить("РазделыОтчетаПоНекорректнымКонтрагентам", 	НоваяТаблицаРазделыОтчета());
				Результат.Вставить("РазделыОтчета", 							ДанныеДляПроверкиКонтрагентов.ПолныеРазделыОтчета); // Исходные разделы отчета без изменений.
			Иначе
				Результат.Вставить("ОтчетПоНекорректнымКонтрагентам", 	Новый ТабличныйДокумент);
				Результат.Вставить("РезультатФормированияОтчета", 		ПолныйОтчет); // Исходный отчет без изменений.
			КонецЕсли;
			
		КонецЕсли;

		Результат.Вставить("НедействующиеКонтрагенты", ПроверяемыеКонтрагенты);

		// Сохраним общее число некорректных и непроведенных контрагентов 
		// для отображения соответствующего сообщения на форме отчета.
		Результат.Вставить("НедействующиеКонтрагентыКоличество", ПроверяемыеКонтрагенты.Количество());

		ПустоеСостояние 				= ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка");
		КонтрагентыСПустымСостоянием 	= ПроверяемыеКонтрагенты.НайтиСтроки(Новый Структура("Состояние", ПустоеСостояние));

		Результат.Вставить("КонтрагентыСПустымСостояниемКоличество", КонтрагентыСПустымСостоянием.Количество());
		
	Иначе
		Результат.Вставить("НетДоступаКВебСервисуФНС", Истина);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Запуск фонового задания по проверке контрагентов в отчете.
//
// Параметры:
//  Форма				 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
Процедура ПроверитьКонтрагентовВОтчете(Форма, СтруктураПараметров) Экспорт
	
	Если НЕ Форма.РеквизитыПроверкиКонтрагентов.ОтчетСРазделами Тогда
		
		Если Форма.РеквизитыПроверкиКонтрагентов.ОтчетПоНекорректнымКонтрагентам <> Неопределено Тогда
			Форма.РеквизитыПроверкиКонтрагентов.ОтчетПоНекорректнымКонтрагентам.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Форма.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка контрагентов в отчете'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"ПроверкаКонтрагентов.ОпределитьНедействующихКонтрагентовВОтчетеФоновоеЗадание",
		СтруктураПараметров,
		ПараметрыВыполнения);
		
	Форма.РеквизитыПроверкиКонтрагентов.ДлительнаяОперация = ДлительнаяОперация;

КонецПроцедуры

// Отображение результата проверки контрагента в отчете.
//
// Параметры:
//  Форма				 		 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы - поле, в которое необходимо выводить отчет.
//  РезультатФормированияОтчета	 - ТабличныйДокумент - Документ, предназначенный для вывода в поле формы.
//	ТекущийНомерРаздела			 - Число - Номер раздела для вывода (для отчетов с разделами).
Процедура ОтобразитьРезультатПроверкиКонтрагентаВОтчете(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета, ТекущийНомерРаздела = Неопределено) Экспорт

	РеквизитыПроверкиКонтрагентов = Форма.РеквизитыПроверкиКонтрагентов;

	РезультатПроверки = ПолучитьИзВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресХранилища);
	
	Если РезультатПроверки.Свойство("НетДоступаКВебСервисуФНС") Тогда
		// Не удалось проверить контрагентов.
		РеквизитыПроверкиКонтрагентов.ЕстьДоступКВебСервисуФНС = Ложь;
	Иначе
		// Удаляем старые временные хранилища, которые больше не нужны.
		Если ЭтоАдресВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресРезультатаЗаполненияОтчета) Тогда
			УдалитьИзВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресРезультатаЗаполненияОтчета);
		КонецЕсли;
		Если ЭтоАдресВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресДанныхОтчета) Тогда
			УдалитьИзВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресДанныхОтчета);
		КонецЕсли;

		// Запоминаем новый адрес хранилища с отчетом.
		РеквизитыПроверкиКонтрагентов.АдресРезультатаЗаполненияОтчета = РеквизитыПроверкиКонтрагентов.АдресХранилища;
		
		// Количество некорректных контрагентов.
		РеквизитыПроверкиКонтрагентов.НедействующиеКонтрагентыКоличество = РезультатПроверки.НедействующиеКонтрагентыКоличество;
		// Количество непроверенных контрагентов.
		РеквизитыПроверкиКонтрагентов.КонтрагентыСПустымСостояниемКоличество = РезультатПроверки.КонтрагентыСПустымСостояниемКоличество;
	
		// Отчет (раздел отчета), содержащий всех контрагентов, некорректные подсвечены красным.
		Если РеквизитыПроверкиКонтрагентов.ОтчетСРазделами Тогда
			
			Если ТекущийНомерРаздела = Неопределено
				И РезультатПроверки.Свойство("ПолныеРазделыОтчета")
				И РезультатПроверки.ПолныеРазделыОтчета.Количество() > 0 Тогда
				
				ТекущийНомерРаздела = РезультатПроверки.ПолныеРазделыОтчета[0].НомерРаздела;
				
			КонецЕсли;
			
		Иначе
			
			// Отчет, содержащий только некорректных контрагентов.
			РеквизитыПроверкиКонтрагентов.ОтчетПоНекорректнымКонтрагентам = 
				РезультатПроверки.ОтчетПоНекорректнымКонтрагентам;
			// Отчет, содержащий всех контрагентов, некорректные подсвечены красным.
			РезультатФормированияОтчета = 
				РезультатПроверки.РезультатФормированияОтчета;
				
		КонецЕсли;
			
	КонецЕсли;
	
	РеквизитыПроверкиКонтрагентов.ПроверкаВыполнялась = Истина;
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.ОтобразитьРезультатПроверкиКонтрагентаВОтчете(Форма, СтандартнаяОбработка);
	
	// Если действия по отображению результата проверки переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКонтрагентовКлиентСервер.ВывестиНужнуюПанельПроверкиКонтрагентовВОтчете(Форма);
	
	Если РеквизитыПроверкиКонтрагентов.ОтчетСРазделами Тогда
		ВывестиРазделОтчета(Форма, ПолеТабличногоДокумента, ТекущийНомерРаздела);
	Иначе
		ВывестиОтчет(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета);
	КонецЕсли;
	
КонецПроцедуры

// Вывод результата проверки контрагента в поле табличного документа.
//
// Параметры:
//  Форма				 		 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы - поле, в которое необходимо выводить отчет.
//  РезультатФормированияОтчета	 - ТабличныйДокумент - Документ, предназначенный для вывода в поле формы.
Процедура ВывестиОтчет(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	РаботаСКонтрагентамиПереопределяемый.ВывестиОтчет(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета, СтандартнаяОбработка);
		
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.Очистить();
		
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется
		// Пользователь выбрал режим просмотра - "Только контрагенты с ошибками".
		И НЕ Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки Тогда
		
		// Выводим только контрагентов с ошибками.
		ПолеТабличногоДокумента.Вывести(Форма.РеквизитыПроверкиКонтрагентов.ОтчетПоНекорректнымКонтрагентам);
	Иначе
		ПолеТабличногоДокумента.Вывести(РезультатФормированияОтчета); 
	КонецЕсли;
	
КонецПроцедуры

// Вывод раздела отчета после проверки контрагента в поле табличного документа.
//
// Параметры:
//  Форма				 		 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы - поле, в которое необходимо выводить отчет.
//  НомерРаздела	 			 - Число - Номер раздела для вывода.
//
Процедура ВывестиРазделОтчета(Форма, ПолеТабличногоДокумента, НомерРаздела) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	РаботаСКонтрагентамиПереопределяемый.ВывестиРазделОтчета(Форма, ПолеТабличногоДокумента, НомерРаздела, СтандартнаяОбработка);
		
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.Очистить();
		
	РазделыОтчета = РазделыОтчетаВФорме(Форма);
	
	СтрокаРаздела = РазделыОтчета.Найти(НомерРаздела, "НомерРаздела");
	Если СтрокаРаздела = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РезультатФормированияОтчета = СтрокаРаздела.ХранилищеОтчета.Получить();
	ПолеТабличногоДокумента.Вывести(РезультатФормированияОтчета);
	
КонецПроцедуры

// Отображение результата проверки контрагента в отчете.
//
// Параметры:
//  Форма				 		 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы - поле, в которое необходимо выводить отчет.
//  РезультатФормированияОтчета	 - ТабличныйДокумент - Документ, предназначенный для вывода в поле формы.
Процедура ПереключитьРежимОтображенияОтчета(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета) Экспорт
	
	Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки = НЕ Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки;
	
	ПроверкаКонтрагентовКлиентСервер.УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма, "НайденыНекорректныеКонтрагенты");
	
	ВывестиОтчет(Форма, ПолеТабличногоДокумента, РезультатФормированияОтчета);
	
КонецПроцедуры

// Отображение результата проверки контрагента в отчете.
//
// Параметры:
//  Форма				 		 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ПолеТабличногоДокумента		 - ПолеФормы - поле, в которое необходимо выводить отчет.
//  НомерРаздела	 			 - Число - Номер раздела, который необходимо отобразить.
Процедура ПереключитьРежимОтображенияРазделаОтчета(Форма, ПолеТабличногоДокумента, НомерРаздела) Экспорт
	
	Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки = НЕ Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки;
	
	ПроверкаКонтрагентовКлиентСервер.УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма, "НайденыНекорректныеКонтрагенты");
	
	ВывестиРазделОтчета(Форма, ПолеТабличногоДокумента, НомерРаздела);
	
КонецПроцедуры

// Устанавливается вид панели с результатом проверки.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ОтчетСРазделами	 - Булево 	- Признак того, что отчет имеет разделы.
Процедура ПриСозданииНаСервереОтчет(Форма, ОтчетСРазделами = Ложь) Экспорт
	
	ИнициализироватьРеквизитыФормыОтчета(Форма, ОтчетСРазделами);
	
	УстановитьНадписиВПанелиОтчетаПриСозданииНаСервере(Форма);
	ПроверкаКонтрагентовКлиентСервер.УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма);
	
КонецПроцедуры

// Вспомогательный API. Инициализировать реквизиты проверки контрагента в форме отчета.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма отчета, в котором выполняется проверка контрагентов.
//  ОтчетСРазделами	 - Булево 	- Признак того, что отчет имеет разделы.
Процедура ИнициализироватьРеквизитыФормыОтчета(Форма, ОтчетСРазделами = Ложь) Экспорт
	
	НовыеРеквизиты = Новый Структура;
	
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("АдресХранилища");
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("ДлительнаяОперация", 		Неопределено);
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("ЗаданиеВыполнено", 		Истина);
	// Служебный реквизит для отображения отчета.
	НовыеРеквизиты.Вставить("ВыведеныВсеСтроки", 		Истина);
	// Служебный реквизит для отображения отчета.
	НовыеРеквизиты.Вставить("ПроверкаВыполнялась", 		Ложь);
	// Служебный реквизит для отображения отчета.
	НовыеРеквизиты.Вставить("АдресДанныхОтчета");
	// Наличие доступа к сервису проверки.
	НовыеРеквизиты.Вставить("ЕстьДоступКВебСервисуФНС", Истина);
	// Включена ли проверка и есть ли доступ на использование проверки.
	НовыеРеквизиты.Вставить("ПроверкаИспользуется", 	ПроверкаКонтрагентовВызовСервераПовтИсп.ИспользованиеПроверкиВозможно());
	// Табличный документ, отчет, содержащий только некорректных контрагентов.
	НовыеРеквизиты.Вставить("ОтчетПоНекорректнымКонтрагентам", 			Новый ТабличныйДокумент);
	// Признак того, что отчет содержит разделы.
	НовыеРеквизиты.Вставить("ОтчетСРазделами", 							ОтчетСРазделами);
	// Адрес временного хранилища, где содержаться разделы отчета.
	НовыеРеквизиты.Вставить("АдресРезультатаЗаполненияОтчета", 			"");
	// Количество недействующих контрагентов.
	НовыеРеквизиты.Вставить("НедействующиеКонтрагентыКоличество", 		0);
	// Количество контрагентов с пустым состоянием.
	НовыеРеквизиты.Вставить("КонтрагентыСПустымСостояниемКоличество", 	0);
	// Служебный реквизит
	НовыеРеквизиты.Вставить("НужноПоказатьПредложениеВключитьПроверкуКонтрагентов", НужноПоказатьПредложениеВключитьПроверкуКонтрагентов());

	Форма.РеквизитыПроверкиКонтрагентов = НовыеРеквизиты;
	
КонецПроцедуры

// Функция возвращает новую таблицу разделов отчета.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица, содержащая колонки:
//			* НазваниеРаздела 	- Строка - Название раздела отчета.
//			* НомерРаздела 		- Число  - Номер раздела отчета.
//			* ХранилищеОтчета	- ХранилищеЗначения  	- Содержит табличный документ.
//			* ДополнительныеПараметры	- Произвольный  - Содержит дополнительную информацию по разделу.
//
Функция НоваяТаблицаРазделыОтчета() Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НазваниеРаздела", 	ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Результат.Колонки.Добавить("НомерРаздела", 		ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Результат.Колонки.Добавить("ХранилищеОтчета", 	Новый ОписаниеТипов("ХранилищеЗначения"));
	Результат.Колонки.Добавить("ДополнительныеПараметры");

	Результат.Индексы.Добавить("НомерРаздела");
	
	Возврат Результат;

КонецФункции

// Процедура добавляет новый раздел в отчет.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  НазваниеРаздела		 - Строка 	- Название раздела отчета.
//  НомерРаздела		 - Число 	- Номер раздела отчета.
//  ТабличныйДокумент	 - ТабличныйДокумент - Раздел отчета.
//  ДополнительныеПараметры	 - Произвольный - Дополнительные данные, связанные с разделом отчета.
//
Процедура ДобавитьРазделОтчета(СтруктураПараметров, НазваниеРаздела, НомерРаздела, ТабличныйДокумент, ДополнительныеПараметры = Неопределено) Экспорт

	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;

	НовыйРаздел = ДанныеДляПроверкиКонтрагентов.РазделыОтчета.Добавить();
	НовыйРаздел.НазваниеРаздела = НазваниеРаздела;
	НовыйРаздел.НомерРаздела	= НомерРаздела;
	НовыйРаздел.ХранилищеОтчета = Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9));
	НовыйРаздел.ДополнительныеПараметры = ДополнительныеПараметры;

КонецПроцедуры

// Функция возвращает таблицу разделов отчета из результата выполнения фонового задания.
//
// Параметры:
//  РезультатВыполненияЗадания		 - Структура - Результат выполнения фонового задания.
//  ТолькоНекорректныеКонтрагенты	 - Булево	 - Признак вывода только строк с некорректными контрагентами.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание разделов отчета.
//
Функция РазделыОтчета(РезультатВыполненияЗадания, ТолькоНекорректныеКонтрагенты = Ложь) Экспорт

	Результат = Неопределено;
	
	Если ТипЗнч(РезультатВыполненияЗадания) = Тип("Структура") Тогда
		
		// АдресРезультатаЗаполненияОтчета может указывать на один из следующих адресов:
		//	1. После заполнения отчета, но до выполнения фонового задания по проверке контрагентов.
		//	В этом случае в РезультатВыполненияЗадания содержится структура ДанныеДляПроверкиКонтрагентов,
		//	в которой лежит таблица разделов.
		//
		//	ИЛИ
		//
		//	2. После выполнения фонового задания проверки контрагентов. В этом случае структура 
		//	в РезультатВыполненияЗадания содержит сами данные.
		
		Если РезультатВыполненияЗадания.Свойство("ДанныеДляПроверкиКонтрагентов") Тогда
			Если РезультатВыполненияЗадания.ДанныеДляПроверкиКонтрагентов.Свойство("РазделыОтчета") Тогда
				Результат = РезультатВыполненияЗадания.ДанныеДляПроверкиКонтрагентов.РазделыОтчета;
			КонецЕсли;
		Иначе
			Если ТолькоНекорректныеКонтрагенты 
				И РезультатВыполненияЗадания.Свойство("РазделыОтчетаПоНекорректнымКонтрагентам") Тогда
				Результат = РезультатВыполненияЗадания.РазделыОтчетаПоНекорректнымКонтрагентам;
			ИначеЕсли НЕ ТолькоНекорректныеКонтрагенты
				И РезультатВыполненияЗадания.Свойство("РазделыОтчета") Тогда
				Результат = РезультатВыполненияЗадания.РазделыОтчета;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = НоваяТаблицаРазделыОтчета();
	КонецЕсли;	

	Возврат Результат;

КонецФункции

// Функция возвращает таблицу разделов отчета для формы.
//
// Параметры:
//  Форма							 - УправляемаяФорма	 - Форма отчета.
//  РезультатВыполненияЗадания		 - Структура, Неопределено	 - Результат выполнения фонового задания.
//  	Если не Неопределено, то результат будет прочитан из временного хранилища.
//  ТолькоНекорректныеКонтрагенты	 - Булево, Неопределено		 - Признак вывода только строк с некорректными контрагентами.
//  		Если Неопределено, то используется настройка формы "ВыведеныВсеСтроки".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание разделов отчета.
//
Функция РазделыОтчетаВФорме(Форма, Знач РезультатВыполненияЗадания = Неопределено, Знач ТолькоНекорректныеКонтрагенты = Неопределено) Экспорт

	// Если параметр не передан, определим его значение по умолчанию, исходя из переключателя на форме.
	Если ТолькоНекорректныеКонтрагенты = Неопределено Тогда
		Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется
			И Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки Тогда
			
			ТолькоНекорректныеКонтрагенты = Ложь;
			
		Иначе
			
			ТолькоНекорректныеКонтрагенты = Истина;
			
		КонецЕсли;
	КонецЕсли;

	Если РезультатВыполненияЗадания = Неопределено Тогда
		
		Если ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресРезультатаЗаполненияОтчета) Тогда
			РезультатВыполненияЗадания = ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресРезультатаЗаполненияОтчета);
		КонецЕсли;
		
	КонецЕсли;

	Результат = РазделыОтчета(РезультатВыполненияЗадания, ТолькоНекорректныеКонтрагенты);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Проверка наличия доступа к проверке контрагентов, запуск проверки.
//
// Параметры:
//  Форма		 - УправляемаяФорма	 - Карточка контрагента.
//  Параметры	 - Структура		 - Параметры из процедуры ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервереКонтрагент(Форма, Параметры) Экспорт
	
	ИнициализироватьРеквизитыФормыКонтрагент(Форма);
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		
		// Определение объекта и ссылки.
		ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
		КонтрагентОбъект 		= ОбъектИСсылкаПоФорме.Объект;
		КонтрагентСсылка 		= ОбъектИСсылкаПоФорме.Ссылка;
		
		СвойстваСправочникаКонтрагенты = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
			
		ИНН = КонтрагентОбъект[СвойстваСправочникаКонтрагенты.ИНН];
		КПП = КонтрагентОбъект[СвойстваСправочникаКонтрагенты.КПП];

		Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента = 
			ПроверкаКонтрагентовВызовСервера.ТекущееСохраненноеСостояниеКонтрагента(КонтрагентСсылка, ИНН, КПП);
			
		СостояниеКонтрагента		= Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента;
		ПроверкаНеТребуется 		= СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке;
		ЭтоИностранныйКонтрагент 	= Форма.РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент;
			
		Если ЭтоИностранныйКонтрагент И ПроверкаНеТребуется 
			ИЛИ НЕ ЭтоИностранныйКонтрагент И ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
			ПроверкаКонтрагентовКлиентСервер.ОтобразитьРезультатПроверкиКонтрагентаВСправочнике(Форма);
		Иначе
			// В режиме при проверке по кнопке показываем только результат из кэша.
			// Если в кэше нет результата, то ничего не показываем и проверку не запускаем.
			// Если нужно, пользователь сам проверит по кнопке.
			Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
				ЗапуститьПроверкуПриСозданииНаСервереКонтрагента(Форма, Параметры, КонтрагентСсылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Устанавливаются параметры динамического списка документов.
//
// Параметры:
//  Список	 - ДинамическийСписок - Список документов.
Процедура ПриСозданииНаСервереСписокКонтрагентов(Список) Экспорт
	
	УстановитьПараметрыДинамическогоСписка(Список);
	УстановитьУсловноеОформлениеСпискаКонтрагентов(Список);
	
	Состояния = ПроверкаКонтрагентовКлиентСерверПовтИсп.СостоянияНедействующегоКонтрагента();
	
	Список.Параметры.УстановитьЗначениеПараметра("Состояния", Состояния);
	
КонецПроцедуры

// Добавляет в дополнительные свойства результат проверки контрагента
//	для последующей записи его в регистр в подписке на событие.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма карточки контрагента.
//  Объект	 - ДанныеФормыСтруктура - Контрагент-объект.
Процедура ПередЗаписьюНаСервереКонтрагент(Форма, Объект) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("ПроверкаКонтрагентовСостояниеКонтрагента", Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента);
	
КонецПроцедуры

// Вспомогательный API. Инициализировать реквизиты проверки контрагента в карточке контрагента.
//
// Параметры:
//  Форма	 - УправляемаяФорма - Карточка контрагента, проверка которого выполняется.
Процедура ИнициализироватьРеквизитыФормыКонтрагент(Форма) Экспорт
	
	НовыеРеквизиты = Новый Структура;
	
	ПроверкаИспользуется = ПроверкаКонтрагентовВызовСервераПовтИсп.ИспользованиеПроверкиВозможно();
	// Включена ли проверка и есть ли доступ на использование проверки.
	НовыеРеквизиты.Вставить("ПроверкаИспользуется", ПроверкаИспользуется);
	// Служебный реквизит
	НовыеРеквизиты.Вставить("НужноПоказатьПредложениеВключитьПроверкуКонтрагентов", 
		НЕ ПроверкаИспользуется И НужноПоказатьПредложениеВключитьПроверкуКонтрагентов());
	// Результат проверки контрагента.
	НовыеРеквизиты.Вставить("СостояниеКонтрагента");
	// Служебные реквизиты для работы фонового задания.
	НовыеРеквизиты.Вставить("ИнтервалПроверкиРезультата", 	1);
	НовыеРеквизиты.Вставить("ИдентификаторЗадания", 		Новый УникальныйИдентификатор);
	НовыеРеквизиты.Вставить("ФоновоеЗаданиеЗапущено", 		Ложь);
	НовыеРеквизиты.Вставить("АдресХранилища");
	// Если Истина, то перед запуском фонового задания по проверке контрагентов из
	// карточки контрагента выполняется предварительная проверка ИНН и КПП.
	НовыеРеквизиты.Вставить("ВыполнятьПредварительнуюПроверкуКонтрагента",	Истина);
	НовыеРеквизиты.Вставить("ЭтоИностранныйКонтрагент", 	Ложь);
	НовыеРеквизиты.Вставить("ЭтоЮридическоеЛицо", 			Истина);
	// Результат проверки контрагента.
	НовыеРеквизиты.Вставить("ЭтоПроверкаПоКнопке", 			Ложь);
	
	РаботаСКонтрагентамиПереопределяемый.ДополнитьРеквизитыФормыКонтрагент(Форма, НовыеРеквизиты);
		
	Форма.РеквизитыПроверкиКонтрагентов = НовыеРеквизиты;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистромСостоянияКонтрагентов

// Вспомогательный API. Позволяет очистить состояния по контрагентам в регистре СостоянияКонтрагентов.
//
// Параметры:
//  Контрагенты	 - Массив - Массив контрагентов. Если нужно очистить весь регистр, то параметр не указывается.
Процедура УдалитьРезультатПроверкиКонтрагентов(Контрагенты = Неопределено) Экспорт 
	
	НачатьТранзакцию();
	
	Попытка
		
		// Не удаляем строки, а очищаем состояния.
		// В модели сервисов для контрагентов не подлежащих проверке не очищаем состояние, 
		// так как в регламентном задании признак иностранного контрагента больше неоткуда получить.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СостоянияКонтрагентов.Контрагент,
			|	ВЫБОР
			|		КОГДА &ОчищатьПоВсемКонтрагентам
			|			ТОГДА ВЫБОР
			|					КОГДА &ЭтоМодельСервисов
			|							И СостоянияКонтрагентов.Состояние = &КонтрагентНеПодлежитПроверке
			|						ТОГДА &КонтрагентНеПодлежитПроверке
			|					ИНАЧЕ &ПустаяСсылка
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА СостоянияКонтрагентов.Контрагент В (&Контрагенты)
			|					ТОГДА ВЫБОР
			|							КОГДА &ЭтоМодельСервисов
			|									И СостоянияКонтрагентов.Состояние = &КонтрагентНеПодлежитПроверке
			|								ТОГДА &КонтрагентНеПодлежитПроверке
			|							ИНАЧЕ &ПустаяСсылка
			|						КОНЕЦ
			|				ИНАЧЕ СостоянияКонтрагентов.Состояние
			|			КОНЕЦ
			|	КОНЕЦ КАК Состояние,
			|	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	СостоянияКонтрагентов.ИНН,
			|	СостоянияКонтрагентов.КПП
			|ИЗ
			|	РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов";
			
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
			
		КонецЕсли;
		
		// Параметры
		Если Контрагенты = Неопределено Тогда
			Запрос.УстановитьПараметр("ОчищатьПоВсемКонтрагентам", 	Истина);
			Запрос.УстановитьПараметр("Контрагенты", 				Новый Массив);
		Иначе
			Запрос.УстановитьПараметр("ОчищатьПоВсемКонтрагентам", 	Ложь);
			Запрос.УстановитьПараметр("Контрагенты", 				Контрагенты);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ЭтоМодельСервисов", 				ОбщегоНазначения.РазделениеВключено());
		Запрос.УстановитьПараметр("КонтрагентНеПодлежитПроверке", 	Перечисления.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке);
		Запрос.УстановитьПараметр("ПустаяСсылка", 					Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка());

		УстановитьПривилегированныйРежим(Истина);
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	 	НаборЗаписей = РегистрыСведений.СостоянияКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ДанныеКонтрагентов);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Проверка контрагентов.Очистка состояний контрагентов'", КодОсновногоЯзыка), 
		УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистромДокументыСОшибкамиПроверкиКонтрагентов

// Вспомогательный API. Позволяет очистить регистр ДокументыСОшибкамиПроверкиКонтрагентов.
//
// Параметры:
//  Документы	 - Массив - Документы, по которым нужно очистить результат проверки.
//		Если нужно очистить весь регистр, то параметр не указывается.
Процедура УдалитьРезультатПроверкиКонтрагентовПоДокументам(Документы = Неопределено) Экспорт 
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если Документы = Неопределено Тогда
			
			НаборЗаписей = РегистрыСведений.ДокументыСОшибкамиПроверкиКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписей.Записать();
			
		Иначе
			
			Для каждого Документ Из Документы Цикл
				
				НаборЗаписей = РегистрыСведений.ДокументыСОшибкамиПроверкиКонтрагентов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(Документ);
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Проверка контрагентов.Очистка состояний документов'", КодОсновногоЯзыка), 
		УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиПроверки

// Включение или отключение использования сервиса путем установки значения константе
//  ИспользоватьПроверкуКонтрагентов.
//
// Параметры:
//  ВключитьПроверку - Булево - Включить или отключить проверку контрагентов.
//
Процедура ВключитьВыключитьПроверкуКонтрагентов(ВключитьПроверку) Экспорт
	
	Если ВключитьПроверку Тогда
		НовоеЗначение = 1;
	Иначе
		// Принудительно отключили.
		// В этом случае больше не показываем предложение на подключение.
		НовоеЗначение = 2;
	КонецЕсли;
	
	Константы.ИспользоватьПроверкуКонтрагентов.Установить(НовоеЗначение);
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

// Запуск проверки контрагентов в фоне после включения проверки.
Процедура ЗапуститьФоновуюПроверкуКонтрагентовПослеИзмененияНастройкиПриНеобходимости() Экспорт
	
	ИспользоватьСервис = ПроверкаКонтрагентовВключена();
	
	ЗапуститьФоновуюПроверку = ИспользоватьСервис
		И НЕ ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы()
		И НЕ МонопольныйРежим();
	
	Если ЗапуститьФоновуюПроверку Тогда
		ПроверитьКонтрагентовПослеВключенияПроверкиФоновоеЗадание();
	КонецЕсли;

КонецПроцедуры

//  Метод обновления информационной базы для режима сервисов.
Процедура ВключитьПроверкуКонтрагентовДляРежимаСервисов() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Запуск фонового задания после включения проверки не требуется.
		ВключитьВыключитьПроверкуКонтрагентов(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Показывает, включена ли проверка контрагентов.
// 
// Возвращаемое значение:
//  Булево - Значение константы ИспользоватьПроверкуКонтрагентов - включена ли проверка контрагентов в базе.
//
Функция ПроверкаКонтрагентовВключена() Экспорт
	
	Возврат ЗначениеКонстантыИспользоватьПроверкуКонтрагентов() = 1;
	
КонецФункции

// Определяем наличие права на использование проверки контрагентов.
//
// Возвращаемое значение:
//  Булево - наличие права на использование проверки контрагентов.
//
Функция ЕстьПравоНаИспользованиеПроверки() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.Константы.ИспользоватьПроверкуКонтрагентов);
	
КонецФункции

// Определяем наличие права на включение проверки контрагентов.
//
// Возвращаемое значение:
//  Булево - наличие права на включение проверки контрагентов.
//
Функция ЕстьПравоНаРедактированиеНастроек() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Константы.ИспользоватьПроверкуКонтрагентов);
	
КонецФункции

// Проверяет наличие доступа к веб-сервису ФНС.
//
// Возвращаемое значение:
//  Булево - наличие доступа к веб-сервису ФНС.
//
Функция ЕстьДоступКВебСервисуФНС() Экспорт
	
	Таймаут = 15;
	Прокси 	= ПроксиСервиса(Таймаут);

	Если Прокси = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем на конкретных данных
	ДанныеКонтрагента = Новый Структура();
	ДанныеКонтрагента.Вставить("ИНН", "7709860400");
	ДанныеКонтрагента.Вставить("КПП", "770901001");
	ДанныеКонтрагента.Вставить("Дата", ДатаСтрокой(ТекущаяДатаСеанса()));
	
	Параметры 			= ПараметрыРаботыСервиса();
	ЗапросФабрикиXDTO 	= Прокси.ФабрикаXDTO.Тип(
		Параметры.ПространствоИменОтвета, 
		Параметры.ИмяТипаЗапросаФабрикиXDTO);
		
	WSЗапрос = Прокси.ФабрикаXDTO.Создать(ЗапросФабрикиXDTO);
	
	ДобавитьКонтрагентаВЗапросКСервису(
		WSЗапрос, 
		Прокси,
		ДанныеКонтрагента);
	
	NdsResponse = ОтветСервисаФНС(Прокси, WSЗапрос);
	
	Если NdsResponse = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Определяет, отказался ли пользователь от использования сервиса в предложении на подключение.
//
// Возвращаемое значение:
//  Булево - пользователь отказался от использования сервиса в предложении на подключение.
//
Функция БольшеНеПоказыватьПредложениеПодключиться() Экспорт
	
	Возврат ПроверкуОтключили();
	
КонецФункции

// Сохраняет дату последнего отображения предложения на использование сервиса.
Процедура СохранитьДатуПоследнегоОтображенияПредложенияПодключиться() Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПроверкаКонтрагентов", "ПроверкаКонтрагентов_ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса", ТекущаяДатаСеанса());
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Проверка нескольких контрагентов.
//
// Параметры:
//  ДанныеКонтрагентов					 - ТаблицаЗначений - Содержит данные проверяемых контрагентов. 
//		Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагента.
//  АдресХранилища						 - Строка - Адрес, в который будет помещен результат проверки контрагента.
//  ЭтоПроверкаСправочника				 - Булево - Указывает, выполняется ли проверка справочника. 
//		Для справочника результат проверки сохраняется во временное хранилище, либо записывается в регистр.
//		Для остальных объектов результат проверки заполняется в колонке Состояние таблицы ДанныеКонтрагентов.
//  СохранятьРезультатСразуПослеПроверки - Булево - Признак, указывающий нужно ли результат проверки контрагента.
Процедура ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища = Неопределено, ЭтоПроверкаСправочника = Истина, СохранятьРезультатСразуПослеПроверки = Ложь) Экспорт
	
	// Если нет доступа к веб-сервису, то проверку не выполняем.
	Если НЕ ЕстьДоступКВебСервисуФНС() Тогда
		Возврат;
	КонецЕсли;
	
	// Если по некоторым контрагентам можно определить, что они не существуют, не обращаясь к сервису, то к сервису по ним
	// обращаться не будем.
	Если ЭтоПроверкаСправочника И ИспользоватьКэш(ДанныеКонтрагентов) Тогда
		ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов);
	КонецЕсли;
	
	// Приведение данных к нужному формату, выявление записей с ошибками.
	ПодготовитьДанныеИВыполнитьПредварительнуюПроверку(ДанныеКонтрагентов);
	
	// Получение результатов проверки от веб-сервиса.
	// Проверяем только тех контрагентов, у которых неопределено состояние существования и у которых нет ошибок.
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка());
	ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор);
	
	// Сохраняем результаты проверки, если это справочник.
	Если ЭтоПроверкаСправочника Тогда
		УстановитьПривилегированныйРежим(Истина);
		СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, АдресХранилища, СохранятьРезультатСразуПослеПроверки);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Метод фонового задания по проверке контрагента из формы контрагента.
//
// Параметры:
//  Параметры	 - Структура - Параметры запуска фонового задания. Ключи структуры:
//		Контрагент - ОпределяемыйТип.Контрагент - Проверяемый контрагент.
//		ИНН		 - Строка - ИНН Контрагента
//		КПП		 - Строка - КПП Контрагента
//		Дата		 - Дата - Дата, на которую выполняется проверка контрагента. Может быть не указана, тогда берется текущая
//		                  дата "СохранятьРезультатСразуПослеПроверки" - Булево - Признак, указывающий нужно ли результат
//		                  проверки контрагента сразу сохранять в регистр
//		АдресХранилища - Строка - Адрес, в который будет помещен результат проверки контрагента.
Процедура ПроверитьКонтрагентаФоновоеЗадание(Параметры) Экспорт 
	
	// Присвоение даты находится здесь, так как ТекущаяДатаСеанса работает только на сервере.
	Если НЕ Параметры.Свойство("Дата") Тогда
		Параметры.Вставить("Дата", НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Попытка
		ПроверитьКонтрагента(Параметры, Параметры.АдресХранилища);
	Исключение
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Ошибка при проверке из карточки контрагента'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;
	
КонецПроцедуры

#Область ОбработчикиСобытийПодсистемКонфигурации

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.2.5.14";
	Обработчик.Процедура           = "ПроверкаКонтрагентов.ВключитьПроверкуКонтрагентовДляРежимаСервисов";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.2.5.14";
	Обработчик.Процедура           = "ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c4bcb537-61e2-4fbf-af66-a5854048948f");
	Обработчик.Комментарий = НСтр("ru = 'Проверяет существование контрагентов по базе ФНС.
		|До завершения выполнения существование контрагента может быть определено не для всех контрагентов'");
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки");
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиДанных.
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	 Если ОбщегоНазначения.РазделениеВключено() Тогда
		 
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяМетода", "ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки");
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			
			МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			МодульОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
		КонецЕсли;
		
	Иначе
		
		// Запуск фонового задания после включения проверки не требуется.
		ВключитьВыключитьПроверкуКонтрагентов(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	// 2.3.3.33
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.3.3.33",
		"Роль.ИспользованиеДосьеКонтрагента", 
		"Роль.ПросмотрОтчетаДосьеКонтрагента",
		"СтандартныеПодсистемы");
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.СобратьСтатистикуКонфигурации.
Процедура СобратьСтатистикуКонфигурации() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации("ИспользуетсяПроверкаКонтрагентов", 
		Константы.ИспользоватьПроверкуКонтрагентов.Получить());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСВебСервисом

// Значения настроек
// Возвращаемое значение:
// Структура - Признак использования сервиса и адрес веб-сервиса ФНС. Ключи - "ИспользоватьСервис", "АдресСервиса".
Функция ПараметрыРаботыСервиса()
	
	АдресСервиса = "http://npchk.nalog.ru/FNSNDSCAWS_2?wsdl";
	
	// заполняем общие настройки
	Результат = Новый Структура();
	Результат.Вставить("АдресСервиса", 					АдресСервиса);
	Результат.Вставить("ИмяТипаКонтрагентаФабрикиXDTO", "NdsRequest2_NP");
	Результат.Вставить("ИмяТипаЗапросаФабрикиXDTO", 	"NdsRequest2");
	Результат.Вставить("АдресWSDL", 					АдресСервиса);
	Результат.Вставить("URIПространстваИмен", 			"http://ws.unisoft");
	Результат.Вставить("ИмяСервиса", 					"FNSNDSCAWS2");
	Результат.Вставить("ИмяТочкиПодключения", 			"FNSNDSCAWS2_Port");
	Результат.Вставить("ПространствоИменОтвета", 		"http://ws.unisoft/FNSNDSCAWS2/Request");
	
	Возврат Результат;
	
КонецФункции

Функция ПроксиСервиса(Таймаут = 120)
	
	WSПрокси = Неопределено;
	Попытка
	
		WSПрокси = ПолучитьWSПрокси(Таймаут);
		
	Исключение
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Ошибка доступа к веб-сервису'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки; 
	
	Возврат WSПрокси;
	
КонецФункции

Процедура ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор)
	
	// Проверяем только тех контрагентов, которые соответствуют указанному отбору.
	ДанныеКонтрагентовДляПроверкиСервисом = ДанныеКонтрагентов.НайтиСтроки(Отбор);
	КоличествоКонтрагентов = ДанныеКонтрагентовДляПроверкиСервисом.Количество();

	Если КоличествоКонтрагентов = 0 Тогда
		// Нет данных для проверки
		Возврат;
	КонецЕсли;
	
	// Объявляем перед циклом.
	Прокси 				= ПроксиСервиса();
	Параметры 			= ПараметрыРаботыСервиса();
	ЗапросФабрикиXDTO 	= Прокси.ФабрикаXDTO.Тип(
		Параметры.ПространствоИменОтвета, 
		Параметры.ИмяТипаЗапросаФабрикиXDTO);
	
	РазмерПорции = 10000;
	
	// Разбиваем всю таблицу на блоки запросов.
	КоличествоЗапросов = ?(КоличествоКонтрагентов % РазмерПорции = 0, КоличествоКонтрагентов / РазмерПорции, Цел(КоличествоКонтрагентов / РазмерПорции) + 1);
		
	// Выполняем несколько запросов. В каждом запросе не более 10000 строк.
	Для НомерПорции = 1 По КоличествоЗапросов Цикл 
		
		МинимальныйНомерКонтрагента 	= Мин(РазмерПорции * (НомерПорции - 1), КоличествоКонтрагентов);
		МаксимальныйНомерКонтрагента 	= Мин(РазмерПорции * НомерПорции, КоличествоКонтрагентов) - 1;

		WSЗапрос = Прокси.ФабрикаXDTO.Создать(ЗапросФабрикиXDTO);
		
		Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
			
			ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
			
			ДобавитьКонтрагентаВЗапросКСервису(
				WSЗапрос, 
				Прокси,
				ДанныеКонтрагента); 
			
		КонецЦикла;
		
		Если WSЗапрос.NP.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		NdsResponse = ОтветСервисаФНС(Прокси, WSЗапрос);

		Если NdsResponse <> Неопределено Тогда
			ОбработатьОтветСервиса(NdsResponse, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента);	
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ОтветСервисаФНС(Прокси, WSЗапрос)
	
	// Получаем результат проверки от сервиса.
	Попытка
		NdsResponse = Прокси.NdsRequest2(WSЗапрос);
	Исключение
		
		// Страхуемся от ошибки "Timeout was reached".
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.NdsRequest2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		NdsResponse = Неопределено;
		
	КонецПопытки;
	
	Возврат NdsResponse;
	
КонецФункции

Процедура ДобавитьКонтрагентаВЗапросКСервису(WSЗапрос, Прокси, ДанныеКонтрагента)
	
	Попытка
		
		Параметры = ПараметрыРаботыСервиса();
		
		КонтрагентФабрикиXDTO = Прокси.ФабрикаXDTO.Тип(
			Параметры.ПространствоИменОтвета, 
			Параметры.ИмяТипаКонтрагентаФабрикиXDTO);
			
		WSКонтрагент = Прокси.ФабрикаXDTO.Создать(КонтрагентФабрикиXDTO);
	
		// Указываем ИНН, КПП и Дату
		WSКонтрагент.INN = ДанныеКонтрагента.ИНН;
		Если ЗначениеЗаполнено(ДанныеКонтрагента.КПП) Тогда
			WSКонтрагент.KPP = ДанныеКонтрагента.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Дата)Тогда
			WSКонтрагент.DT = ДатаСтрокой(ДанныеКонтрагента.Дата);
		КонецЕсли;
		
		// Добавляем данные по контрагенту в список на проверку.
		WSЗапрос.NP.Добавить(WSКонтрагент);

	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных;
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Формирование данных для обращения к сервису ФНС'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки; 
				
КонецПроцедуры

Процедура ОбработатьОтветСервиса(
		NdsResponse, 
		ДанныеКонтрагентовДляПроверкиСервисом, 
		МинимальныйНомерКонтрагента, 
		МаксимальныйНомерКонтрагента)
	
	ИндексТекущегоОтвета = 0;
	Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл 
		ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
		Если ДанныеКонтрагента.Состояние <> Перечисления.СостоянияСуществованияКонтрагента.КонтрагентСодержитОшибкиВДанных Тогда
			
			Попытка

				// Ответ от сервиса
				ОтветПоКонтрагенту 			= NdsResponse.NP[ИндексТекущегоОтвета];
				СостояниеВОтвете 			= ОтветПоКонтрагенту.State;
				ДанныеКонтрагента.Состояние	= СостояниеНаОсновеОтветаСервиса(ДанныеКонтрагента, СостояниеВОтвете);
				
			Исключение
		
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Проверка контрагентов.Обработка ответа от веб-сервиса'", КодОсновногоЯзыка), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			КонецПопытки;
			
			ИндексТекущегоОтвета = ИндексТекущегоОтвета + 1;
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры

#Область НастройкиВебСервиса

Функция ПолучитьWSПрокси(Таймаут) 
	
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ПараметрыРаботыСервиса());
	ПараметрыПодключения.Таймаут = Таймаут;
	
	WSПрокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	
	Возврат WSПрокси;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрочиеПроцедуры

// Оболочка для процедуры, которая так же используется для отложенного обновления.
// Необходима потому, что обработчик отложенного обновления может иметь только один параметр,
// а при запуске фонового задания новым методом в процедуре два обязательных параметра.
Процедура ПроверитьКонтрагентовПослеВключенияПроверкиВФоне(Параметры, АдресХранилища) Экспорт

	ПроверитьКонтрагентовПослеВключенияПроверки();
	
КонецПроцедуры

Функция ЭтоМедленныйРежимРаботы() Экспорт

	ОперативнаяПамять 	= ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ОперативнаяПамять");
	СтрокаСоединенияИБ 	= ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("СтрокаСоединенияИнформационнойБазы");
	РекомендуемыйОбъем 	= ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности().РекомендуемыйОбъемОперативнойПамяти;
	
	ИБФайловая = СтрНайти(ВРег(СтрокаСоединенияИБ), "FILE=") = 1;

	// Проверка объема доступной оперативной памяти.
	Если ИБФайловая Тогда
		Если ЗначениеЗаполнено(ОперативнаяПамять)
			И ОперативнаяПамять < РекомендуемыйОбъем Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		// В клиент-серверной базе данных проверим режим низкой скорости соединения.
		СкоростьТекущегоСоединения = ПолучитьСкоростьКлиентскогоСоединения();
		Возврат СкоростьТекущегоСоединения = СкоростьКлиентскогоСоединения.Низкая;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Показывает, включена ли проверка контрагентов.
// Возвращаемое значение:
// Булево - Значение константы ИспользоватьПроверкуКонтрагентов - включена ли проверка контрагентов в базе.
Функция ЗначениеКонстантыИспользоватьПроверкуКонтрагентов()
	
	Возврат Константы.ИспользоватьПроверкуКонтрагентов.Получить();
	
КонецФункции

Функция ПроверкуНикогдаНеВключали()
	
	Возврат ЗначениеКонстантыИспользоватьПроверкуКонтрагентов() = 0;
	
КонецФункции

Функция ПроверкуОтключили()
	
	Возврат ЗначениеКонстантыИспользоватьПроверкуКонтрагентов() = 2;
	
КонецФункции

Функция ИспользоватьКэш(ДанныеКонтрагентов)
	
	ИспользоватьКэш = Истина;
	Если ДанныеКонтрагентов.Количество() = 1 И ДанныеКонтрагентов.Колонки.Найти("ДополнительныеПараметры") <> Неопределено Тогда
		ДополнительныеПараметры = ДанныеКонтрагентов[0].ДополнительныеПараметры;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("НеИспользоватьКэш") Тогда
			ИспользоватьКэш = НЕ ДополнительныеПараметры.Свойство("НеИспользоватьКэш");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИспользоватьКэш;
	
КонецФункции
	
Процедура СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента)
	
	Попытка
		
		Контрагент = ДанныеКонтрагента.Контрагент;
		
		// Блокируем по Контрагенту
		СтруктураКлюча = Новый Структура();
		СтруктураКлюча.Вставить("Контрагент", Контрагент);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			ОбластьДанныхВспомогательныеДанные	= ДанныеКонтрагента.ОбластьДанныхВспомогательныеДанные;
			СтруктураКлюча.Вставить("ОбластьДанныхВспомогательныеДанные", ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;

		Ключ = РегистрыСведений.СостоянияКонтрагентов.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		// Записываем данные в регистр.
		НаборЗаписей = РегистрыСведений.СостоянияКонтрагентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			НаборЗаписей.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;
		НаборЗаписей.Очистить();
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ДанныеКонтрагента); 
		
		НаборЗаписей.Записать();
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка контрагентов.Запись результатов проверки контрагентов в регистр'", КодОсновногоЯзыка), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов)
	
	Для каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоДокументСОшибкамиПроверкиКонтрагентов(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыСОшибкамиПроверкиКонтрагентов.Документ
		|ИЗ
		|	РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов КАК ДокументыСОшибкамиПроверкиКонтрагентов
		|ГДЕ
		|	ДокументыСОшибкамиПроверкиКонтрагентов.Документ = &ДокументСсылка";
		
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

// Сохраняет документ в регистр ДокументыСОшибкамиПроверкиКонтрагентов, 
//	если в контрагентах есть ошибка; и удаляет из регистра - если ошибки нет.
//
// Параметры:
//  СохраняемыйРезультат - Соответствие	 - Ключ - сохраняемый документ, Значение - признак наличия ошибки в документе.
Процедура СохранитьРезультатыПроверкиКонтрагентовВДокументеВРегистр(СохраняемыйРезультат)
	
	Если СохраняемыйРезультат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		// Устанавливаем блокировку сразу на все документы.
		Блокировка = Новый БлокировкаДанных;
		Для каждого СохраняемыйРезультатПоДокументу Из СохраняемыйРезультат Цикл
		
			ДокументСсылка = СохраняемыйРезультатПоДокументу.Ключ;
			
			Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
				Продолжить;
			КонецЕсли;
			
			// Объектная блокировка.
			СтруктураКлюча = Новый Структура("Документ", ДокументСсылка);
			Ключ = РегистрыСведений.ДокументыСОшибкамиПроверкиКонтрагентов.СоздатьКлючЗаписи(СтруктураКлюча);
			ЗаблокироватьДанныеДляРедактирования(Ключ);
		
			// Транзакционная блокировка.
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов");
			ЭлементБлокировки.УстановитьЗначение("Документ", ДокументСсылка);
			
		КонецЦикла;
		Блокировка.Заблокировать();
		
		// Записываем данные в регистр.
		Для каждого СохраняемыйРезультатПоДокументу Из СохраняемыйРезультат Цикл
		
			ДокументСсылка 		= СохраняемыйРезультатПоДокументу.Ключ;
			ЭтоДокументСОшибкой = СохраняемыйРезультатПоДокументу.Значение;
			
			Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
				Продолжить;
			КонецЕсли;
		
			// Записываем данные в регистр.
			НаборЗаписей = РегистрыСведений.ДокументыСОшибкамиПроверкиКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
			
			Если ЭтоДокументСОшибкой Тогда
				// Записываем документ в регистр.
				Запись = НаборЗаписей.Добавить();
				Запись.Документ = ДокументСсылка;
			Иначе
				// Очищаем регистр
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Проверка контрагентов.Запись результатов проверки документов в регистр'", КодОсновногоЯзыка), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПодготовитьДанныеИВыполнитьПредварительнуюПроверку(ДанныеКонтрагентовДляПроверки, ДополнительныеПараметры = Неопределено)
	
	// Все данные приводятся к нужному типу, чтобы по ним можно было делать запрос.
	ДанныеКонтрагентов = ТипизироватьДанныеКонтрагентов(ДанныеКонтрагентовДляПроверки);
	
	// Определяем значения ЭтоИностранныйКонтрагент и ЭтоЮридическоеЛицо.
	ДополнитьДанныеКонтрагентов(ДанныеКонтрагентовДляПроверки, ДанныеКонтрагентов);
	
	// Состояния с ошибками получаем из кэша.
	ВзятьСостоянияИзКэша(ДанныеКонтрагентов, ДополнительныеПараметры);
	
	// Исключаем из проверяемых контрагентов тех, к которым нет доступа.
	ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов);
	
	// Проверяем ИНН, КПП и Дату своими проверками перед подачей на веб-сервис ФНС.
	ВыполнитьПредварительнуюПроверкуДанныхПоВсемКонтрагентам(ДанныеКонтрагентов, ДополнительныеПараметры);
	
	ДанныеКонтрагентовДляПроверки = ДанныеКонтрагентов;
	
КонецПроцедуры

Процедура ВыполнитьПредварительнуюПроверкуДанныхПоВсемКонтрагентам(ДанныеКонтрагентов, ДополнительныеПараметры = Неопределено)
	
	Для каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		
		Если НЕ ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоСостояниеКонтрагентаСОшибкой(ДанныеКонтрагента.Состояние) Тогда
			
			// Проверяем ошибки, приводим данные к нужному формату.
			ВыполнитьПредварительнуюПроверкуДанныхПоКаждомуКонтрагенту(ДанныеКонтрагента, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СвернутьДанныеКонтрагентов(ДанныеКонтрагентов);
	
КонецПроцедуры

Функция ТипизироватьДанныеКонтрагентов(ДанныеКонтрагентовДляПроверки)
	
	// Создаем таблицу
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	
	// Копируем таблицу, сохраняя типы колонок.
	Для каждого ДанныеКонтрагентаДляПроверки Из ДанныеКонтрагентовДляПроверки Цикл
		
		// Копируем данные из таблицы с "сырыми данными" в таблицу с "типизированными" колонками.
		ДанныеКонтрагента = ДанныеКонтрагентов.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, ДанныеКонтрагентаДляПроверки);
		
	КонецЦикла;

	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура ДополнитьДанныеКонтрагентов(ДанныеКонтрагентовДляПроверки, ДанныеКонтрагентов)
	
	ЕстьКолонкаЭтоЮридическоеЛицо 		= ДанныеКонтрагентовДляПроверки.Колонки.Найти("ЭтоЮридическоеЛицо") <> Неопределено;
	ЕстьКолонкаЭтоИностранныйКонтрагент = ДанныеКонтрагентовДляПроверки.Колонки.Найти("ЭтоИностранныйКонтрагент") <> Неопределено;
	
	Если ДанныеКонтрагентов.Количество() = 1
		И НЕ ЗначениеЗаполнено(ДанныеКонтрагентов[0].Контрагент)
		И ЗначениеЗаполнено(ДанныеКонтрагентов[0].ЭтоЮридическоеЛицо)
		И ЗначениеЗаполнено(ДанныеКонтрагентов[0].ЭтоИностранныйКонтрагент) Тогда
		
		// Это проверка нового незаписанного элемента справочника.
		// При заходе в эту процедуру признаки ЭтоЮридическоеЛицо и
		// ЭтоИностранныйКонтрагент уже определенные в других процедурах.
		
	Иначе
	
		// Запоминаем значение поля "Дополнительные параметры".
		ДополнительныеПараметрыДанныхКонтрагентов = ЗапомнитьДополнительныеПараметрыДанныхКонтрагентов(ДанныеКонтрагентов);
		
		СтандартнаяОбработка = Истина;
		РаботаСКонтрагентамиПереопределяемый.ДополнитьДанныеКонтрагентов(ДанныеКонтрагентов, СтандартнаяОбработка);
		
		// В результате запроса поле "Дополнительные параметры" было "отрезано",
		// так как оно имеет тип Структура. Здесь мы восстанавливаем это поле.
		ВосстановитьДополнительныеПараметрыДанныхКонтрагентов(ДанныеКонтрагентов, ДополнительныеПараметрыДанныхКонтрагентов);
		
		// Для случая, если переопределяемая не заполнена, то для обеспечения обратной совместимости
		// проверяем заполненность колонок и заполняем их при помощи старых переопределяемых процедур.
		Если СтандартнаяОбработка Тогда
			
			Для каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
				
				// Заполняем только пустые значения.
				Если ЕстьКолонкаЭтоЮридическоеЛицо И НЕ ЗначениеЗаполнено(ДанныеКонтрагента.ЭтоЮридическоеЛицо) Тогда
					ДанныеКонтрагента.ЭтоЮридическоеЛицо = ЭтоЮридическоеЛицо(ДанныеКонтрагента);
				КонецЕсли;
				
				// Заполняем только пустые значения.
				Если ЕстьКолонкаЭтоИностранныйКонтрагент И НЕ ЗначениеЗаполнено(ДанныеКонтрагента.ЭтоИностранныйКонтрагент) Тогда
					ДанныеКонтрагента.ЭтоИностранныйКонтрагент = ЭтоИностранныйКонтрагент(ДанныеКонтрагента);
				КонецЕсли;
				
			КонецЦикла; 

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СвернутьДанныеКонтрагентов(ДанныеКонтрагентов, ДополнительныеКолонкиГруппировок = "")
	
	// Удаляем из таблицы дубли
	КолонкиГруппировок = "Контрагент, ИНН, КПП, Дата, Состояние, ЭтоЮридическоеЛицо, ЭтоИностранныйКонтрагент" 
		+ ?(ДополнительныеКолонкиГруппировок = "", "", ", " + ДополнительныеКолонкиГруппировок);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		КолонкиГруппировок = КолонкиГруппировок + ", ОбластьДанныхВспомогательныеДанные";
	КонецЕсли;
	
	ДанныеКонтрагентов.Свернуть(КолонкиГруппировок);
	
КонецПроцедуры

// В таблице ДанныеКонтрагентов оставляет только записи по контрагентам,
//		к которым есть доступ. В модели сервиса из неразделенной области проверку делать
//		не нужно, поскольку регламентное задание выполняется под администратором 
//		и нет доступа к разделенному справочнику контрагентов.
//
Процедура ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов)
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		ИЛИ НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		
		ДополнительныеПараметрыДанныхКонтрагентов = ЗапомнитьДополнительныеПараметрыДанныхКонтрагентов(ДанныеКонтрагентов);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ДанныеКонтрагентов.ЭтоЮридическоеЛицо,
			|	ДанныеКонтрагентов.ЭтоИностранныйКонтрагент,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние
			|ПОМЕСТИТЬ ВсеДанныеКонтрагентов
			|ИЗ
			|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент КАК Контрагент
			|ПОМЕСТИТЬ ВсеКонтрагенты
			|ИЗ
			|	#СправочникКонтрагентов КАК СправочникКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ПО СправочникКонтрагентов.Ссылка = ВсеДанныеКонтрагентов.Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.ЭтоЮридическоеЛицо,
			|	ВсеДанныеКонтрагентов.ЭтоИностранныйКонтрагент,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеКонтрагенты КАК ВсеКонтрагенты
			|		ПО (ВсеКонтрагенты.Контрагент = ВсеДанныеКонтрагентов.Контрагент)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.ЭтоЮридическоеЛицо,
			|	ВсеДанныеКонтрагентов.ЭтоИностранныйКонтрагент,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|ГДЕ
			|	ВсеДанныеКонтрагентов.Контрагент = &ПустойКонтрагент";
			
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
		КонецЕсли;
			
		СвойстваСправочника = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СправочникКонтрагентов", "Справочник." + СвойстваСправочника.Имя);
			
		Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
		Запрос.УстановитьПараметр("ПустойКонтрагент", 	Справочники[СвойстваСправочника.Имя].ПустаяСсылка());
		
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
		// В результате запроса поле "Дополнительные параметры" было "отрезано",
		// так как оно имеет тип Структура. Здесь мы восстанавливаем это поле.
		ВосстановитьДополнительныеПараметрыДанныхКонтрагентов(ДанныеКонтрагентов, ДополнительныеПараметрыДанныхКонтрагентов);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапомнитьДополнительныеПараметрыДанныхКонтрагентов(ДанныеКонтрагентов)
	
	Если ДанныеКонтрагентов.Колонки.Найти("ДополнительныеПараметры") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Сохраняем дополнительные параметры в структуру, потому что 
	// после запроса эта колонка будет потеряна.
	СоответствиеДляДополнительныхПараметров = Новый Соответствие;
	Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		СоответствиеДляДополнительныхПараметров.Вставить(ДанныеКонтрагента.Контрагент, ДанныеКонтрагента.ДополнительныеПараметры);
	КонецЦикла;
	
	Возврат СоответствиеДляДополнительныхПараметров;
	
КонецФункции

Процедура ВосстановитьДополнительныеПараметрыДанныхКонтрагентов(ДанныеКонтрагентовБезДополнительныхПараметров, СохраненныеДополнительныеПараметры)
	
	Если СохраненныеДополнительныеПараметры = Неопределено Тогда
		// Означает, что в данных контрагента дополнительных параметров изначально не было.
		Возврат;
	КонецЕсли;
	
	Если ДанныеКонтрагентовБезДополнительныхПараметров.Колонки.Найти("ДополнительныеПараметры") = Неопределено Тогда
		
		ДанныеКонтрагентовБезДополнительныхПараметров.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
		Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентовБезДополнительныхПараметров Цикл
			ДополнительныеПараметры = СохраненныеДополнительныеПараметры.Получить(ДанныеКонтрагента.Контрагент);
			Если ДополнительныеПараметры <> Неопределено Тогда
				ДанныеКонтрагента.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СохраненныеДополнительныеПараметры = Неопределено;
	
КонецПроцедуры

Процедура ВыполнитьПредварительнуюПроверкуДанныхПоКаждомуКонтрагенту(ДанныеКонтрагента, ДополнительныеПараметрыПроверки = Неопределено)
	
	// Предотвращаем проверку иностранного контрагента.
	
	Если ДанныеКонтрагента.ЭтоИностранныйКонтрагент = Истина Тогда // Может равняться Неопределено.
		
		ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке;
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметрыПроверки) = Тип("Структура") 
		И ДополнительныеПараметрыПроверки.Свойство("ВыполнятьПредварительнуюПроверкуКонтрагента")
		И ДополнительныеПараметрыПроверки.ВыполнятьПредварительнуюПроверкуКонтрагента = Ложь Тогда
		
		Возврат;
		
	Иначе
				
		ДанныеКонтрагента.ИНН 	= СокрЛП(ДанныеКонтрагента.ИНН);
		ДанныеКонтрагента.КПП 	= СокрЛП(ДанныеКонтрагента.КПП);

		ПроверкаКонтрагентовКлиентСервер.НайденыОшибкиВДанных(ДанныеКонтрагента, ДополнительныеПараметрыПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЮридическоеЛицо(ДанныеКонтрагента)
	
	ДлинаИНН = СтрДлина(СокрЛП(ДанныеКонтрагента.ИНН));
	
	// Обращение к реквизитам справочника возможно только из разделенного сеанса.
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		ИЛИ НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		
		ЭтоЮридическоеЛицо 		= Ложь;
		СтандартнаяОбработка 	= Истина;
		РаботаСКонтрагентамиПереопределяемый.ОпределитьЮрИлиФизЛицоКонтрагент(СтандартнаяОбработка, ЭтоЮридическоеЛицо, ДанныеКонтрагента);

		Если СтандартнаяОбработка Тогда
			ЭтоЮридическоеЛицо = ДлинаИНН <> 12;
		КонецЕсли;
		
	Иначе
		ЭтоЮридическоеЛицо = ДлинаИНН <> 12;
	КонецЕсли;
	
	Возврат ЭтоЮридическоеЛицо;
	
КонецФункции

Функция ЭтоИностранныйКонтрагент(ДанныеКонтрагента)
	
	ЯвляетсяИностранным = Ложь;
	
	// Обращение к реквизитам справочника возможно только из разделенного сеанса.
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		ИЛИ НЕ ОбщегоНазначения.РазделениеВключено() Тогда
	
		РаботаСКонтрагентамиПереопределяемый.ОпределитьЯвляетсяЛиКонтрагентИностранным(ДанныеКонтрагента, ЯвляетсяИностранным);
		
	Иначе
		
		ЯвляетсяИностранным = ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке;
		
	КонецЕсли;
		
	Возврат ЯвляетсяИностранным;
	
КонецФункции

Процедура ВзятьСостоянияИзКэша(ДанныеКонтрагентов, ДополнительныеПараметрыПроверки = Неопределено)
	
	// Если по некоторым контрагентам можно определить, что они не существуют, не обращаясь к сервису, то к сервису по ним
	// обращаться не будем.
	
	Если ДополнительныеПараметрыПроверки <> Неопределено
		И ТипЗнч(ДополнительныеПараметрыПроверки) = Тип("Структура") 
		И ИспользоватьКэш(ДанныеКонтрагентов) Тогда
		
		ЭтоПроверкаСправочника = ДополнительныеПараметрыПроверки.Свойство("ЭтоПроверкаСправочника")
			И ДополнительныеПараметрыПроверки.ЭтоПроверкаСправочника;
			
		ЭтоПроверкаДокумента = ДополнительныеПараметрыПроверки.Свойство("ЭтоПроверкаДокумента")
			И ДополнительныеПараметрыПроверки.ЭтоПроверкаДокумента;
			
		БратьСостоянияТолькоИзКэша = ДополнительныеПараметрыПроверки.Свойство("ИзКэша")
			И ДополнительныеПараметрыПроверки.ИзКэша;
			
		ЭтоСмешанныйРежимПолученияСостояний = ДополнительныеПараметрыПроверки.Свойство("Смешанный")
			И ДополнительныеПараметрыПроверки.Смешанный;
			
		ЭтоПроверкаПоКнопке = ДополнительныеПараметрыПроверки.Свойство("ЭтоПроверкаПоКнопке")
			И ДополнительныеПараметрыПроверки.ЭтоПроверкаПоКнопке;
		
		ЕстьДоступКВебСервисуФНС = 
			НЕ ДополнительныеПараметрыПроверки.Свойство("ЕстьДоступКВебСервисуФНС")
			ИЛИ ДополнительныеПараметрыПроверки.Свойство("ЕстьДоступКВебСервисуФНС")
			И ДополнительныеПараметрыПроверки.ЕстьДоступКВебСервисуФНС;
			
		Если ЭтоПроверкаПоКнопке И ЕстьДоступКВебСервисуФНС Тогда
			// Если есть доступ в Интернет и это проверка по кнопке 
			// в документе или справочнике, то данные из кэша не берем - 
			// получаем свежие данные.
			Возврат;
		КонецЕсли;
			
		Если ЭтоПроверкаСправочника
			ИЛИ БратьСостоянияТолькоИзКэша
			ИЛИ ЭтоСмешанныйРежимПолученияСостояний
			ИЛИ ЭтоПроверкаДокумента И НЕ ЕстьДоступКВебСервисуФНС Тогда
			
			 // Берем состояния из кэша, если принудительно указано брать из кэша
			 // или при проверке в документе, когда нет доступа в интернет.
			ПолучатьВсеСостоянияИзРегистра = БратьСостоянияТолькоИзКэша
				ИЛИ ЭтоПроверкаДокумента И НЕ ЕстьДоступКВебСервисуФНС; 
			
			ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов, ПолучатьВсеСостоянияИзРегистра);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов, ПолучатьВсеСостоянияИзРегистра = Ложь)
	
	ДополнительныеПараметрыДанныхКонтрагентов = ЗапомнитьДополнительныеПараметрыДанныхКонтрагентов(ДанныеКонтрагентов);
	
	// В запросе поле ОбластьДанныхВспомогательныеДанные располагается не обычному по порядку.
	// Это сделано для того, чтобы при отсутствии подсистемы РаботаВМоделиСервиса поле
	// ОбластьДанныхВспомогательныеДанные можно было легко удалить из запроса.
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент,
	              	|	ДанныеКонтрагентов.ИНН,
	              	|	ДанныеКонтрагентов.КПП,
	              	|	ДанныеКонтрагентов.ЭтоЮридическоеЛицо,
	              	|	ДанныеКонтрагентов.ЭтоИностранныйКонтрагент,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	              	|	ДанныеКонтрагентов.Дата
	              	|ПОМЕСТИТЬ ДанныеКонтрагентов
	              	|ИЗ
	              	|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент,
	              	|	ДанныеКонтрагентов.ИНН,
	              	|	ДанныеКонтрагентов.КПП,
	              	|	ДанныеКонтрагентов.ЭтоЮридическоеЛицо,
	              	|	ДанныеКонтрагентов.ЭтоИностранныйКонтрагент,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	              	|	ДанныеКонтрагентов.Дата,
	              	|	ВЫБОР
	              	|		КОГДА &ПолучатьВсеСостоянияИзРегистра
	              	|			ТОГДА СостоянияКонтрагентов.Состояние
	              	|		ИНАЧЕ ВЫБОР
	              	|				КОГДА СостоянияКонтрагентов.Состояние В (&СостоянияСОшибками)
	              	|					ТОГДА СостоянияКонтрагентов.Состояние
	              	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка)
	              	|			КОНЕЦ
	              	|	КОНЕЦ КАК Состояние
	              	|ИЗ
	              	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
	              	|		ПО ДанныеКонтрагентов.Контрагент = СостоянияКонтрагентов.Контрагент
	              	|			И ДанныеКонтрагентов.ИНН = СостоянияКонтрагентов.ИНН
	              	|			И ДанныеКонтрагентов.КПП = СостоянияКонтрагентов.КПП
	              	|			И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные";
					
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
			"");
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные",
			"");
		
	КонецЕсли;
				  
	Запрос.УстановитьПараметр("ПолучатьВсеСостоянияИзРегистра", ПолучатьВсеСостоянияИзРегистра);
	Запрос.УстановитьПараметр("СостоянияСОшибками", 			ПроверкаКонтрагентовКлиентСерверПовтИсп.ВсеОшибочныеСостоянияКонтрагента(Ложь));
	Запрос.УстановитьПараметр("ДанныеКонтрагентов", 			ДанныеКонтрагентов);
	
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// В результате запроса поле "Дополнительные параметры" было "отрезано",
	// так как оно имеет тип Структура. Здесь мы восстанавливаем это поле.
	ВосстановитьДополнительныеПараметрыДанныхКонтрагентов(ДанныеКонтрагентов, ДополнительныеПараметрыДанныхКонтрагентов);
	
КонецПроцедуры

Функция ДатаСтрокой(Знач Дата)
	
	Результат = Неопределено;
	
	// Для предотвращения ошибки
	// "Неверная дата (ранее 01.01.1991 или позднее текущей даты)".
	ПривестиДатуКЧасовомуПоясуСервераФНС(Дата);
	
	Если ТипЗнч(Дата) = Тип("Строка") Тогда 
		// Дата уже в нужном формате в виде строки.
		// Дата строкой может прийти только при проверке отчета.
		Результат = Дата;
	ИначеЕсли ТипЗнч(Дата) = Тип("Дата") Тогда 
		Результат = Формат(Дата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПривестиДатуКЧасовомуПоясуСервераФНС(Дата)
	
	// Обе даты вычисляем одновременно,
	// чтобы между ними не оказалось сдвига в несколько секунд.
	ТекущаяДатаНаКомпьютере 	= ТекущаяДатаСеанса();
	ТекущаяУниверсальнаяДата 	= ТекущаяУниверсальнаяДата();

	КонтрагентПроверяетсяНаТекущийДень = 
		ТипЗнч(Дата) = Тип("Строка") И Дата = Формат(ТекущаяДатаНаКомпьютере, "ДФ=dd.MM.yyyy")
		ИЛИ ТипЗнч(Дата) = Тип("Дата") И НачалоДня(Дата) = НачалоДня(ТекущаяДатаНаКомпьютере);

	Если КонтрагентПроверяетсяНаТекущийДень Тогда

		РазницаВЧасовыхПоясахСервераФНСИВсемирного	= 3;
		РазницаВЧасовыхПоясахКомпьютераИВсемирного 	= (ТекущаяДатаНаКомпьютере - ТекущаяУниверсальнаяДата)/60/60;
		РазницаВЧасовыхПоясахКомпьютераИСервераФНС 	= РазницаВЧасовыхПоясахКомпьютераИВсемирного - РазницаВЧасовыхПоясахСервераФНСИВсемирного;

		ЧасовойПоясКомпьютераВосточнееСервераФНС 	= РазницаВЧасовыхПоясахКомпьютераИСервераФНС > 0;

		Если ЧасовойПоясКомпьютераВосточнееСервераФНС Тогда

			РазницаВЧасовыхПоясахВСекундах 	= РазницаВЧасовыхПоясахКомпьютераИСервераФНС*60*60;
			ТекущаяДатаНаСервере 			= ТекущаяДатаНаКомпьютере - РазницаВЧасовыхПоясахВСекундах;

			Дата = НачалоДня(ТекущаяДатаНаСервере);

		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

Функция СостояниеНаОсновеОтветаСервиса(ДанныеКонтрагента, Ответ)
	
	Если Ответ = "0" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС;
	ИначеЕсли Ответ = "1" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП;
	ИначеЕсли Ответ = "3" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС;
	ИначеЕсли Ответ = "4" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентОтсутствуетВБазеФНС;
	ИначеЕсли Ответ = "5" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НеверныйИНН;
	ИначеЕсли Ответ = "6" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НевернаяДлинаИНН;
	ИначеЕсли Ответ = "7" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НевернаяДлинаКПП;
	ИначеЕсли Ответ = "8" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НедопустимыеСимволыВИНН;
	ИначеЕсли Ответ = "9" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НедопустимыеСимволыВКПП;
	ИначеЕсли Ответ = "10" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.ИПНеМожетИметьКПП;
	ИначеЕсли Ответ = "11" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НекорректныйФорматДаты;
	ИначеЕсли Ответ = "12" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.НевернаяДата;
	КонецЕсли;
		
	Возврат Состояние;
	
КонецФункции

Процедура ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры = Неопределено)
	
	// Выбираем контрагентов, которых нет в регистре сведений.
	Запрос = Новый Запрос;
	Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	&ИмяПоляИНН КАК ИНН,
		|	&ИмяПоляКПП КАК КПП,
		|	&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
		|	ЛОЖЬ КАК ЭтоИностранныйКонтрагент,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(&ИмяПоляИНН, 12, 1) <> """"
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоЮридическоеЛицо,
		|	&Дата КАК Дата
		|ИЗ
		|	#СправочникКонтрагентов КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
		|		ПО Контрагенты.Ссылка = СостоянияКонтрагентов.Контрагент
		|ГДЕ
		|	СостоянияКонтрагентов.Состояние ЕСТЬ NULL 
		|	И &УсловиеНаГруппу
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка,
		|	&ИмяПоляИНН,
		|	&ИмяПоляКПП,
		|	&ОбластьДанныхВспомогательныеДанные,
		|	ЛОЖЬ КАК ЭтоИностранныйКонтрагент,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(&ИмяПоляИНН, 12, 1) <> """"
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоЮридическоеЛицо,
		|	&Дата
		|ИЗ
		|	#СправочникКонтрагентов КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
		|		ПО Контрагенты.Ссылка = СостоянияКонтрагентов.Контрагент
		|ГДЕ
		|	СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка)
		|	И &УсловиеНаГруппу";
		
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Текст = СтрЗаменить(
			Текст,
			"&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
		
	КонецЕсли;

	СвойстваСправочника = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	
	Если СправочникКонтрагентовИерархический() Тогда
		УсловиеНаГруппу = "	Контрагенты.ЭтоГруппа = ЛОЖЬ";
	Иначе
		УсловиеНаГруппу = " Истина";
	КонецЕсли;
	
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		РазмерПорции = 1000;
		ОграничениеНаКоличество = "РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=0");
	Иначе
		ОграничениеНаКоличество = "РАЗЛИЧНЫЕ";
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, "РАЗЛИЧНЫЕ", ОграничениеНаКоличество);
	Текст = СтрЗаменить(Текст, "&ИмяПоляИНН", "Контрагенты." + СвойстваСправочника.ИНН);
	Текст = СтрЗаменить(Текст, "&ИмяПоляКПП", "Контрагенты." + СвойстваСправочника.КПП);
	Текст = СтрЗаменить(Текст, "#СправочникКонтрагентов", "Справочник." + СвойстваСправочника.Имя);
	Текст = СтрЗаменить(Текст, "&УсловиеНаГруппу", УсловиеНаГруппу);
	
	Запрос.Текст = Текст;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Запрос.УстановитьПараметр("ОбластьДанныхВспомогательныеДанные", МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Прерываем обновление, если не осталось необработанных данных.
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		Параметры.ОбработкаЗавершена = ДанныеКонтрагентов.Количество() = 0;
		Если Параметры.ОбработкаЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеКонтрагентов.Количество() > 0 Тогда
		
		ДанныеКонтрагентов.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ЭтоПроверкаСправочника", Истина);
		ПроверитьВебСервисомФНС(ДанныеКонтрагентов, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов, Состояния = Неопределено)
	
	// Соединяем результаты проверки с исходной таблицей.
	Запрос = Новый Запрос;
	Если ПроверяемыеКонтрагенты.Колонки.Найти("Состояние") <> Неопределено Тогда
		ПроверяемыеКонтрагенты.Колонки.Удалить("Состояние");
	КонецЕсли;
	
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		ПроверяемыеКонтрагенты,
		Запрос, 
		"ПроверяемыеКонтрагенты",
		,
		"ДополнительныеПараметры");
		
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		ДанныеКонтрагентов,
		Запрос,
		"ДанныеКонтрагентов",
		,
		"ДополнительныеПараметры");
	
	// По всем контрагентам определяем состояние.
	// В таблице оставляем только контрагентов с ошибками.
	Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		| 	&ВыбираемыеПоля, 
		| 	ДанныеКонтрагентов.Состояние КАК Состояние
		|ИЗ 
		|	ПроверяемыеКонтрагенты КАК ПроверяемыеКонтрагенты
		|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеКонтрагентов КАК ДанныеКонтрагентов
		|	ПО ПроверяемыеКонтрагенты.Контрагент = ДанныеКонтрагентов.Контрагент
		|		И ПроверяемыеКонтрагенты.ИНН = ДанныеКонтрагентов.ИНН
		|		И ПроверяемыеКонтрагенты.КПП = ДанныеКонтрагентов.КПП
		|		И (НАЧАЛОПЕРИОДА(ПроверяемыеКонтрагенты.Дата, День) = НАЧАЛОПЕРИОДА(ДанныеКонтрагентов.Дата, День)
		|		ИЛИ НАЧАЛОПЕРИОДА(ПроверяемыеКонтрагенты.Дата, День) = ДатаВремя(1,1,1)
		|		ИЛИ НАЧАЛОПЕРИОДА(ПроверяемыеКонтрагенты.Дата, День) > &ТекущаяДата
		|		И НАЧАЛОПЕРИОДА(ДанныеКонтрагентов.Дата, День) = &ТекущаяДата)";
		
	Если Состояния <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			|
			|ГДЕ
			|	ДанныеКонтрагентов.Состояние В (&Состояния)";
		
		Запрос.УстановитьПараметр("Состояния", Состояния);
	КонецЕсли;
	
	// Имена выбираемых колонок собираются программно.
	ВыбираемыеПоля 	= ПредставлениеКолонок(ПроверяемыеКонтрагенты, "ПроверяемыеКонтрагенты.",, "ДополнительныеПараметры");
	Запрос.Текст 	= СтрЗаменить(Запрос.Текст, "&ВыбираемыеПоля", ВыбираемыеПоля);
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
		
	ПроверяемыеКонтрагенты = Запрос.Выполнить().Выгрузить();
	ПроверяемыеКонтрагенты.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	ДобавитьИндексыТаблицыДанныеКонтрагента(ПроверяемыеКонтрагенты);
	
КонецПроцедуры

Процедура ЗаполнитьСостоянияВДокументе(ПроверяемыеКонтрагенты, ДанныеКонтрагентов)
	
	Если ПроверяемыеКонтрагенты.Колонки.Найти("Состояние") <> Неопределено Тогда
		ПроверяемыеКонтрагенты.ЗаполнитьЗначения(
			Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка(), 
			"Состояние");
	КонецЕсли;
		
	Для каждого ПроверяемыйКонтрагент Из ПроверяемыеКонтрагенты Цикл
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Контрагент",	ПроверяемыйКонтрагент.Контрагент);
		ДополнительныеПараметры.Вставить("ИНН", 		ПроверяемыйКонтрагент.ИНН);
		ДополнительныеПараметры.Вставить("КПП", 		ПроверяемыйКонтрагент.КПП);
		
		ДанныеКонтрагента = ДанныеКонтрагентов.НайтиСтроки(ДополнительныеПараметры);
		
		Для каждого СтрокаДанныхКонтрагента Из ДанныеКонтрагента Цикл
			
			ДатаВДокументе 				= НачалоДня(ПроверяемыйКонтрагент.Дата);
			НачалоСегодняшнегоДня 		= НачалоДня(ТекущаяДатаСеанса());
			ДатаНаКоторуюПроверялось	= НачалоДня(СтрокаДанныхКонтрагента.Дата);
			
			ДатыСовпадают 	= ДатаВДокументе = ДатаНаКоторуюПроверялось;
			ДатаПустая		= ДатаВДокументе = Дата(1,1,1);
			ДатаДокументаБольшеТекущей = ДатаВДокументе > НачалоСегодняшнегоДня
				И ДатаНаКоторуюПроверялось = НачалоСегодняшнегоДня;
			
			Если ДатыСовпадают ИЛИ ДатаПустая ИЛИ ДатаДокументаБольшеТекущей Тогда
				ПроверяемыйКонтрагент.Состояние = СтрокаДанныхКонтрагента.Состояние;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(Таблица, Запрос, ИмяВременнойТаблицы, ПостфиксСинонима = "", ИсключаяКолонки = "")
	
	ПредставлениеКолонок = ПредставлениеКолонок(Таблица, , , ИсключаяКолонки);
	
	Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ 
		| " + ПредставлениеКолонок + "
		| ПОМЕСТИТЬ " + ИмяВременнойТаблицы + "
		| ИЗ &" + ИмяВременнойТаблицы + " КАК " + ИмяВременнойТаблицы + ";
		|//////////////////////////////////////////////////////////////////////////////////////////////////";
	
	Запрос.УстановитьПараметр(ИмяВременнойТаблицы, Таблица);
	
КонецПроцедуры

Функция ПредставлениеКолонок(Таблица, СинонимТаблицы = "", ПостфиксСинонима = "", ИсключаяКолонки = "")
	
	МассивКолонокКИсключению = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаяКолонки, ",", Истина, Истина);
	
	КолонкиИсходнойТаблицы = Новый Массив;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		
		Если МассивКолонокКИсключению.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля     = СинонимТаблицы + Колонка.Имя;
		СинонимПоля = Колонка.Имя + ПостфиксСинонима;
		
		КолонкиИсходнойТаблицы.Добавить(ИмяПоля + " КАК " + СинонимПоля);
		
	КонецЦикла;
	
	ПредставлениеКолонок = СтрСоединить(КолонкиИсходнойТаблицы, "," + Символы.ПС);
	Возврат ПредставлениеКолонок;
	
КонецФункции

// Получение имени реквизита документа по имени реквизита формы.
Функция ИмяРеквизита(Форма, ИмяЭлемента)
	
	Если ИмяЭлемента = "" Тогда
		
		ИмяРеквизита = "";
		
	Иначе
	
		Элемент = Форма.Элементы[ИмяЭлемента];
		ПутьКДанным = Элемент.ПутьКДанным;
		
		// Из пути к данным получаем имя реквизита.
		МассивПодстрок = СтрРазделить(ПутьКДанным, ".", Ложь);
		
		КоличествоПодстрок = МассивПодстрок.Количество();
		ИмяРеквизита = МассивПодстрок[КоличествоПодстрок - 1];
		
	КонецЕсли;
	
	Возврат ИмяРеквизита;
	
КонецФункции

Функция ОпределитьНедействующихКонтрагентовВОтчете(ПроверяемыеКонтрагенты)
	
	// Подготавливаем данные для проверки.
	ДанныеКонтрагентов = ПроверяемыеКонтрагенты.Скопировать();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДобавитьКолонкуОбластьДанных(ДанныеКонтрагентов);
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ДанныеКонтрагентов.ЗаполнитьЗначения(МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ОбластьДанныхВспомогательныеДанные");
	КонецЕсли;
	
	// Удаляем пустую колонку из исходной таблицы.
	Если ПроверяемыеКонтрагенты.Колонки.Найти("Состояние") <> Неопределено Тогда
		ПроверяемыеКонтрагенты.Колонки.Удалить("Состояние");
	КонецЕсли;
	
	// Проверка веб-сервисом ФНС
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоПроверкаОтчета", Истина);
	
	ПроверитьВебСервисомФНС(ДанныеКонтрагентов, ДополнительныеПараметры);
	
	ЕстьДоступКВебСервисуФНС = ДополнительныеПараметры.ЕстьДоступКВебСервисуФНС
		И НЕ ЕстьНепроверенныеКонтрагенты(ДанныеКонтрагентов);
		
	// Копируем полученные состояния в исходную таблицу.
	Состояния = ПроверкаКонтрагентовКлиентСерверПовтИсп.НекорректныеСостоянияКонтрагента();
	ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов, Состояния);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеКонтрагентов", 		ПроверяемыеКонтрагенты);
	Результат.Вставить("ЕстьДоступКВебСервисуФНС",	ЕстьДоступКВебСервисуФНС);
	
	Возврат Результат; 
	
КонецФункции

Функция СправочникКонтрагентовИерархический()
	
	СвойстваСправочника = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	Возврат Метаданные.Справочники[СвойстваСправочника.Имя].Иерархический;
	
КонецФункции

// Нужно показать предложение включить проверку контрагентов.
// 		Определяет, нужно ли показывать предложение на включение проверки с учетом следующего:
// 		1. Что есть право на использование или настройку проверки.
// 		2. Что проверка еще не включена.
// 		3. Что пользователь не нажал кнопку "БольшеНеПоказывать".
// 		4. Что с момента последнего отображения предложения уже прошло определенное время.
// Возвращаемое значение:
// Булево - Истина, если предложение нужно показывать.
//
Функция НужноПоказатьПредложениеВключитьПроверкуКонтрагентов()
	
	НужноПоказатьПредложение =
		// В модели сервисов предложение не показываем.
		НЕ ОбщегоНазначения.РазделениеВключено()
		// Проверяем наличие прав
		И (ЕстьПравоНаИспользованиеПроверки() 
		ИЛИ ЕстьПравоНаРедактированиеНастроек()) 
		// Определяем, включен ли сервис.
		И ПроверкуНикогдаНеВключали()
		// Проверяем, не нажал ли пользователь кнопку "Больше не показывать" в предложении на включение сервиса.
		И НЕ БольшеНеПоказыватьПредложениеПодключиться()
		// Проверяем, давно ли в последний раз показывалось предложение на включение сервиса.
		И ПоследнееОтображениеПредложенияНаВключениеСервисаБылоДавно();
	
	Возврат НужноПоказатьПредложение;

КонецФункции

Функция ПоследнееОтображениеПредложенияНаВключениеСервисаБылоДавно()
	
	ЧетыреЧаса = 60*60*4;
	ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ПроверкаКонтрагентов", "ПроверкаКонтрагентов_ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса");
	
	// Предложение включить сервис не показывалось вообще,
	// либо с момента последнего отображения предупреждения уже прошло 4 часа.
	ПредложениеПоказывалосьДавно = ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса = Неопределено 
		ИЛИ ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса + ЧетыреЧаса < ТекущаяДатаСеанса();
	
	Возврат ПредложениеПоказывалосьДавно;
	
КонецФункции

Функция ЕстьНепроверенныеКонтрагенты(ДанныеКонтрагентов)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка());
	
	КоличествоКонтрагентовСПустымСостоянием = ДанныеКонтрагентов.НайтиСтроки(Отбор).Количество();
	
	Возврат КоличествоКонтрагентовСПустымСостоянием <> 0;
	
КонецФункции

#КонецОбласти

#Область ШаблоныИЗаполнениеТаблиц

// Шаблон таблицы, используемой для передачи данных в веб-сервис ФНС.
// Возвращаемое значение:
// ТаблицаЗначений - пустая таблица с колонками "Контрагент", "ИНН", "КПП", "Дата", "Состояние", "ДополнительныеПараметры"
//                   "ОбластьДанныхВспомогательныеДанные"(если есть подсистема РаботаВМоделиСервиса).
Функция ШаблонТаблицыДанныеКонтрагента()
	
	// Создаем таблицу
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	
	СвойстваСправочника = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	Тип = "СправочникСсылка." + СвойстваСправочника.Имя;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	МассивТипов.Добавить(Тип("Null"));
	ТипБулевоИНеопределено = Новый ОписаниеТипов(МассивТипов);
	
	// Проверяемый контрагент
	ДанныеКонтрагентов.Колонки.Добавить("Контрагент", 				Новый ОписаниеТипов(Тип));
	ДанныеКонтрагентов.Колонки.Добавить("ИНН", 						Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	ДанныеКонтрагентов.Колонки.Добавить("КПП", 						Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	ДанныеКонтрагентов.Колонки.Добавить("ЭтоЮридическоеЛицо", 		ТипБулевоИНеопределено);
	ДанныеКонтрагентов.Колонки.Добавить("ЭтоИностранныйКонтрагент", ТипБулевоИНеопределено);
	// Дата, на которую выполняется проверка контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Дата", 					Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	// Дополнительные сведения о контрагенте.
	ДанныеКонтрагентов.Колонки.Добавить("ДополнительныеПараметры", 	Новый ОписаниеТипов("Структура"));
	// Результат проверки контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Состояние", 				Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСуществованияКонтрагента"));
	// Область данных
	ДобавитьКолонкуОбластьДанных(ДанныеКонтрагентов);
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Функция ШаблонТаблицыДанныеКонтрагентаДляДокумента()
	
	// Создаем таблицу
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	// Ссылка на документ, которому соответствует строка таблицы.
	ДанныеКонтрагентов.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());

	Возврат ДанныеКонтрагентов;
	
КонецФункции

Функция ШаблонТаблицыДанныеКонтрагентаДляОтчета()
	
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();

	ДанныеКонтрагентов.Колонки.Добавить("НомерРаздела", 				ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеКонтрагентов.Колонки.Добавить("СтрокаТабличногоДокумента", 	ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	ДанныеКонтрагентов.Индексы.Добавить("НомерРаздела");
	
	Возврат ДанныеКонтрагентов;

КонецФункции

Процедура ДобавитьСтрокуВДанныеКонтрагентовВДокументе(
	Ссылка,
	ДанныеКонтрагентов, 
	Контрагент, 
	Дата,
	Состояние = Неопределено)
	
	// Добавляем в таблицу только разрешенных контрагентов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	&ИмяПоляИНН КАК ИНН,
		|	&ИмяПоляКПП КАК КПП
		|ИЗ
		|	#СправочникКонтрагентов КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент";
		
	СвойстваСправочника = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоляИНН", "Контрагенты." + СвойстваСправочника.ИНН);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоляКПП", "Контрагенты." + СвойстваСправочника.КПП);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#СправочникКонтрагентов", "Справочник." + СвойстваСправочника.Имя);
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ДанныеКонтрагента = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеКонтрагента.Следующий() Цикл
	
		СтрокаОписания = ДанныеКонтрагентов.Добавить();
		СтрокаОписания.Ссылка			= Ссылка;
		СтрокаОписания.Контрагент		= Контрагент;
		СтрокаОписания.Дата				= Дата;
		СтрокаОписания.Состояние		= Состояние;
		
		СтрокаОписания.ИНН				= ДанныеКонтрагента.ИНН;
		СтрокаОписания.КПП				= ДанныеКонтрагента.КПП;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ШаблонТаблицыОписания()
	
	Описание = Новый ТаблицаЗначений();
	
	// ДокументСсылка - Документ-основание или счет-фактура. 
	// Если описывается счет-фактура, находящаяся в подвале документа, то указывается ссылка на счет-фактуру.
	Описание.Колонки.Добавить("Ссылка");
	// Дата, на которую должна выполняться проверка контрагента.
	Описание.Колонки.Добавить("Дата");
	// Элемент формы - поле контрагента или счета-фактуры, в котором отображается результат проверки контрагента.
	Описание.Колонки.Добавить("Элемент");
	// Элемент формы - группа, которая должна выделятся цветом, в зависимости от результата проверки контрагента.
	// Может быть пустой, тогда выделения фона цветом не будет.
	Описание.Колонки.Добавить("ЭлементРодитель");
	// СправочникСсылка - проверяемый контрагент.
	Описание.Колонки.Добавить("Контрагент");
	// Перечисления.СостоянияСуществованияКонтрагента - состояние контрагента.
	Описание.Колонки.Добавить("СостояниеКонтрагента");
	
	Возврат Описание;
	
КонецФункции

Функция ШаблонТаблицыОписанияТабличныхЧастей()
	
	Описание = Новый ТаблицаЗначений();
	
	// Имя таблицы формы, в которой располагается проверяемый контрагент.
	Описание.Колонки.Добавить("ИмяТаблицыФормы");
	// Имя табличной части документа, в которой располагается проверяемый контрагент.
	Описание.Колонки.Добавить("ИмяТабличнойЧасти");
	// Имя колонки таблицы формы, в которой находится контрагент.
	Описание.Колонки.Добавить("ИмяПоляСКонтрагентом");
	// Имя колонки табличной части документа, в которой находится контрагент.
	Описание.Колонки.Добавить("ИмяКолонкиСКонтрагентом");
	Описание.Колонки.Добавить("КонтрагентСкрытФункциональнойОпцией");
	// Имя колонки таблицы формы, в которой находится дата, на которую необходимо выполнять проверку.
	// Может быть пустой, если в табличной части нет даты.
	Описание.Колонки.Добавить("ИмяПоляСДатой");
	// Имя колонки табличной части документа, в которой находится дата, на которую необходимо выполнять проверку.
	// Может быть пустой, если в табличной части нет даты.
	Описание.Колонки.Добавить("ИмяКолонкиСДатой");
	
	Возврат Описание;
	
КонецФункции

Функция ШаблонТаблицыОписанияКонтрагентовВСчетеФактуре()
	
	Описание = Новый ТаблицаЗначений();
	
	// Имя реквизита документа, содержащего контрагента.
	Описание.Колонки.Добавить("ИмяРеквизита");
	// Имя реквизита формы, содержащего состояние контрагента.
	Описание.Колонки.Добавить("ИмяРеквизитаССостоянием");
	
	Возврат Описание;
	
КонецФункции

Процедура ДополнитьОписаниеКонтрагентовВСчетеФактуре(
		Описание, 
		ИмяРеквизита, 
		ИмяРеквизитаССостоянием)
	
	СтрокаОписания = Описание.Добавить();
	// Имя реквизита документа, содержащего контрагента.
	СтрокаОписания.ИмяРеквизита				= ИмяРеквизита;
	// Имя реквизита формы, содержащего состояние контрагента.
	СтрокаОписания.ИмяРеквизитаССостоянием	= ИмяРеквизитаССостоянием;
	
КонецПроцедуры

Функция ОписаниеКонтрагентовВСчетеФактуре(Тип)
	
	ИменаРеквизитовКонтрагентов = Новый Массив;
	РаботаСКонтрагентамиПереопределяемый.ПолучитьИменаРеквизитовКонтрагентовВСчетеФактуре(Тип, ИменаРеквизитовКонтрагентов);
	
	Описание = ШаблонТаблицыОписанияКонтрагентовВСчетеФактуре();
	
	Для каждого ИмяРеквизитаКонтрагента Из ИменаРеквизитовКонтрагентов Цикл
		ДополнитьОписаниеКонтрагентовВСчетеФактуре(
			Описание,
			ИмяРеквизитаКонтрагента, 
			ИмяРеквизитаСостоянияКонтрагентаВСчетеФактуре(ИмяРеквизитаКонтрагента));
			
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеТабличныхЧастей(Форма)
	
	Описание = ШаблонТаблицыОписанияТабличныхЧастей();
	РаботаСКонтрагентамиПереопределяемый.СформироватьОписаниеДокументовСТабличнымиЧастями(Форма, Описание);
	
	// Преобразование в массив структур.
	Описание = ОбщегоНазначения.ТаблицаЗначенийВМассив(Описание);
	
	Возврат Описание;
	
КонецФункции

Процедура ДобавитьКолонкуОбластьДанных(Таблица)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") 
		И Таблица.Колонки.Найти("ОбластьДанныхВспомогательныеДанные") = Неопределено Тогда
		Таблица.Колонки.Добавить("ОбластьДанныхВспомогательныеДанные", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИндексыТаблицыДанныеКонтрагента(Таблица)

	Таблица.Индексы.Добавить("Контрагент, ИНН, КПП, Дата");
	
	Если Таблица.Колонки.Найти("НомерРаздела") <> Неопределено Тогда
		Таблица.Индексы.Добавить("НомерРаздела");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВДокументах

Процедура ОчиститьРезультатПроверкиВДокументе(Форма)
	
	ОчиститьРезультатыПредыдущихПроверок(Форма, Неопределено);
	ПрорисоватьСостоянияКонтрагентовВДокументе(
		Форма, 
		Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаВыполнена);
	
КонецПроцедуры
	
Функция ДанныеКонтрагентовВДокументеДляПроверкиФоновымЗаданием(Форма, ПараметрыФоновогоЗадания)
	
	// При отключенной автоматической проверке инициализация при открытии документа не выполняется
	// для того, чтобы ускорить открытие документа.
	// Поэтому инициализация выполняется сейчас непосредственно перед проверкой.
	Если НЕ Форма.РеквизитыПроверкиКонтрагентов.ИнициализацияВыполненаПолностью Тогда
		// Принудительная инициализация.
		ИнициализироватьРеквизитыПроверкиКонтрагентовВДокументе(Форма, Истина);
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоПроверкаКонтрагентовПриОткрытии = Ложь;
		УправлениеФормойДокументаПриИнициализации(Форма);
	КонецЕсли;
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоПроверкаПоКнопке Тогда
		ОчиститьРезультатПроверкиВДокументе(Форма);
	КонецЕсли;
		
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоПроверкаКонтрагентовПриОткрытии
		И Форма.РеквизитыПроверкиКонтрагентов.Свойство("АдресДанныхКонтрагентовПриОткрытии")
		И ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовПриОткрытии) Тогда
		
		// При открытии данные и так пустые, очищать их не нужно.
		ДанныеКонтрагентов = ПолучитьИзВременногоХранилища(
			Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовПриОткрытии);
		Форма.РеквизитыПроверкиКонтрагентов.Удалить("АдресДанныхКонтрагентовПриОткрытии");
		
	Иначе
		
		ОчиститьРезультатыПредыдущихПроверок(Форма, ПараметрыФоновогоЗадания);
		ДанныеКонтрагентов = ДанныеКонтрагентовВДокументе(Форма);
		
	КонецЕсли;
	
	// Заполняем данные проверяемых контрагентов.
	ДанныеКонтрагентов.ЗаполнитьЗначения(Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка(), "Состояние");
	
	Возврат ДанныеКонтрагентов;

КонецФункции
	
Процедура ИнициализироватьРеквизитыПроверкиКонтрагентовВДокументе(Форма, ЭтоПринудительнаяИнициализация = Ложь)
	
	Если Форма.РеквизитыПроверкиКонтрагентов = Неопределено Тогда
		Форма.РеквизитыПроверкиКонтрагентов = Новый Структура;
	КонецЕсли;
	
	Если НЕ Форма.РеквизитыПроверкиКонтрагентов.Свойство("ПроверкаИспользуется") Тогда
		ПроверкаИспользуется = ПроверкаКонтрагентовВызовСервераПовтИсп.ИспользованиеПроверкиВозможно();
		// Включена ли проверка и есть ли доступ на использование проверки.
		Форма.РеквизитыПроверкиКонтрагентов.Вставить("ПроверкаИспользуется", 	ПроверкаИспользуется);
	КонецЕсли;
	
	Если НЕ Форма.РеквизитыПроверкиКонтрагентов.Свойство("НужноПоказатьПредложениеВключитьПроверкуКонтрагентов") Тогда
		ДобавитьРеквизитПроверкиКонтрагентов(
			Форма, 
			"НужноПоказатьПредложениеВключитьПроверкуКонтрагентов", 
			НЕ Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется И НужноПоказатьПредложениеВключитьПроверкуКонтрагентов());
	КонецЕсли;
	
	// Служебный реквизит для работы фонового задания.
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "АдресХранилища", 			Неопределено);

	// Служебный реквизит для работы фонового задания.
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "ИдентификаторЗадания", 	Новый УникальныйИдентификатор);
	
	// Служебный реквизит для работы фонового задания.
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "ЗаданиеВыполнено", 		Истина);
	
	// Результат проверки контрагентов в документе. Содержит ли документ некорректных контрагентов.
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "ЭтоДокументСОшибкой", 		Ложь);

	// Реквизит, предназначенный для определения необходимости перерисовывать список
	// после проверки контрагентов.
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "ЭтотДокументБылСОшибкой", 	Ложь);

	// Результат проверки контрагентов в документе. Итоговое состояние контрагентов в документе.
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "СостояниеКонтрагентов", 	Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка());
	
	// Позволяет не прорисовывать результат проверки контрагентов, 
	// если начато редактирование табличной части документа.
	// Позволяет избежать ошибки сброса редактируемого значений при выводе результатов проверки.
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "ОтложитьПрорисовкуРезультатаПроверкиКонтрагентов", Ложь);
	
	// Служебный реквизит
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "АдресДанныхКонтрагентовИзКэша", 		Неопределено);
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "СохранятьРезультатСразуПослеПроверки", Истина);
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "ЭтоПроверкаКонтрагентовПриОткрытии", 	Ложь);
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "АдресДанныхКонтрагентовПриОткрытии", 	Неопределено);
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "УникальныйИдентификаторФормы", 		Форма.УникальныйИдентификатор);
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "ЭтоПроверкаПоКнопке", 					Ложь);
	
	ДобавитьРеквизитПроверкиКонтрагентов(Форма, "ИнициализацияВыполненаПолностью", Ложь);

	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется
		ИЛИ ЭтоПринудительнаяИнициализация Тогда
		
		Форма.РеквизитыПроверкиКонтрагентов.Вставить("ИнициализацияВыполненаПолностью", Истина);

		ВидДокумента = ПроверкаКонтрагентовКлиентСервер.ВидДокумента(Форма);
		
		ЭтоДокументСКонтрагентомВШапке = 
			ВидДокумента.Свойство("КонтрагентНаходитсяВШапке") 
			И ВидДокумента.КонтрагентНаходитсяВШапке;
			
		ЭтоДокументСКонтрагентомВТабличнойЧасти = 
			ВидДокумента.Свойство("КонтрагентНаходитсяВТабличнойЧасти") 
			И ВидДокумента.КонтрагентНаходитсяВТабличнойЧасти;
			
		ЭтоДокументСоСчетомФактуройВПодвале = 
			ВидДокумента.Свойство("СчетФактураНаходитсяВПодвале") 
			И ВидДокумента.СчетФактураНаходитсяВПодвале;
			
		ЭтоСчетФактура = 
			ВидДокумента.Свойство("ЯвляетсяСчетомФактурой") 
			И ВидДокумента.ЯвляетсяСчетомФактурой;
		
		Форма.РеквизитыПроверкиКонтрагентов.Вставить("ЭтоДокументСКонтрагентомВШапке", 				ЭтоДокументСКонтрагентомВШапке);
		Форма.РеквизитыПроверкиКонтрагентов.Вставить("ЭтоДокументСКонтрагентомВТабличнойЧасти", 	ЭтоДокументСКонтрагентомВТабличнойЧасти);
		Форма.РеквизитыПроверкиКонтрагентов.Вставить("ЭтоДокументСоСчетомФактуройВПодвале", 		ЭтоДокументСоСчетомФактуройВПодвале);
		Форма.РеквизитыПроверкиКонтрагентов.Вставить("ЭтоСчетФактура", 								ЭтоСчетФактура);
		
		Если ЭтоДокументСКонтрагентомВШапке Тогда
			// Результат проверки контрагента в шапке документа.
			Форма.РеквизитыПроверкиКонтрагентов.Вставить(
				"СостояниеКонтрагента", 
				Перечисления.СостоянияПроверкиКонтрагентов.ПустаяСсылка());
		КонецЕсли;
		
		// Результат проверки контрагентов в счете-фактуре.
		Если ЭтоДокументСоСчетомФактуройВПодвале ИЛИ ЭтоСчетФактура Тогда
			
			// Итоговое состояние контрагентов в счете-фактуре.
			Форма.РеквизитыПроверкиКонтрагентов.Вставить(
				"СостояниеКонтрагентовВСчетеФактуре", 	
				Перечисления.СостоянияПроверкиКонтрагентов.ПустаяСсылка());
				
			// Итоговое состояние счета-фактуры.
			Форма.РеквизитыПроверкиКонтрагентов.Вставить(
				"ЭтоСчетФактураСОшибкой", 
				Ложь);
				
		КонецЕсли;
		
		Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
			Форма.РеквизитыПроверкиКонтрагентов.Вставить("ОписаниеТабличныхЧастей", ОписаниеТабличныхЧастей(Форма));
		КонецЕсли;
		
		Если ЭтоСчетФактура Тогда
			
			// Состояния проверки каждого контрагента в счете-фактуре.
			Описание = ШаблонТаблицыОписания();
			РаботаСКонтрагентамиПереопределяемый.СформироватьОписаниеСчетовФактур(Форма, Описание);
			
			Для Каждого СтрокаОписания Из Описание Цикл
				
				ИмяРеквизитаСчетаФактуры 	= ИмяРеквизита(Форма, СтрокаОписания.Элемент.Имя);
				Свойство 					= ИмяРеквизитаСостоянияКонтрагентаВСчетеФактуре(ИмяРеквизитаСчетаФактуры);
				
				Форма.РеквизитыПроверкиКонтрагентов.Вставить(Свойство, Перечисления.СостоянияПроверкиКонтрагентов.ПустаяСсылка());
					
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Доопределение реквизитов потребителем.
	РаботаСКонтрагентамиПереопределяемый.ДополнитьРеквизитыФормыДокумент(Форма, Форма.РеквизитыПроверкиКонтрагентов);
	
КонецПроцедуры

Процедура ДобавитьРеквизитПроверкиКонтрагентов(Форма, НовыйРеквизит, ЗначениеНовогоРеквизита)
	
	Если Не Форма.РеквизитыПроверкиКонтрагентов.Свойство(НовыйРеквизит) Тогда
		Форма.РеквизитыПроверкиКонтрагентов.Вставить(НовыйРеквизит, ЗначениеНовогоРеквизита);
	КонецЕсли;

КонецПроцедуры
 

Процедура УстановитьУсловноеОформлениеСпискаДокументов(Список)
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.УстановитьУсловноеОформлениеСпискаДокументов(Список, СтандартнаяОбработка);
	
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Оформление = Список.УсловноеОформление.Элементы.Добавить();
	Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СодержитНекорректныхКонтрагентов");
	Отбор.ПравоеЗначение = Истина;
	ЦветФона = Оформление.Оформление.Элементы.Найти("ЦветФона");
	Цвета = ПроверкаКонтрагентовВызовСервераПовтИсп.ЦветаРезультатовПроверки(); 
	ЦветФона.Значение = Цвета.ЦветФонаДокументаСНекорректнымиКонтрагентамиВСпискеДокументов;
	ЦветФона.Использование = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыДинамическогоСписка(Список)
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"ИспользованиеПроверкиВозможно", 
		ЕстьПравоНаИспользованиеПроверки());
	
КонецПроцедуры

Процедура ЗапомнитьНаличиеНекорректныхКонтрагентов(Форма)
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактура Тогда
		
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактураСОшибкой = 
			ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоНекорректноеСостояниеКонтрагента(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентов);
		
	Иначе
		
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСОшибкой = ЭтоДокументСОшибкой(Форма);
		
		Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСоСчетомФактуройВПодвале Тогда
			Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактураСОшибкой = 
				ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоНекорректноеСостояниеКонтрагента(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентовВСчетеФактуре);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеКонтрагентовВДокументе(Форма)
	
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагентаДляДокумента();
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ИнициализацияВыполненаПолностью Тогда

		Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактура Тогда
			
			// Определение объекта и ссылки.
			ОбъектИСсылкаПоФорме = ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
			ДокументОбъект       = ОбъектИСсылкаПоФорме.Объект;
			
			ЗаполнитьДанныеКонтрагентовВСчетеФактуре(ДокументОбъект, ДанныеКонтрагентов);
		Иначе
			
			// Заполняем данные по контрагенту из документа-основания.
			Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВШапке Тогда
				ЗаполнитьДанныеКонтрагентовВДокументеОсновании(Форма, ДанныеКонтрагентов);
			КонецЕсли;
			
			// Заполняем данные по контрагенту из счета-фактуры.
			Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСоСчетомФактуройВПодвале Тогда
				
				СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
				Если ЗначениеЗаполнено(СчетФактура) Тогда
					ЗаполнитьДанныеКонтрагентовВСчетеФактуре(СчетФактура, ДанныеКонтрагентов);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполняем данные по контрагентам из табличных частей.
		Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
			ЗаполнитьДанныеКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ДанныеКонтрагентов.ЗаполнитьЗначения(МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ОбластьДанныхВспомогательныеДанные");
	КонецЕсли;
	
	Возврат ДанныеКонтрагентов;

КонецФункции

Процедура ЗапомнитьРезультатПроверкиКонтрагентовВДокументе(Форма, ДанныеКонтрагентов)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	Описание = ОписаниеДокументов(Форма);
	
	// Если контрагент в шапке
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВШапке Тогда
				
		СтрокиПоДокументу = Описание.НайтиСтроки(Новый Структура("Ссылка", ДокументСсылка));
		Для каждого СтрокаОписания Из СтрокиПоДокументу Цикл
			
			Дата = ДатаВДокументе(ДокументОбъект);
			
			Отбор = Новый Структура("Ссылка, Контрагент, Дата", ДокументСсылка, СтрокаОписания.Контрагент, Дата); 
			ИтоговоеСостояние = ИтоговоеСостояниеКонтрагентаВДокументе(ДанныеКонтрагентов, Отбор);
			Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента = ИтоговоеСостояние.СостояниеКонтрагента;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	// Если есть счет-фактура на форме.
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСоСчетомФактуройВПодвале Тогда
		
		СтандартнаяОбработка = Истина;
		РаботаСКонтрагентамиПереопределяемый.ЗапомнитьРезультатПроверкиКонтрагентовСчетФактурыВДокументе(СтандартнаяОбработка, ДанныеКонтрагентов, Форма);
		
		Если СтандартнаяОбработка Тогда
			СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
			
			Отбор = Новый Структура("Ссылка", СчетФактура); 
			ИтоговоеСостояние = ИтоговоеСостояниеКонтрагентаВДокументе(ДанныеКонтрагентов, Отбор);
			Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентовВСчетеФактуре = ИтоговоеСостояние.СостояниеКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если контрагент в ТЧ
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		ЗапомнитьРезультатПроверкиКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов);
		
	КонецЕсли;
		
	
КонецПроцедуры

Процедура ЗапомнитьРезультатПроверкиКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		// Перебираем все табличные части.
		Для каждого ОписаниеТабличнойЧасти Из Форма.РеквизитыПроверкиКонтрагентов.ОписаниеТабличныхЧастей Цикл
			
			ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
			ИмяКолонкиСКонтрагентом	= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
			
			ТабличнаяЧасть 			= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
			
			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				
				// Определение даты
				Дата 			= ДатаВСтрокеТабличнойЧасти(ДокументОбъект, ОписаниеТабличнойЧасти, СтрокаТабличнойЧасти);
				Контрагент 		= СтрокаТабличнойЧасти[ИмяКолонкиСКонтрагентом];
				
				// В результате проверки контрагента ищем нужного контрагента с нужной датой.
				СтрокиДанныхКонтрагентов = ДанныеКонтрагентов.НайтиСтроки(
					Новый Структура("Контрагент, Дата", Контрагент, Дата));
				
				Для каждого СтрокиДанныхКонтрагента Из СтрокиДанныхКонтрагентов Цикл
						
					СтрокаТабличнойЧасти.Состояние 					= СтрокиДанныхКонтрагента.Состояние;
					СтрокаТабличнойЧасти.ЭтоНекорректныйКонтрагент 	= 
						ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоНекорректноеСостояниеКонтрагента(СтрокиДанныхКонтрагента.Состояние);
						
				КонецЦикла; 

			КонецЦикла;
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПроверкиКонтрагентовВДокументе(Форма, ТекущийОбъект)
	
	ДокументОбъект 	= ТекущийОбъект;
	ДокументСсылка 	= ДокументОбъект.Ссылка; 
	
	ЭтоДокументСКонтрагентомВШапке 			= Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВШапке;
	ЭтоДокументСКонтрагентомВТабличнойЧасти = Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти;
	ЭтоДокументСоСчетомФактуройВПодвале 	= Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСоСчетомФактуройВПодвале;
	ЭтоСчетФактура							= Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактура;
	
	СохраняемоеЗначение = Новый Соответствие;
	
	Если ЭтоДокументСКонтрагентомВШапке ИЛИ ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда 
		// Документ-основание
		Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентов) Тогда
			СохраняемоеЗначение.Вставить(ДокументСсылка, Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСОшибкой);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДокументСоСчетомФактуройВПодвале Тогда 
		// Счет-фактура
		СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
		Если ЗначениеЗаполнено(СчетФактура) И ЗначениеЗаполнено(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентовВСчетеФактуре) Тогда
			СохраняемоеЗначение.Вставить(СчетФактура, Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактураСОшибкой);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоСчетФактура Тогда 
		
		СтандартнаяОбработка = Истина;
		
		РаботаСКонтрагентамиПереопределяемый.СохраняемыеРезультатыПроверкиСчетФактурыВДокументе(СтандартнаяОбработка, СохраняемоеЗначение, Форма);
		
		Если СтандартнаяОбработка Тогда

			Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентов) Тогда
				СохраняемоеЗначение.Вставить(ДокументСсылка, Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактураСОшибкой);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СохраняемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьДанныеКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	Для каждого ОписаниеТабличнойЧасти Из Форма.РеквизитыПроверкиКонтрагентов.ОписаниеТабличныхЧастей Цикл
		
		ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
		ИмяКолонкиСКонтрагентом	= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
		
		ТабличнаяЧасть 			= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
		
		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			
			// Определение даты
			Дата = ДатаВСтрокеТабличнойЧасти(ДокументОбъект, ОписаниеТабличнойЧасти, СтрокаТабличнойЧасти);

			// Заполнение данных контрагента.
			ДополнитьДанныеКонтрагентовВДокументе(
				ДокументСсылка,
				ДанныеКонтрагентов,
				СтрокаТабличнойЧасти[ИмяКолонкиСКонтрагентом],
				Дата,
				СтрокаТабличнойЧасти.Состояние);
		
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКонтрагентовВДокументеОсновании(Форма, ДанныеКонтрагентов)
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВШапке Тогда
		
		// Определение объекта и ссылки.
		ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
		ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
		ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
		
		ДополнитьДанныеКонтрагентовВДокументе(
			ДокументСсылка,
			ДанныеКонтрагентов,
			ДокументОбъект.Контрагент,
			ДатаВДокументе(ДокументОбъект),
			Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРезультатыПредыдущихПроверок(Форма, ДополнительныеПараметры)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	ЭтоДокументСКонтрагентомВШапке 			= Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВШапке; 
	ЭтоДокументСКонтрагентомВТабличнойЧасти = Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти;
	ЭтоДокументСоСчетомФактуройВПодвале 	= Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСоСчетомФактуройВПодвале;
	ЭтоСчетФактура							= Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактура;

	Если ЭтоДокументСКонтрагентомВШапке ИЛИ ЭтоДокументСоСчетомФактуройВПодвале ИЛИ ЭтоСчетФактура Тогда

		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ИзменившаясяТаблица") Тогда
			// Изменилась строка в ТЧ. Ничего делать не нужно.
		Иначе
			
			ПустоеСостояние = Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка();
			
			Если ЭтоСчетФактура Тогда
				
				// Очищаем состояние для каждого контрагента.
				Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(ДокументСсылка));
				Для каждого СтрокаОписания Из Описание Цикл
					Если Форма.РеквизитыПроверкиКонтрагентов.Свойство(СтрокаОписания.ИмяРеквизитаССостоянием) Тогда
						Форма.РеквизитыПроверкиКонтрагентов[СтрокаОписания.ИмяРеквизитаССостоянием] = ПустоеСостояние;
					КонецЕсли;
				КонецЦикла;
				
				// Очищаем итоговое состояние
				Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактураСОшибкой = Ложь;
				
			Иначе
				
				ОчиститьРеквизитФормы(Форма, "СостояниеКонтрагента", 				ПустоеСостояние);
				ОчиститьРеквизитФормы(Форма, "СостояниеКонтрагентовВСчетеФактуре", 	ПустоеСостояние);
				ОчиститьРеквизитФормы(Форма, "ЭтоСчетФактураСОшибкой", 				Ложь);
				ОчиститьРеквизитФормы(Форма, "ЭтоДокументСОшибкой", 				Ложь);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		// Определение объекта и ссылки.
		ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
		ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
		
		// Очищаем состояния в определенной строке.
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ИзменившаясяТаблица") Тогда
			
			// Это передано имя таблицы формы и идентификатор строки.
			СвойстваТаблица = ДополнительныеПараметры.ИзменившаясяТаблица;
			
			Для каждого ОписаниеТабличнойЧасти Из Форма.РеквизитыПроверкиКонтрагентов.ОписаниеТабличныхЧастей Цикл
				
				Если ОписаниеТабличнойЧасти.ИмяТаблицыФормы = СвойстваТаблица.ИмяТаблицы Тогда 
					ТабличнаяЧасть = ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
					СтрокаТабличнойЧасти = ТабличнаяЧасть.НайтиПоИдентификатору(СвойстваТаблица.Идентификатор);
					
					ОчиститьРезультатПроверкиВСтроке(СтрокаТабличнойЧасти);
				КонецЕсли;
				
			КонецЦикла; 
			
		Иначе
			// Очищаем состояния в нескольких строках.
			ОчиститьРезультатПроверкиВСтроках(Форма, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоДокументСКонтрагентомВШапке ИЛИ ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСОшибкой = ЭтоДокументСОшибкой(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРезультатПроверкиВСтроках(Форма, ДополнительныеПараметры)
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ИнициализацияВыполненаПолностью Тогда
		
		// Определение объекта и ссылки.
		ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
		ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
		
		Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
			// Перебираем все табличные части.
			Для каждого ОписаниеТабличнойЧасти Из Форма.РеквизитыПроверкиКонтрагентов.ОписаниеТабличныхЧастей Цикл
				
				ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
				ИмяКолонкиСКонтрагентом	= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
				ИмяКолонкиСДатой		= ОписаниеТабличнойЧасти.ИмяКолонкиСДатой;
				
				ТабличнаяЧасть 			= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
				
				СтрокиТабличнойЧасти = ТабличнаяЧасть;
				Если ДополнительныеПараметры = Неопределено Тогда
					СтрокиТабличнойЧасти = ТабличнаяЧасть;
				ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившийсяСчетФактура") Тогда // Произошла запись счета-фактуры.
					// Очищаем все строки
					СтрокиТабличнойЧасти = ТабличнаяЧасть;
				ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившаясяДата") 
						И ЗначениеЗаполнено(ИмяКолонкиСДатой) Тогда // Изменилась дата в шапке документа.
					// Очищаем строки с пустой датой.
					СтрокиТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(Новый Структура(ИмяКолонкиСДатой, Дата(1,1,1)));
				ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившаясяДата") 
						И НЕ ЗначениеЗаполнено(ИмяКолонкиСДатой) Тогда // Изменилась дата в шапке документа.
					// Если в табличной части нет поля с датой, то очищаем все состояния при изменении даты.
					СтрокиТабличнойЧасти = ТабличнаяЧасть;
				ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившийсяКонтрагент") Тогда // Произошло событие записи контрагента.
					// Очищаем строки с указанным контрагентом.
					Контрагент = ДополнительныеПараметры.ИзменившийсяКонтрагент;
					СтрокиТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(Новый Структура(ИмяКолонкиСКонтрагентом, Контрагент));
				ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившеесяПоле") Тогда // Изменился контрагент в шапке.
					// Ничего делать не нужно
					Возврат;
				Иначе
					СтрокиТабличнойЧасти = ТабличнаяЧасть;
				КонецЕсли;
				
				Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
					 ОчиститьРезультатПроверкиВСтроке(СтрокаТабличнойЧасти);
				КонецЦикла;
						
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРезультатПроверкиВСтроке(Строка)
	
	Строка.Состояние 					= ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка");
	Строка.ЭтоНекорректныйКонтрагент	= Ложь;
	
КонецПроцедуры

Функция ДатаВДокументе(ДокументОбъект)
	
	Дата = Дата(1,1,1);
	РаботаСКонтрагентамиПереопределяемый.ОпределитьДатуВДокументе(ДокументОбъект, Дата);
	
	// Если в документе указана будущая дата, то проверяем
	// контрагентов на текущую дату.
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	Если Дата > ТекущаяДата Тогда
		Дата = ТекущаяДата;
	КонецЕсли;
	
	Возврат НачалоДня(Дата); 
	
КонецФункции

Функция ЭтоДокументСОшибкой(Форма)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
		
	ЭтоДокументСКонтрагентомВШапке 			= Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВШапке;
	ЭтоДокументСКонтрагентомВТабличнойЧасти = Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти;
	
	ЕстьОшибкаВШапке 			= Ложь;
	ЕстьОшибкаВТабличнойЧасти 	= Ложь;
	
	Если ЭтоДокументСКонтрагентомВШапке Тогда
		ЕстьОшибкаВШапке = ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоНекорректноеСостояниеКонтрагента(Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента);
		Если ЕстьОшибкаВШапке Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		// Перебираем все табличные части.
		Для каждого ОписаниеТабличнойЧасти Из Форма.РеквизитыПроверкиКонтрагентов.ОписаниеТабличныхЧастей Цикл
			
			ИмяТабличнойЧасти 	= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
			ТабличнаяЧасть 		= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
			
			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				ЕстьОшибкаВТабличнойЧасти = ПроверкаКонтрагентовКлиентСерверПовтИсп.ЭтоНекорректноеСостояниеКонтрагента(СтрокаТабличнойЧасти.Состояние);
				Если ЕстьОшибкаВТабличнойЧасти Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьОшибкаВШапке ИЛИ ЕстьОшибкаВТабличнойЧасти;
	
КонецФункции

Процедура ОчиститьРеквизитФормы(Форма, ИмяРеквизита, НовоеЗначение)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "РеквизитыПроверкиКонтрагентов")
		И Форма.РеквизитыПроверкиКонтрагентов.Свойство(ИмяРеквизита) Тогда
		
		Форма.РеквизитыПроверкиКонтрагентов[ИмяРеквизита] = НовоеЗначение;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВосстановитьРезультатПроверкиКонтрагентовВТабличныхЧастяхПослеЗаписи(Форма, ТекущийОбъект)
	
	ЭтоДокументСКонтрагентомВТабличнойЧасти = Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти;
	
	// Восстанавливаем результат проверки в табличной части.
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		ДанныеКонтрагентов = Неопределено;
		Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДанныеКонтрагентов", ДанныеКонтрагентов) Тогда
			ЗапомнитьРезультатПроверкиКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПрисоединитьОписание(Приемник, Источник)
	
	Для Каждого СтрокаИсточника Из Источник Цикл
		НоваяСтрокаПриемника = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемника, СтрокаИсточника);
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеФормойДокументаПриИнициализации(Форма)

	ЭтоДокументСКонтрагентомВТабличнойЧасти = Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти;
	
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		// Реквизиты объекта
		ДобавитьКолонкиВТаблицу(Форма);
		// Элементы формы
		ДобавитьЭлементыФормыВТаблицу(Форма);
		// Условное оформление
		УстановитьУсловноеОформлениеТабличнойЧастиДокумента(Форма);
	КонецЕсли;

КонецПроцедуры

Процедура ЗапомнитьРезультатПроверкиКонтрагентов(Форма, ДанныеКонтрагентов)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка; 

	// Корректность каждого контрагента.
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактура Тогда
		ЗапомнитьРезультатПроверкиКонтрагентовВСчетеФактуре(Форма, ДанныеКонтрагентов);
	Иначе
		ЗапомнитьРезультатПроверкиКонтрагентовВДокументе(Форма, ДанныеКонтрагентов);
	КонецЕсли;
	
	// Общее состояние по счету-фактуре.
	Отбор = Новый Структура("Ссылка", ДокументСсылка);
	ИтоговоеСостояние = ИтоговоеСостояниеКонтрагентаВДокументе(ДанныеКонтрагентов, Отбор);
	Форма.РеквизитыПроверкиКонтрагентов.СостояниеКонтрагентов = ИтоговоеСостояние.СостояниеКонтрагента;
	
	// Корректность всего документа в целом.
	ЗапомнитьНаличиеНекорректныхКонтрагентов(Форма);
	
	// Обновляем кэш
	ОбновитьВРегистреСостоянияКонтрагентовНеСовпадающихСКэшем(Форма, ДанныеКонтрагентов);
	
КонецПроцедуры

Процедура ОбновитьВРегистреСостоянияКонтрагентовНеСовпадающихСКэшем(Форма, ДанныеКонтрагентов)
	
	// Получаем результат проверки контрагента из кэша.
	ДанныеКонтрагентовИзКэша = Неопределено;
	Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша)
		И ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша) Тогда
		
		ДанныеКонтрагентовИзКэша = ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша);
	Иначе
		Возврат;
	КонецЕсли;
	
	РазличающиесяДанныеКонтрагентов = ДанныеКонтрагентовРазличающиесяМеждуКэшемИСервисомФНС(ДанныеКонтрагентов, ДанныеКонтрагентовИзКэша).Выгрузить();
	
	СегодняшнийДень = НачалоДня(ТекущаяДатаСеанса());
	
	// Сохраняем в кэш обновленные состояния только за сегодняшний день.
	Для каждого ДанныеКонтрагента Из РазличающиесяДанныеКонтрагентов Цикл
		
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Дата)
			И НачалоДня(ДанныеКонтрагента.Дата) = СегодняшнийДень Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, СостояниеПроверки, ДополнительныеПараметры = Неопределено)
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, СостояниеПроверки, 
		ДополнительныеПараметры, СтандартнаяОбработка);
		
	// Если действия по отображению результата проверки переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоДокументСКонтрагентомВШапке 			= Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВШапке; 
	ЭтоДокументСКонтрагентомВТабличнойЧасти = Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСКонтрагентомВТабличнойЧасти;
	ЭтоДокументСоСчетомФактуройВПодвале 	= Форма.РеквизитыПроверкиКонтрагентов.ЭтоДокументСоСчетомФактуройВПодвале;
	ЭтоСчетФактура							= Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактура;
	
	Если ЭтоДокументСКонтрагентомВШапке
		ИЛИ ЭтоДокументСоСчетомФактуройВПодвале
		ИЛИ ЭтоСчетФактура Тогда
		
		Если ДополнительныеПараметры = Неопределено Тогда
			Элемент = Неопределено;
		ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившаясяТаблица") Тогда
			// Изменилась строка в ТЧ. Ничего делать не нужно.
			Возврат;
		ИначеЕсли ДополнительныеПараметры.Свойство("ИзменившеесяПоле") Тогда
			// Это поле с контрагентом или счетом-фактурой.
			Элемент = Форма.Элементы[ДополнительныеПараметры.ИзменившеесяПоле];
		Иначе
			Элемент = Неопределено;
		КонецЕсли;
		
		Описание = ОписаниеДокументов(Форма);
		СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
		
		Для каждого СтрокаОписания Из Описание Цикл
		
			// Прорисовываем результат либо для всех элементов, либо только для переданного.
			Если Элемент = Неопределено ИЛИ Элемент = СтрокаОписания.Элемент Тогда
				
				ПараметрыПрорисовки = Новый Структура;
				ПараметрыПрорисовки.Вставить("СостояниеКонтрагента", 	СтрокаОписания.СостояниеКонтрагента);
				
				ПараметрыПрорисовки.Вставить("ЭлементРодитель", 		СтрокаОписания.ЭлементРодитель);
				ПараметрыПрорисовки.Вставить("Элемент", 				СтрокаОписания.Элемент);
				
				// Разный алгоритм для счета-фактуры и обычного контрагента.
				Если ЭтоДокументСоСчетомФактуройВПодвале И СчетФактура = СтрокаОписания.Ссылка Тогда 
					КонтрагентЗаполнен  	= ВСчетеФактуреЗаполненХотяБыОдинКонтрагент(СчетФактура);
					КонтрагентовНесколько 	= Истина;
				Иначе
					КонтрагентЗаполнен 		= ЗначениеЗаполнено(СтрокаОписания.Контрагент);
					КонтрагентовНесколько 	= Ложь;
				КонецЕсли;
				ПараметрыПрорисовки.Вставить("КонтрагентЗаполнен", 		КонтрагентЗаполнен);
				ПараметрыПрорисовки.Вставить("КонтрагентовНесколько", 	КонтрагентовНесколько);
				
				ПроверкаКонтрагентовКлиентСервер.УстановитьТекстПодсказкиВДокументе(ПараметрыПрорисовки, СостояниеПроверки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СохранитьРезультатПроверкиКонтрагентов(Форма, ТекущийОбъект)
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ИнициализацияВыполненаПолностью Тогда
		
		СохраняемоеЗначение = РезультатПроверкиКонтрагентовВДокументе(Форма, ТекущийОбъект);
		
		УстановитьПривилегированныйРежим(Истина);
		СохранитьРезультатыПроверкиКонтрагентовВДокументеВРегистр(СохраняемоеЗначение);
			
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПроверкиКонтрагентовВДокументеСовпадаетСДаннымиФНС(РеквизитыПроверкиКонтрагентов, ЕстьДоступКВебСервисуФНС) Экспорт
	
	ЕстьДоступКВебСервисуФНС = Истина;
	
	// Соединяем результаты проверки с исходной таблицей.
	Запрос = Новый Запрос;
	
	// Получаем данные контрагентов как результат работы фонового задания.
	ДанныеКонтрагентов = Неопределено;
	Если ЗначениеЗаполнено(РеквизитыПроверкиКонтрагентов.АдресХранилища)
		И ЭтоАдресВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресХранилища) Тогда
		
		РезультатРаботыФоновогоЗадания = ПолучитьИзВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресХранилища);
		
		Если РезультатРаботыФоновогоЗадания = Неопределено Тогда
			// Если фоновое задание завершилось, но результат пустой, то прорисовываем результат из кэша.
			Возврат Истина;
		Иначе
			ЕстьДоступКВебСервисуФНС 	= РезультатРаботыФоновогоЗадания.ЕстьДоступКВебСервисуФНС;
			ДанныеКонтрагентов 			= РезультатРаботыФоновогоЗадания.ДанныеКонтрагентов;
		КонецЕсли;
	Иначе
		// Если фоновое задание завершилось, но результат пустой, то прорисовываем результат из кэша.
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеКонтрагентов = Неопределено Тогда
		// Если фоновое задание завершилось, но результат пустой, то прорисовываем результат из кэша.
		Возврат Истина;
	КонецЕсли;
	
	// Получаем результат проверки контрагента из кэша.
	ДанныеКонтрагентовИзКэша = Неопределено;
	Если ЗначениеЗаполнено(РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша)
		И ЭтоАдресВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша) Тогда
		
		ДанныеКонтрагентовИзКэша = ПолучитьИзВременногоХранилища(РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша);
		
	Иначе
		// Если фоновое задание завершилось, но в кэше пусто, то прорисовываем результат от сервиса ФНС.
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаНесовпадающихСостояний = ДанныеКонтрагентовРазличающиесяМеждуКэшемИСервисомФНС(ДанныеКонтрагентов, ДанныеКонтрагентовИзКэша).Выбрать();
	
	Возврат ВыборкаНесовпадающихСостояний.Количество() = 0;
	
КонецФункции

Функция ДанныеКонтрагентовРазличающиесяМеждуКэшемИСервисомФНС(ДанныеКонтрагентов, ДанныеКонтрагентовИзКэша)
	
	Запрос = Новый Запрос;
	
	// Данные из кэша.
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		ДанныеКонтрагентовИзКэша, 
		Запрос, 
		"ДанныеКонтрагентовИзКэша", 
		"ИзКэша", 
		"ДополнительныеПараметры");
		
	// Данные контрагентов.
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		ДанныеКонтрагентов,
		Запрос,
		"ДанныеКонтрагентов", 
		,
		"ДополнительныеПараметры");
	
	// В таблице оставляем строки с различающимся состоянием.
	Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
	    |	&ВыбираемыеПоляДанныхКонтрагентовИзКэша,
	    |	&ВыбираемыеПоляДанныхКонтрагентов
	    |ИЗ
	    |	ДанныеКонтрагентовИзКэша КАК ДанныеКонтрагентовИзКэша
	    |		ПОЛНОЕ СОЕДИНЕНИЕ ДанныеКонтрагентов КАК ДанныеКонтрагентов
	    |		ПО ДанныеКонтрагентовИзКэша.Контрагент = ДанныеКонтрагентов.Контрагент
	    |			И ДанныеКонтрагентовИзКэша.ИНН = ДанныеКонтрагентов.ИНН
	    |			И ДанныеКонтрагентовИзКэша.КПП = ДанныеКонтрагентов.КПП
	    |			И ДанныеКонтрагентовИзКэша.Ссылка = ДанныеКонтрагентов.Ссылка
	    |			И (НАЧАЛОПЕРИОДА(ДанныеКонтрагентовИзКэша.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеКонтрагентов.Дата, ДЕНЬ))
	    |ГДЕ
	    |	ЕСТЬNULL(ДанныеКонтрагентов.Состояние, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ДанныеКонтрагентовИзКэша.Состояние, НЕОПРЕДЕЛЕНО)";
								  
	// Имена выбираемых колонок собираются программно.
	ВыбираемыеПоляДанныхКонтрагентовИзКэша = ПредставлениеКолонок(
		ДанныеКонтрагентовИзКэша, 
		"ДанныеКонтрагентовИзКэша.", 
		"ИзКэша", 
		"ДополнительныеПараметры");
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыбираемыеПоляДанныхКонтрагентовИзКэша", ВыбираемыеПоляДанныхКонтрагентовИзКэша);
	
	ВыбираемыеПоляДанныхКонтрагентов = ПредставлениеКолонок(
		ДанныеКонтрагентов, 
		"ДанныеКонтрагентов."
		,
		,
		"ДополнительныеПараметры");
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыбираемыеПоляДанныхКонтрагентов", ВыбираемыеПоляДанныхКонтрагентов);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПоказатьПредварительныйРезультатИзКэшаПриОткрытииДокумента(Форма)
	
	ДанныеКонтрагентов 				= ДанныеКонтрагентовВДокументе(Форма);
	ДанныеКонтрагентовПриОткрытии 	= ДанныеКонтрагентов.Скопировать();
	
	АдресДанныхКонтрагентовПриОткрытии = ПоместитьВоВременноеХранилище(
		ДанныеКонтрагентовПриОткрытии, 
		Форма.УникальныйИдентификатор);
		
	// Запоминаем данные контрагента для первой проверки сразу после открытия.
	Форма.РеквизитыПроверкиКонтрагентов.Вставить(
		"АдресДанныхКонтрагентовПриОткрытии", 
		АдресДанныхКонтрагентовПриОткрытии);

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоПроверкаДокумента", Истина);
	
	ВыполнитьПроверкуКонтрагентов(ДанныеКонтрагентов, "ИзКэша", ДополнительныеПараметры);
	
	// Формируем результат в формате, необходимом для отображения в документе.
	Результат = Новый Структура;
	Результат.Вставить("ДанныеКонтрагентов", 					ДанныеКонтрагентов);
	// Результат сохраняем сразу в регистр для того, чтобы 
	// после получения результата проверки не записывать в регистр и не делать серверного вызова,
	// который может привести к сбросу редактируемого значения.
	Результат.Вставить("СохранятьРезультатСразуПослеПроверки", 	Истина);
	Результат.Вставить("ЕстьДоступКВебСервисуФНС", 				Истина);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
	Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища = АдресХранилища;
	
	ОтобразитьРезультатПроверкиКонтрагентаВДокументе(Форма);
	
	АдресДанныхКонтрагентовИзКэша = ПоместитьВоВременноеХранилище(ДанныеКонтрагентов, Новый УникальныйИдентификатор);
	Форма.РеквизитыПроверкиКонтрагентов.АдресДанныхКонтрагентовИзКэша = АдресДанныхКонтрагентовИзКэша;
		
	Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища = Неопределено;

КонецПроцедуры

#Область УправлениеФормами

Процедура УстановитьУсловноеОформлениеТабличнойЧастиДокумента(Форма)
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.УстановитьУсловноеОформлениеТабличнойЧастиДокумента(Форма, СтандартнаяОбработка);
	
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Состояния 							= ПроверкаКонтрагентовКлиентСерверПовтИсп.НекорректныеСостоянияКонтрагента();
	НекорректныеСостоянияКонтрагента 	= Новый СписокЗначений;
	НекорректныеСостоянияКонтрагента.ЗагрузитьЗначения(Состояния);
	
	Для каждого ОписаниеТабличнойЧасти Из Форма.РеквизитыПроверкиКонтрагентов.ОписаниеТабличныхЧастей Цикл
		
		ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
		ИмяПоляСКонтрагентом 	= ОписаниеТабличнойЧасти.ИмяПоляСКонтрагентом;
		ПолеСКонтрагентом 		= Форма.Элементы[ОписаниеТабличнойЧасти.ИмяПоляСКонтрагентом];
		
		// Если поле с контрагентом скрыто функциональной опцией, то условное оформление не добавляем.
		Если ОписаниеТабличнойЧасти.КонтрагентСкрытФункциональнойОпцией Тогда
			Продолжить;
		КонецЕсли;
		
		// Условное оформление
		Оформление 			= Форма.УсловноеОформление.Элементы.Добавить();
		Отбор 				= Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор.Использование = Истина;
		
		ПутьКСостоянию = "Объект.%1.Состояние";
		ПутьКСостоянию = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПутьКСостоянию, ИмяТабличнойЧасти);
		
		Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ПутьКСостоянию);
		Отбор.ПравоеЗначение 	= НекорректныеСостоянияКонтрагента;
		
		ЦветФона 	= Оформление.Оформление.Элементы.Найти("ЦветТекста");
		Цвета 		= ПроверкаКонтрагентовВызовСервераПовтИсп.ЦветаРезультатовПроверки();
		
		ЦветФона.Значение 		= Цвета.ЦветТекстаНекорректногоКонтрагента;
		ЦветФона.Использование 	= Истина;
				
		ОформляемоеПоле 		= Оформление.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле 	= Новый ПолеКомпоновкиДанных(ИмяПоляСКонтрагентом);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкиВТаблицу(Форма)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;

	Для каждого ОписаниеТабличнойЧасти Из Форма.РеквизитыПроверкиКонтрагентов.ОписаниеТабличныхЧастей Цикл
		
		// Если поле с контрагентом скрыто функциональной опцией, то колонку для отображения результата проверки контрагента
		// не выводим.
		Если ОписаниеТабличнойЧасти.КонтрагентСкрытФункциональнойОпцией Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаФормы 	= Форма.Элементы[ОписаниеТабличнойЧасти.ИмяТаблицыФормы];
		ТабличнаяЧасть 	= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
		
		// Колонка с признаком корректности контрагента.
		ЕстьЭтоНекорректныйКонтрагент = РеквизитТабличнойЧастиУжеЕсть(Форма, ОписаниеТабличнойЧасти, "ЭтоНекорректныйКонтрагент");
		Если НЕ ЕстьЭтоНекорректныйКонтрагент Тогда
			ДобавитьРеквизитЭтоНекорректныйКонтрагент(Форма, ОписаниеТабличнойЧасти, ТаблицаФормы.ПутьКДанным);
		КонецЕсли;
		
		// Колонка с результатом проверки.
		ЕстьСостояние = РеквизитТабличнойЧастиУжеЕсть(Форма, ОписаниеТабличнойЧасти, "Состояние");
		Если НЕ ЕстьСостояние Тогда
			ДобавитьРеквизитСостояние(Форма, ОписаниеТабличнойЧасти, ТаблицаФормы.ПутьКДанным);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЭлементыФормыВТаблицу(Форма)
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.ДобавитьКолонкиТаблицыФормыСРезультатамиПроверкиВТабличныеЧасти(Форма, СтандартнаяОбработка);
	
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	Для каждого ОписаниеТабличнойЧасти Из Форма.РеквизитыПроверкиКонтрагентов.ОписаниеТабличныхЧастей Цикл
		
		ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
		ИмяКолонкиСКонтрагентом = ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
		
		// Программно добавляем колонку и группу колонок.
		Элементы 		= Форма.Элементы;
		ТаблицаФормы 	= Элементы[ОписаниеТабличнойЧасти.ИмяТаблицыФормы];
		
		ПолеСКонтрагентом  	= Элементы[ОписаниеТабличнойЧасти.ИмяПоляСКонтрагентом];
		НовоеПолеКартинки 	= Элементы.Найти(ПроверкаКонтрагентовКлиентСервер.ИмяПоляКартинки(ТаблицаФормы));
		НоваяГруппаКолонок 	= Элементы.Найти(ПолеСКонтрагентом.Имя + "Группа");
		
		// Если колонки с результатом проверки контрагента нет в табличной части, то добавляем ее.
		Если НовоеПолеКартинки = Неопределено Тогда
			
			НовоеПолеКартинки = НовоеПолеКартинки(
				Форма, 
				ТаблицаФормы, 
				ПолеСКонтрагентом.Родитель, 
				ПолеСКонтрагентом);
				
			НоваяГруппаКолонок = НоваяГруппаКолонок(
				Форма, 
				ПолеСКонтрагентом.Родитель, 
				ПолеСКонтрагентом, 
				ОписаниеТабличнойЧасти, 
				НовоеПолеКартинки);
				
		Иначе
			
			// Колонка с картинкой уже есть.
			// Если поле с контрагентом скрыто функциональной опцией, то колонку для отображения результата проверки контрагента
			// не выводим.
			
			Если ОписаниеТабличнойЧасти.КонтрагентСкрытФункциональнойОпцией Тогда
				НовоеПолеКартинки.Видимость = Ложь;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Корректируем свойства колонки с контрагентом.
		ПолеСКонтрагентом.ОтображатьВШапке 			= Ложь;
		ПолеСКонтрагентом.ФиксацияВТаблице 			= ФиксацияВТаблице.Нет;
		ПолеСКонтрагентом.РастягиватьПоГоризонтали 	= Ложь;
		
		// Заголовок группы
		Заголовок = ПолеСКонтрагентом.Заголовок;
		Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
			Заголовок = ДокументСсылка.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонкиСКонтрагентом].Синоним;
		КонецЕсли;
		НоваяГруппаКолонок.Заголовок = Заголовок;
		
		// Устанавливаем видимость такую же как и у колонки с контрагентом.
		НовоеПолеКартинки.Видимость 	= ПолеСКонтрагентом.Видимость;
		НоваяГруппаКолонок.Видимость 	= ПолеСКонтрагентом.Видимость;
		
		УстановитьВидимостьСостоянияКакУКонтрагента(Форма, ПолеСКонтрагентом, НовоеПолеКартинки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолеКонтрагентаСкрытоФункциональнойОпцией(Форма, ОписаниеТабличнойЧасти)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	ИмяДокумента 		= ДокументСсылка.Метаданные().Имя;
	ИмяТабличнойЧасти 	= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
	ИмяКолонки 			= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
	
	ИскомыйОбъект = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки];
	ПолеСкрыто = НЕ ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ИскомыйОбъект);
		
	Возврат ПолеСкрыто;

КонецФункции

Функция КолонкаТаблицыСкрытаФункциональнойОпцией(Форма, ИмяТаблицыФормы, ИмяПоляСКонтрагентом)
	
	ИмяТабличнойЧасти 		= ИмяРеквизита(Форма, ИмяТаблицыФормы);
	ИмяКолонкиСКонтрагентом	= ИмяРеквизита(Форма, ИмяПоляСКонтрагентом);
	
	ОписаниеТабличнойЧасти = Новый Структура("ИмяТабличнойЧасти, ИмяКолонкиСКонтрагентом", ИмяТабличнойЧасти, ИмяКолонкиСКонтрагентом);
	
	Возврат ПолеКонтрагентаСкрытоФункциональнойОпцией(Форма, ОписаниеТабличнойЧасти);
	
КонецФункции

Функция НовоеПолеКартинки(Форма, ТаблицаФормы, Родитель, ПолеСКонтрагентом)
	
	Элементы = Форма.Элементы;
	
	НовоеПоле = Элементы.Вставить(
		ПроверкаКонтрагентовКлиентСервер.ИмяПоляКартинки(ТаблицаФормы), 
		Тип("ПолеФормы"), 
		Родитель, 
		ПолеСКонтрагентом);
		
	НовоеПоле.Заголовок					= НСтр("ru = 'Есть ошибка по данным ФНС'");
	НовоеПоле.Вид 						= ВидПоляФормы.ПолеКартинки;
	НовоеПоле.КартинкаЗначений			= БиблиотекаКартинок.НекорректныйКонтрагент;
	НовоеПоле.ПутьКДанным				= ТаблицаФормы.ПутьКДанным + "." + "ЭтоНекорректныйКонтрагент";
	НовоеПоле.ОтображатьВШапке 			= Ложь;
	НовоеПоле.ПоложениеЗаголовка 		= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.Ширина 					= 2;
	НовоеПоле.РастягиватьПоГоризонтали	= Ложь;
	НовоеПоле.ГиперссылкаЯчейки			= Истина;
	
	Возврат НовоеПоле;
	
КонецФункции

Функция НоваяГруппаКолонок(Форма, Родитель, ПолеСКонтрагентом, ОписаниеТабличнойЧасти, НовоеПолеКартинки)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	Элементы = Форма.Элементы;
	
	НоваяГруппаКолонок = Элементы.Вставить(ПолеСКонтрагентом.Имя + "Группа", Тип("ГруппаФормы"), Родитель, ПолеСКонтрагентом);
	
	Заголовок = ПолеСКонтрагентом.Заголовок;
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		
		ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
		ИмяКолонкиСКонтрагентом = ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;

		Заголовок = ДокументСсылка.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонкиСКонтрагентом].Синоним;
	КонецЕсли;
	
	НоваяГруппаКолонок.Заголовок				= Заголовок;
	НоваяГруппаКолонок.Вид 						= ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппаКолонок.ОтображатьЗаголовок		= Истина;
	НоваяГруппаКолонок.Группировка				= ГруппировкаКолонок.Горизонтальная;
	НоваяГруппаКолонок.ОтображатьВШапке 		= Истина;
	НоваяГруппаКолонок.ФиксацияВТаблице 		= ПолеСКонтрагентом.ФиксацияВТаблице;
	НоваяГруппаКолонок.Ширина 					= 17;
	НоваяГруппаКолонок.РастягиватьПоГоризонтали = Ложь;

	// Перемещаем колонки в группу.
	Элементы.Переместить(ПолеСКонтрагентом, НоваяГруппаКолонок);
	Элементы.Переместить(НовоеПолеКартинки, НоваяГруппаКолонок);
	
	Возврат НоваяГруппаКолонок;

КонецФункции

Процедура ДобавитьРеквизитЭтоНекорректныйКонтрагент(Форма, ОписаниеТабличнойЧасти, Путь)
		
	ДобавитьРеквизит(
		Форма, 
		ОписаниеТабличнойЧасти, 
		"ЭтоНекорректныйКонтрагент", 
		Новый ОписаниеТипов("Булево"), 
		Путь);
		
КонецПроцедуры

Процедура ДобавитьРеквизитСостояние(Форма, ОписаниеТабличнойЧасти, Путь)
	
	ДобавитьРеквизит(
		Форма, 
		ОписаниеТабличнойЧасти, 
		"Состояние", 
		Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСуществованияКонтрагента"),
		Путь);
	
КонецПроцедуры

Процедура ДобавитьРеквизит(Форма, ОписаниеТабличнойЧасти, ИмяРеквизита, Тип, Путь)
	
	РеквизитУжеЕсть = РеквизитТабличнойЧастиУжеЕсть(Форма, ОписаниеТабличнойЧасти, ИмяРеквизита);
	Если НЕ РеквизитУжеЕсть Тогда

		НовыйРеквизит 			= Новый РеквизитФормы(ИмяРеквизита, Тип, Путь);
		ДобавляемыеРеквизиты 	= Новый Массив;
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитТабличнойЧастиУжеЕсть(Форма, ОписаниеТабличнойЧасти, ИмяРеквизита)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
	
	ТабличнаяЧасть = ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
	
	Если ТабличнаяЧасть.Количество() >= 1 Тогда
		// Для заполненной табличной части определяем по первой строке.
		ПерваяСтрока = ТабличнаяЧасть[0];
		РеквизитУжеЕсть = ПерваяСтрока.Свойство(ИмяРеквизита);
	Иначе
		// Для пустой табличной части определяем путем выгрузки.
		ВыгрузкаТабличнойЧасти 	= ТабличнаяЧасть.Выгрузить();// Преобразуем в таблицу значений.
		РеквизитУжеЕсть 		= ВыгрузкаТабличнойЧасти.Колонки.Найти(ИмяРеквизита) <> Неопределено;
		ВыгрузкаТабличнойЧасти	= Неопределено;
	КонецЕсли;
	
	Возврат РеквизитУжеЕсть;
	
КонецФункции

Функция ДатаВСтрокеТабличнойЧасти(ДокументОбъект, ОписаниеТабличнойЧасти, СтрокаТабличнойЧасти)
	
	ИмяКолонкиСДатой = ОписаниеТабличнойЧасти.ИмяКолонкиСДатой;
	
	Дата = Дата(1,1,1);
	ДатаВДокументе	= ДатаВДокументе(ДокументОбъект);
	Если ЗначениеЗаполнено(ИмяКолонкиСДатой) Тогда
		// Определение даты из ТЧ
		ДатаВСтроке = НачалоДня(СтрокаТабличнойЧасти[ИмяКолонкиСДатой]);
		Дата 		= ?(ЗначениеЗаполнено(ДатаВСтроке), ДатаВСтроке, ДатаВДокументе);
	Иначе
		// В табличной части нет колонки с датой, то берем дату из шапки документа.
		Дата = ДатаВДокументе;
	КонецЕсли;
	
	// Если в документе указана будущая дата, то проверяем
	// контрагентов на текущую дату.
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	Если Дата > ТекущаяДата Тогда
		Дата = ТекущаяДата;
	КонецЕсли;
				
	Возврат Дата;
				
КонецФункции

Процедура УстановитьВидимостьСостоянияКакУКонтрагента(Форма, ПолеСКонтрагентом, НовоеПолеКартинки)
	
	УсловноеОформлениеФормы = Форма.УсловноеОформление;
	Для каждого УсловноеОформление Из УсловноеОформлениеФормы.Элементы Цикл
		
		Видимость = УсловноеОформление.Оформление.Элементы.Найти("Видимость");
		ИспользуетсяУправлениеВидимостью = Видимость.Использование;
		
		Если ИспользуетсяУправлениеВидимостью Тогда
			
			Для каждого ЭлементПоля Из УсловноеОформление.Поля.Элементы Цикл
				Если ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПолеСКонтрагентом.Имя) Тогда
					
					НовоеОформляемоеПоле = УсловноеОформление.Поля.Элементы.Добавить();
					НовоеОформляемоеПоле.Использование = Истина;
					НовоеОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(НовоеПолеКартинки.Имя);
					
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СчетаФактуры

Процедура ЗапомнитьРезультатПроверкиКонтрагентовВСчетеФактуре(Форма, ДанныеКонтрагентов)
	
	// Определение объекта и ссылки.
	ОбъектИСсылкаПоФорме 	= ПроверкаКонтрагентовКлиентСервер.ОбъектИСсылкаПоФорме(Форма);
	ДокументОбъект 			= ОбъектИСсылкаПоФорме.Объект;
	ДокументСсылка 			= ОбъектИСсылкаПоФорме.Ссылка;
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ЭтоСчетФактура Тогда
		
		Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(ДокументСсылка));
		Для каждого СтрокаОписания Из Описание Цикл
			
			ИмяРеквизитаКонтрагента = СтрокаОписания.ИмяРеквизита;
			Контрагент = ДокументОбъект[ИмяРеквизитаКонтрагента];
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				Отбор = Новый Структура("Контрагент", Контрагент); 
				ИтоговоеСостояние = ИтоговоеСостояниеКонтрагентаВДокументе(ДанныеКонтрагентов, Отбор);
				Форма.РеквизитыПроверкиКонтрагентов[СтрокаОписания.ИмяРеквизитаССостоянием] = ИтоговоеСостояние.СостояниеКонтрагента;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКонтрагентовВСчетеФактуре(ДокументОбъект, ДанныеКонтрагентов, Форма = Неопределено)
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.ЗаполнитьДанныеКонтрагентовВСчетеФактуре(СтандартнаяОбработка, ДокументОбъект, ДанныеКонтрагентов, Форма);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка 	= ДокументОбъект.Ссылка;
	Дата 			= ДатаВСчетеФактуре(ДокументОбъект);
	
	ЭтоСсылка = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДокументОбъект));
	
	Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(ДокументСсылка));
	Для каждого СтрокаОписания Из Описание Цикл
		
		ИмяРеквизитаКонтрагента = СтрокаОписания.ИмяРеквизита;
		
		Если ЭтоСсылка Тогда
			Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект, ИмяРеквизитаКонтрагента);
		Иначе
			Контрагент = ДокументОбъект[ИмяРеквизитаКонтрагента];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			ДополнитьДанныеКонтрагентовВДокументе(
				ДокументСсылка,
				ДанныеКонтрагентов,
				Контрагент,
				Дата);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаВСчетеФактуре(СчетФактураОбъект)
	
	Дата = Дата(1,1,1);
	РаботаСКонтрагентамиПереопределяемый.ОпределитьДатуВСчетеФактуре(СчетФактураОбъект, Дата);
	
	Возврат Дата; 
	
КонецФункции

Функция ИмяРеквизитаСостоянияКонтрагентаВСчетеФактуре(ИмяРеквизитаКонтрагента)
	
	Возврат "Состояние" + ИмяРеквизитаКонтрагента;
	
КонецФункции

// Определяет, заполнен ли хотя бы один контрагент в счете-фактуре.
//
// Параметры:
//  СчетФактураСсылка	 - ДокументСсылка - счет-фактура, для которой необходимо определить заполненность
//                                              контрагентов.
// Возвращаемое значение:
// Булево - Истина, если заполнен хотя бы один контрагент.
Функция ВСчетеФактуреЗаполненХотяБыОдинКонтрагент(СчетФактураСсылка)
	
	Если СчетФактураСсылка = Неопределено Тогда
	    ЗаполненХотяБыОдинКонтрагент = Истина;
	Иначе
		
		Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(СчетФактураСсылка));
		
		ИменаРеквизитовКонтрагентов = Описание.ВыгрузитьКолонку("ИмяРеквизита");
		КонтрагентыСчетаФактуры 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактураСсылка, ИменаРеквизитовКонтрагентов);
		
		ЗаполненХотяБыОдинКонтрагент = Ложь;
		Для каждого Контрагент Из КонтрагентыСчетаФактуры Цикл
			
			Если ЗначениеЗаполнено(Контрагент.Значение) Тогда
				ЗаполненХотяБыОдинКонтрагент = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗаполненХотяБыОдинКонтрагент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Подписка на событие. Добавление в регистр набора ИНН и КПП для последующей проверки регламентным заданием
//		и отображения результата проверки в списке контрагентов.
//
// Параметры:
//  КонтрагентОбъект - СправочникОбъект.<Контрагенты> - записываемый контрагент.
//  Отказ			 - Булево - Параметр обработчика подписки на событие.
Процедура СохранитьРезультатПроверкиКонтрагентаПриЗаписи(КонтрагентОбъект, Отказ) Экспорт 
	
	Если КонтрагентОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверкаКонтрагентовВызовСервераПовтИсп.ИспользованиеПроверкиВозможно()
		ИЛИ СправочникКонтрагентовИерархический() И КонтрагентОбъект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(КонтрагентОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка();
	КонтрагентОбъект.ДополнительныеСвойства.Свойство("ПроверкаКонтрагентовСостояниеКонтрагента", СостояниеКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСправочникаКонтрагенты = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("Контрагент",	КонтрагентОбъект.Ссылка);
	ДанныеКонтрагента.Вставить("ИНН", 			КонтрагентОбъект[СвойстваСправочникаКонтрагенты.ИНН]);
	ДанныеКонтрагента.Вставить("КПП",			КонтрагентОбъект[СвойстваСправочникаКонтрагенты.КПП]);
	ДанныеКонтрагента.Вставить("Дата", 			НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагента.Вставить("Состояние", 	СостояниеКонтрагента);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ДанныеКонтрагента.Вставить("ОбластьДанныхВспомогательныеДанные", МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеСпискаКонтрагентов(Список)
	
	СтандартнаяОбработка = Истина;
	РаботаСКонтрагентамиПереопределяемый.УстановитьУсловноеОформлениеСпискаКонтрагентов(Список, СтандартнаяОбработка);
	
	// Если действия переопределили, то стандартную обработку не выполняем.
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ВыделитьКраснымИННиКППНекорректныхКонтрагентов(Список);
	ВыделитьКраснымНекорректныеИНН(Список);
	ВыделитьКраснымНекорректныеКПП(Список);
	ВыделитьСерымНедействующихКонтрагентов(Список);
	
КонецПроцедуры

Процедура ВыделитьСерымНедействующихКонтрагентов(Список)
	
	НовоеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	
	// Условие отбора
	ДобавитьНовыйОтбор(
		НовоеУсловноеОформление, 
		ВидСравненияКомпоновкиДанных.Равно, 
		"ПроверкаКонтрагентовСостояние",
		Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП);
	
	// Цвет
	ЦветаРезультатовПроверки = ПроверкаКонтрагентовВызовСервераПовтИсп.ЦветаРезультатовПроверки();
	ДобавитьНовоеОформление(НовоеУсловноеОформление, ЦветаРезультатовПроверки.ЦветТекстаКонтрагентаПрекратившегоДеятельность);
	
КонецПроцедуры

Процедура ВыделитьКраснымИННиКППНекорректныхКонтрагентов(Список)
	
	НовоеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	
	// Выделяемые состояния
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СостоянияСуществованияКонтрагента.КППНеСоответствуетДаннымБазыФНС);
	МассивСостояний.Добавить(Перечисления.СостоянияСуществованияКонтрагента.КонтрагентОтсутствуетВБазеФНС);
	
	// Условие отбора
	ДобавитьНовыйОтбор(
		НовоеУсловноеОформление, 
		ВидСравненияКомпоновкиДанных.ВСписке, 
		"ПроверкаКонтрагентовСостояние",
		МассивСостояний);
	
	// Оформляемые поля
	ДобавитьНовоеОформляемоеПоле(НовоеУсловноеОформление, "ИНН");
	ДобавитьНовоеОформляемоеПоле(НовоеУсловноеОформление, "КПП");
	
	// Цвет
	ЦветаРезультатовПроверки = ПроверкаКонтрагентовВызовСервераПовтИсп.ЦветаРезультатовПроверки();
	ДобавитьНовоеОформление(НовоеУсловноеОформление, ЦветаРезультатовПроверки.ЦветТекстаНекорректногоКонтрагента);
	
КонецПроцедуры

Процедура ВыделитьКраснымНекорректныеИНН(Список)
	
	НовоеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	
	// Выделяемые состояния
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.НеверныйИНН"));
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.НевернаяДлинаИНН"));
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.НедопустимыеСимволыВИНН"));
	
	// Условие отбора
	ДобавитьНовыйОтбор(
		НовоеУсловноеОформление, 
		ВидСравненияКомпоновкиДанных.ВСписке, 
		"ПроверкаКонтрагентовСостояние",
		МассивСостояний);
	
	// Оформляемые поля
	ДобавитьНовоеОформляемоеПоле(НовоеУсловноеОформление, "ИНН");
	
	// Цвет
	ЦветаРезультатовПроверки = ПроверкаКонтрагентовВызовСервераПовтИсп.ЦветаРезультатовПроверки();
	ДобавитьНовоеОформление(НовоеУсловноеОформление, ЦветаРезультатовПроверки.ЦветТекстаНекорректногоКонтрагента);
	
КонецПроцедуры

Процедура ВыделитьКраснымНекорректныеКПП(Список)
	
	НовоеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	
	// Выделяемые состояния
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.НевернаяДлинаКПП"));
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.НедопустимыеСимволыВКПП"));
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ИПНеМожетИметьКПП"));
	
	// Условие отбора
	ДобавитьНовыйОтбор(
		НовоеУсловноеОформление, 
		ВидСравненияКомпоновкиДанных.ВСписке, 
		"ПроверкаКонтрагентовСостояние",
		МассивСостояний);
	
	// Оформляемые поля
	ДобавитьНовоеОформляемоеПоле(НовоеУсловноеОформление, "КПП");
	
	// Цвет
	ЦветаРезультатовПроверки = ПроверкаКонтрагентовВызовСервераПовтИсп.ЦветаРезультатовПроверки();
	ДобавитьНовоеОформление(НовоеУсловноеОформление, ЦветаРезультатовПроверки.ЦветТекстаНекорректногоКонтрагента);
	
КонецПроцедуры

Процедура ДобавитьНовыйОтбор(НовоеУсловноеОформление, ВидСравнения, ПутьКДаннымПоля, ПравоеЗначение)
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравнения;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	Отбор.ПравоеЗначение 	= ПравоеЗначение;
	
КонецПроцедуры

Процедура ДобавитьНовоеОформляемоеПоле(НовоеУсловноеОформление, Свойство)
	
	СвойстваСправочникаКонтрагенты 	= ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	ОформляемоеПоле 				= НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(СвойстваСправочникаКонтрагенты[Свойство]);
	ОформляемоеПоле.Использование 	= Истина;
	
КонецПроцедуры

Процедура ДобавитьНовоеОформление(НовоеУсловноеОформление, Цвет)
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= Цвет;
	Оформление.Использование 	= Истина;
	
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиСправочника(
		ДанныеКонтрагентов, 
		АдресХранилища = Неопределено, 
		СохранятьРезультатСразуПослеПроверки = Ложь)
	
	Если ДанныеКонтрагентов.Количество() = 1 Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[0]; 
	
		// Сохраняем во временное хранилище.
		Если ЗначениеЗаполнено(АдресХранилища)  Тогда
			ПоместитьВоВременноеХранилище(ДанныеКонтрагента.Состояние, АдресХранилища);
		КонецЕсли;
			
		// Сохраняем в регистр
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) 
			И (НЕ ЗначениеЗаполнено(АдресХранилища) ИЛИ СохранятьРезультатСразуПослеПроверки) Тогда
			
			СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
			
		КонецЕсли;
		
	Иначе
		
		СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗапомнитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Сохраняем результаты проверки (только для справочника).
	Если ДополнительныеПараметры <> Неопределено
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		И ДополнительныеПараметры.Свойство("ЭтоПроверкаСправочника")
		И ДополнительныеПараметры.ЭтоПроверкаСправочника Тогда
		
		АдресХранилища = 
			?(ДополнительныеПараметры.Свойство("АдресХранилища"), 
			ДополнительныеПараметры.АдресХранилища, 
			Неопределено);
		
		СохранятьРезультатСразуПослеПроверки = 
			?(ДополнительныеПараметры.Свойство("СохранятьРезультатСразуПослеПроверки"), 
			ДополнительныеПараметры.СохранятьРезультатСразуПослеПроверки, 
			Ложь);
		
		УстановитьПривилегированныйРежим(Истина);
		СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, АдресХранилища, СохранятьРезультатСразуПослеПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьПроверкуПриСозданииНаСервереКонтрагента(Форма, Параметры, КонтрагентСсылка)
	
	Если ЗначениеЗаполнено(КонтрагентСсылка) ИЛИ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
				
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ЭтоПроверкаСправочника", 					Истина);
		ДополнительныеПараметры.Вставить("СохранятьРезультатСразуПослеПроверки", 	Истина);
		
		// По необходимости выполняем предварительную проверку данных.
		// Если предварительная проверка показала ошибки, что дальше не проверяем,
		// иначе запускаем проверку веб-сервисом ФНС.
		Если ПроверкаКонтрагентовКлиентСервер.ПрерватьПроверкуКонтрагентовИзЗаОшибокПредварительнойПроверки(Форма, ДополнительныеПараметры) Тогда 
			ПроверкаКонтрагентовКлиентСервер.ОтобразитьРезультатПроверкиКонтрагентаВСправочнике(Форма);
		Иначе
			ПроверкаКонтрагентовКлиентСервер.ПроверитьКонтрагентаИзКарточки(Форма, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВОтчетах

Функция ЭтоОтчетПоНекорректнымКонтрагентам(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.Свойство("ДанныеДляПроверкиКонтрагентов") Тогда
		// Проверка контрагентов отключена.
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	ПроверкаКонтрагентовИспользуется = ДанныеДляПроверкиКонтрагентов.ПроверкаКонтрагентовИспользуется;
	
	Если НЕ ПроверкаКонтрагентовИспользуется Тогда
		// Проверка контрагентов отключена.
		Возврат Ложь;
	КонецЕсли;
	
	// Есть два режима формирования отчета:
	// Выводить все строки или только с некорректными контрагентами.
	ВыводитьТолькоНекорректныхКонтрагентов	= ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов;
	
	Если НЕ ВыводитьТолькоНекорректныхКонтрагентов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыделитьКонтрагентовСОшибкамиВРазделеОтчета(ПроверяемыеКонтрагенты, СтруктураПараметров)
	
	ДанныеДляПроверкиКонтрагентов 	= СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;

	// Выделяем в разделах отчета строки с некорректными контрагентами.
	Для Каждого РазделОтчета Из ДанныеДляПроверкиКонтрагентов.ПолныеРазделыОтчета Цикл
	
		СтандартнаяОбработка = Истина;

		РаботаСКонтрагентамиПереопределяемый.ОпределитьНужноЛиПроверятьКонтрагентовВРазделеОтчета(
			СтруктураПараметров,
			РазделОтчета.НомерРаздела,
			РазделОтчета.ДополнительныеПараметры,
			СтандартнаяОбработка);
		
		Если НЕ СтандартнаяОбработка Тогда
			Продолжить;
		КонецЕсли;

		ТабличныйДокумент = РазделОтчета.ХранилищеОтчета.Получить();
		ВыделитьКонтрагентовСОшибкамиВОтчете(ПроверяемыеКонтрагенты, ТабличныйДокумент, РазделОтчета.НомерРаздела);
		РазделОтчета.ХранилищеОтчета = Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыделитьКонтрагентовСОшибкамиВОтчете(НедействующиеКонтрагенты, ТабличныйДокумент, НомерРаздела = Неопределено)
	
	// Если указан номер раздела, то отбираем только контрагентов, которые в нем встречаются.
	Если НомерРаздела <> Неопределено Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("НомерРаздела", НомерРаздела);
		КонтрагентыРаздела = НедействующиеКонтрагенты.НайтиСтроки(Отбор);
	Иначе
		КонтрагентыРаздела = НедействующиеКонтрагенты;
	КонецЕсли;

	// Подкрашиваем контрагентов с ошибками.
	Для каждого СтрокаСНедействующимКонтрагентом Из КонтрагентыРаздела Цикл
		
		РаботаСКонтрагентамиПереопределяемый.ВыделитьКонтрагентаСОшибкойВСтрокеОтчета(ТабличныйДокумент, 
			СтрокаСНедействующимКонтрагентом.СтрокаТабличногоДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОставитьНедействующихКонтрагентовВОтчете(СтруктураПараметров)

	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	
	Если ДанныеДляПроверкиКонтрагентов.ОтчетСРазделами Тогда
				
		// Формируем отчет, в котором оставляем только некорректных контрагентов.
		РаботаСКонтрагентамиПереопределяемый.СформироватьОтчет(СтруктураПараметров);
	
	Иначе
		
		// Формируем отчет, в котором оставляем только некорректных контрагентов.
		ОтчетПоНекорректнымКонтрагентам = Новый ТабличныйДокумент;
		РаботаСКонтрагентамиПереопределяемый.СформироватьОтчет(СтруктураПараметров, ОтчетПоНекорректнымКонтрагентам);
		
		Возврат ОтчетПоНекорректнымКонтрагентам;
		
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти