
////////////////////////////////////////////////////////////////////////////////
// Управление задачами
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

Функция СтатусыСписка(СписокСтатусов) Экспорт
	Возврат УправлениеЗадачамиПовтИсп.СтатусыСписка(СписокСтатусов);
КонецФункции

Функция ПодчиненныеПроекты(Проект, ВключатьТекущийПроект = Истина) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Ссылка В ИЕРАРХИИ(&Проект)
	|	И ВЫБОР
	|			КОГДА НЕ &ВключатьТекущийПроект
	|				ТОГДА Проекты.Ссылка <> &Проект
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ВключатьТекущийПроект", ВключатьТекущийПроект);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Процедура УстановитьПредметПрисоединенногоФайла(ПрисоединенныйФайл, Предмет) Экспорт
	ФайлОбъект=ПрисоединенныйФайл.ПолучитьОбъект();
	ФайлОбъект.Предмет=Предмет;
	ФайлОбъект.ОбменДанными.Загрузка=Истина;
	ФайлОбъект.Записать();
КонецПроцедуры

Функция ПолучитьСсылкуНаПрисоединенныйФайлПоИдентификатору(Идентификатор) Экспорт
	Возврат Справочники.ЗадачаПрисоединенныеФайлы.ПолучитьСсылку(Идентификатор);
КонецФункции

Процедура ЗаписатьПрисоединенныеФайлыПоДаннымПрисоединенныхФайловРедакторов(Задача, ДанныеПрисоединенныхФайлов,
	Предмет) Экспорт
	Для Каждого СтрокаФайла Из ДанныеПрисоединенныхФайлов Цикл
		
		// при удалении не сохраненного файла адрес в хранилище очищается
		Если Не ЗначениеЗаполнено(СтрокаФайла.Адрес) Или Не СтрокаФайла.ЭтоНовый Тогда
			Продолжить;
		КонецЕсли;

		ЧастиИмениФайла = РМ_MarkdownКлиентСервер.РазложитьПолноеИмяФайла(СтрокаФайла.ПутьКФайлу);
		РасширениеБезТочки = СтрЗаменить(ЧастиИмениФайла.Расширение, ".", "");
		ИмяБезРасширения = ЧастиИмениФайла.ИмяБезРасширения;

		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", Задача);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
		ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);

		ЗаписатьПрисоединенныйФайлВБазу(ПараметрыФайла, СтрокаФайла.Адрес, Предмет);

	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьПрисоединенныйФайлВБазу(ПараметрыФайла, АдресФайлаВоВременномХранилище, Предмет = Неопределено) Экспорт
	ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
	ПрисоединенныйФайл=РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);

	Если Не Предмет = Неопределено Тогда
		УправлениеЗадачами.УстановитьПредметПрисоединенногоФайла(ПрисоединенныйФайл, Предмет);
	КонецЕсли;
КонецПроцедуры

Функция ИзмененияОбъектаПередЗаписью(Источник, ВПустыеЗначенияУстанавливатьСтрокуПусто = Истина) Экспорт
	Если Источник.ЭтоНовый() Тогда
		Возврат Новый Структура;
	КонецЕсли;

	Метаданныеобъекта=Источник.Метаданные();
	ПредыдущийОбъект=Источник.Ссылка.ПолучитьОбъект();

	СтруктураИзменений=Новый Структура;

	Для Каждого Реквизит Из Метаданныеобъекта.Реквизиты Цикл
		Если Источник[Реквизит.Имя] <> ПредыдущийОбъект[Реквизит.Имя] Тогда
			Изменение=Новый Структура;
			Изменение.Вставить("Синоним", Реквизит.Синоним);
			Изменение.Вставить("ПредыдущееЗначение", ПредыдущийОбъект[Реквизит.Имя]);
			Изменение.Вставить("Значение", Источник[Реквизит.Имя]);
			Если ВПустыеЗначенияУстанавливатьСтрокуПусто Тогда
				Если Не ЗначениеЗаполнено(Изменение.ПредыдущееЗначение) Тогда
					Изменение.ПредыдущееЗначение="<Пусто>";
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Изменение.Значение) Тогда
					Изменение.Значение="<Пусто>";
				КонецЕсли;
			КонецЕсли;

			СтруктураИзменений.Вставить(Реквизит.Имя, Изменение);
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураИзменений;
КонецФункции

Процедура ЗаписатьИзмененияКлючевыхРеквизитовЗадачиПриЗаписи(ЗадачаОбъект) Экспорт
	КлючевыеРеквизиты=УправлениеЗадачамиКлиентСервер.КлючевыеРеквизитыЗадачи();

	Если Не ЗадачаОбъект.ДополнительныеСвойства.Свойство("Изменения") Тогда
		Возврат;
	КонецЕсли;

	Автор=Пользователи.ТекущийПользователь();
	ДатаИзменений=ТекущаяДатаСеанса();
	Для Каждого ТекИзменение Из ЗадачаОбъект.ДополнительныеСвойства.Изменения Цикл
		Если КлючевыеРеквизиты.Найти(ТекИзменение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		НоваяЗапись=РегистрыСведений.ИзмененияЗадач.СоздатьМенеджерЗаписи();
		НоваяЗапись.Задача=ЗадачаОбъект.Ссылка;
		НоваяЗапись.Автор=Автор;
		НоваяЗапись.Дата=ДатаИзменений;
		НоваяЗапись.Реквизит=ТекИзменение.Ключ;
		НоваяЗапись.ПредыдущееЗначение=ТекИзменение.Значение.ПредыдущееЗначение;
		НоваяЗапись.НовоеЗначение=ТекИзменение.Значение.Значение;
		НоваяЗапись.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьТрудозатратыПоЗадаче(Задача) Экспорт

	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Трудозатраты.Предмет КАК Предмет,
	|	Трудозатраты.ФактОборот КАК Факт
	|ИЗ
	|	РегистрНакопления.Трудозатраты.Обороты(, , , Предмет = &Предмет) КАК Трудозатраты";
	Запрос.УстановитьПараметр("Предмет", Задача);

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Факт;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция СтруктураЗаписиИстории(Задача) Экспорт
	СтруктураЗаписиИстории=Новый Структура;
	СтруктураЗаписиИстории.Вставить("Задача", Задача);
	СтруктураЗаписиИстории.Вставить("Заголовок", "Обновлено ");
	СтруктураЗаписиИстории.Вставить("ТекстСообщения", "");
	СтруктураЗаписиИстории.Вставить("ДатаСоздания");
	СтруктураЗаписиИстории.Вставить("Автор");
	СтруктураЗаписиИстории.Вставить("Ссылка");
	СтруктураЗаписиИстории.Вставить("Основание");
	СтруктураЗаписиИстории.Вставить("МассивВложений", Новый Массив);
	СтруктураЗаписиИстории.Вставить("МассивВложенийЗадачи", Новый Массив);
	СтруктураЗаписиИстории.Вставить("Формат", Перечисления.ВариантыОформленияТекста.HTML);
	СтруктураЗаписиИстории.Вставить("Тип", "");

	Возврат СтруктураЗаписиИстории;
КонецФункции

Функция АдресЭлектроннойПочтыОбъекта(Получатель) Экспорт
	КИ=УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Получатель, , , Ложь);

	Отбор=Новый Структура;
	Отбор.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);

	НайденныеСтроки=КИ.НайтиСтроки(Отбор);

	Адрес="";
	Для Каждого Стр Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(Стр.Представление) Тогда
			Продолжить;
		КонецЕсли;

		Адрес=Стр.Представление;
		Прервать;
	КонецЦикла;

	Возврат Адрес;

КонецФункции

Функция ПолучитьМассивИсторииЗадачи(Задача, ИдентификаторФормы, ДанныеПрисоединенныхФайлов) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	КомментарииЗадач.Задача КАК Задача,
	|	КомментарииЗадач.ТекстСообщения КАК ТекстСообщения,
	|	КомментарииЗадач.ДатаСоздания КАК ДатаСоздания,
	|	КомментарииЗадач.Ссылка КАК Ссылка,
	|	КомментарииЗадач.Автор КАК Автор,
	|	КомментарииЗадач.Основание КАК Основание,
	|	КомментарииЗадач.ТекстСообщенияФормат КАК Формат
	|ИЗ
	|	Справочник.КомментарииЗадач КАК КомментарииЗадач
	|ГДЕ
	|	КомментарииЗадач.Задача = &Задача
	|УПОРЯДОЧИТЬ ПО
	|	КомментарииЗадач.ДатаСоздания";

	Запрос.УстановитьПараметр("Задача", Задача);

	МассивРезультатов=Запрос.ВыполнитьПакет();

	Выборка=МассивРезультатов[0].Выбрать();

	ИсторияСообщений=Новый Массив;
	
	//Для начала добавим дату создания задачи
	СтруктураЗаписиИстории=СтруктураЗаписиИстории(Задача);
	СтруктураЗаписиИстории.Вставить("ДатаСоздания", Задача.ДатаСоздания);
	СтруктураЗаписиИстории.Вставить("Автор", Задача.Автор);
//	СтруктураЗаписиИстории.Вставить("АвторАдресЭлектроннойПочты", АдресЭлектроннойПочтыОбъекта(Задача.Автор));

	СтруктураЗаписиИстории.Вставить("Ссылка", Задача);
	СтруктураЗаписиИстории.Вставить("Основание", Задача.Основание);
	СтруктураЗаписиИстории.Вставить("Заголовок", "Добавлено ");
	////СтруктураЗаписиИстории.Вставить("МассивВложений",ДанныеПрисоединенныхФайлов);
	СтруктураЗаписиИстории.Вставить("МассивВложенийЗадачи", ДанныеПрисоединенныхФайлов);

	ТекстСообщения=Задача.Содержание;
	РедакторКомментарияКлиентСервер.СконвертироватьИменаПрисоединенныхФайловВТексте(ДанныеПрисоединенныхФайлов,
		ТекстСообщения, Задача.СодержаниеФормат);
	СтруктураЗаписиИстории.Вставить("ТекстСообщения", ТекстСообщения);
	СтруктураЗаписиИстории.Вставить("Формат", ВариантОформленияТекстаСтрокой(Задача.СодержаниеФормат));
	СтруктураЗаписиИстории.Тип="Содержание";
	ИсторияСообщений.Добавить(СтруктураЗаписиИстории);

	Пока Выборка.Следующий() Цикл
		СтруктураЗаписиИстории=СтруктураЗаписиИстории(Задача);

		ТекстСообщения=Выборка.ТекстСообщения;
		РедакторКомментарияКлиентСервер.СконвертироватьИменаПрисоединенныхФайловВТексте(ДанныеПрисоединенныхФайлов,
			ТекстСообщения, Выборка.Формат);

		СтруктураЗаписиИстории.Вставить("ТекстСообщения", ТекстСообщения);
		СтруктураЗаписиИстории.Вставить("Формат", ВариантОформленияТекстаСтрокой(Выборка.Формат));
		СтруктураЗаписиИстории.Вставить("ДатаСоздания", Выборка.ДатаСоздания);
		СтруктураЗаписиИстории.Вставить("Автор", Выборка.Автор);
		СтруктураЗаписиИстории.Вставить("АвторАдресЭлектроннойПочты", АдресЭлектроннойПочтыОбъекта(Выборка.Автор));
		СтруктураЗаписиИстории.Вставить("Ссылка", Выборка.Ссылка);
		СтруктураЗаписиИстории.Вставить("Основание", Выборка.Основание);
		СтруктураЗаписиИстории.Вставить("МассивВложенийЗадачи", ДанныеПрисоединенныхФайлов);
		СтруктураЗаписиИстории.Тип="Комментарий";
		Для Каждого СтрокаВложения Из ДанныеПрисоединенныхФайлов Цикл
			Если СтрокаВложения.Ссылка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаВложения.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаВложения.Ссылка.Предмет <> Выборка.Ссылка Тогда
				Продолжить;
			КонецЕсли;

			СтруктураЗаписиИстории.МассивВложений.Добавить(СтрокаВложения);
		КонецЦикла;

		ИсторияСообщений.Добавить(СтруктураЗаписиИстории);
	КонецЦикла;

	Возврат ИсторияСообщений;
КонецФункции

Функция АвторДляПоляИстории(Пользователь)
	Автор=Новый Структура;
	Автор.Вставить("name", Строка(Пользователь));
//		Автор.Вставить("avatar", АдресКартинки);
	Автор.Вставить("email", АдресЭлектроннойПочтыОбъекта(Пользователь));

	Возврат Автор;
КонецФункции

Функция ДанныеЗадачиДляВыводаВПолеИстории(Задача, ИдентификаторФормы, ДанныеПрисоединенныхФайлов) Экспорт
	МассивИстории=УправлениеЗадачами.ПолучитьМассивИсторииЗадачи(Задача, ИдентификаторФормы, ДанныеПрисоединенныхФайлов);

	КомментарииЗадачи=Новый Массив;
	Для Каждого ТекЗаписьИстории Из МассивИстории Цикл
		СтруктураЗаписи=Новый Структура;
		СтруктураЗаписи.Вставить("id", Строка(ТекЗаписьИстории.Ссылка.УникальныйИдентификатор()));
		СтруктураЗаписи.Вставить("date", Формат(ТекЗаписьИстории.ДатаСоздания, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		СтруктураЗаписи.Вставить("title", ТекЗаписьИстории.Заголовок);
		СтруктураЗаписи.Вставить("text", ТекЗаписьИстории.ТекстСообщения);
		СтруктураЗаписи.Вставить("type", ТекЗаписьИстории.Формат);
		СтруктураЗаписи.Вставить("author", АвторДляПоляИстории(ТекЗаписьИстории.Автор));

		СтруктураЗаписи.Вставить("attachments", Новый Массив);

		Для Каждого ТекВложение Из ТекЗаписьИстории.МассивВложений Цикл
			СтруктураВложения=Новый Структура;
			СтруктураВложения.Вставить("id", Строка(ТекВложение.Ссылка.УникальныйИдентификатор()));
			СтруктураВложения.Вставить("filename", ТекВложение.ИмяФайла);
			СтруктураВложения.Вставить("href", ПолучитьНавигационнуюСсылку(ТекВложение.Ссылка));
			СтруктураЗаписи.attachments.Добавить(СтруктураВложения);
		КонецЦикла;

		Если ЗначениеЗаполнено(ТекЗаписьИстории.Основание) Тогда
			Основание=Новый Структура;
			Основание.Вставить("title", Строка(ТекЗаписьИстории.Основание));
			Основание.Вставить("url", ПолучитьНавигационнуюСсылку(ТекЗаписьИстории.Основание));

			СтруктураЗаписи.Вставить("base", Основание);
		КонецЕсли;

		КомментарииЗадачи.Добавить(СтруктураЗаписи);
	КонецЦикла;

	ДанныеДляПоляИстории=Новый Структура;
	ДанныеДляПоляИстории.Вставить("comments", КомментарииЗадачи);
	ДанныеДляПоляИстории.Вставить("changes", ИзмененияЗадачиДляПоляИстории(Задача));

	Возврат ОбщегоНазначенияКлиентСервер.ЗаписатьДанныеJSON(ДанныеДляПоляИстории);
КонецФункции

Функция ПолучитьСвязанныеЗадачи(Задача) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СвязанныеЗадачи.Задача1 = &Задача
	|			ТОГДА СвязанныеЗадачи.Задача2
	|		ИНАЧЕ СвязанныеЗадачи.Задача1
	|	КОНЕЦ КАК Задача,
	|	СвязанныеЗадачи.ТипСвязи КАК ТипСвязи,
	|	СвязанныеЗадачи.Дата КАК Дата,
	|	СвязанныеЗадачи.Автор КАК Автор
	|ИЗ
	|	РегистрСведений.СвязанныеЗадачи КАК СвязанныеЗадачи
	|ГДЕ
	|	(СвязанныеЗадачи.Задача1 = &Задача
	|			ИЛИ СвязанныеЗадачи.Задача2 = &Задача)";
	Запрос.УстановитьПараметр("Задача", Задача);

	МассивРезультата=Новый Массив;

	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СвязаннаяЗадача=Новый Структура;
		СвязаннаяЗадача.Вставить("Задача", Выборка.Задача);
		СвязаннаяЗадача.Вставить("ТипСвязи", Выборка.ТипСвязи);

		МассивРезультата.Добавить(СвязаннаяЗадача);
	КонецЦикла;

	Возврат МассивРезультата;
КонецФункции

Процедура УдалитьСвязьЗадач(Задача1, Задача2) Экспорт
	Менеджер=РегистрыСведений.СвязанныеЗадачи.СоздатьМенеджерЗаписи();
	Менеджер.Задача1=Задача1;
	Менеджер.Задача2=Задача2;
	Менеджер.Прочитать();

	Если Менеджер.Выбран() Тогда
		Менеджер.Удалить();
	Иначе
		Менеджер.Задача1=Задача2;
		Менеджер.Задача2=Задача1;
		Менеджер.Прочитать();

		Если Менеджер.Выбран() Тогда
			Менеджер.Удалить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСвязьЗадач(Задача1, Задача2, ТипСвязи) Экспорт
	Менеджер=РегистрыСведений.СвязанныеЗадачи.СоздатьМенеджерЗаписи();
	Менеджер.Задача1=Задача1;
	Менеджер.Задача2=Задача2;
	Менеджер.ТипСвязи=ТипСвязи;
	Менеджер.Записать(Истина);
КонецПроцедуры

Функция ПолучитьСсылкуНаЗадачуПоИдентификатору(Идентификатор) Экспорт
	Возврат Документы.Задача.ПолучитьСсылку(Идентификатор);
КонецФункции

Функция ПолучитьПодчиненныеЗадачи(Задача) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка,
	|	Задача.Номер КАК Номер
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.РодительскаяЗадача = &РодительскаяЗадача
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	Запрос.УстановитьПараметр("РодительскаяЗадача", Задача);

	МассивЗадач=Новый Массив;

	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивЗадач.Добавить(Выборка.Ссылка);
	КонецЦикла;

	Возврат МассивЗадач;
КонецФункции

Функция НайтиЗадачуПоНомеру(Номер) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Номер = &Номер";
	Запрос.УстановитьПараметр("Номер", Номер);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.Задача.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Процедура УстановитьОтборыПоУмолчаниюВСпискеЗадач(Форма, Список) Экспорт

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Исполнитель", Пользователи.ТекущийПользователь(), ВидСравненияКомпоновкиДанных.Равно, , Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "СрокИсполненияАвто", ТекущаяДатаСеанса(), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		"Только на сегодня", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Спринт", Неопределено, ВидСравненияКомпоновкиДанных.Равно, , Ложь,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);

КонецПроцедуры

Процедура УстановитьУсловноеОформлениеСпискаЗадач(Список) Экспорт

	УсловноеОформлениеСпискаЗадач = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;

	УсловноеОформлениеСпискаЗадач.Элементы.Очистить();
	
	// Установка оформления для просроченных задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполненияАвто");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполненияАвто");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбораДанных.ПравоеЗначение = УправлениеЗадачамиПовтИсп.СтатусыНеВыполненныхЗадач();
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для выполненных задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбораДанных.ПравоеЗначение = УправлениеЗадачамиПовтИсп.СтатусыНеВыполненныхЗадач();
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение = WebЦвета.БледноБирюзовый;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для закрытых задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбораДанных.ПравоеЗначение = УправлениеЗадачамиПовтИсп.СтатусыСписка(
		Справочники.СпискиСтатусовЗадач.Закрытые);
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение = WebЦвета.СеребристоСерый;
	ЭлементЦветаОформления.Использование = Истина;
	
	//// Установка оформления для отклоненых задач.
	//ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	//ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	//
	//ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	//ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//ЭлементОтбораДанных.ПравоеЗначение = УправлениеЗадачамиПовтИсп.СтатусыСписка(Справочники.СпискиСтатусовЗадач.Отклоненные);
	//ЭлементОтбораДанных.Использование = Истина;
	//
	//ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	//ЭлементШрифтаОформления.Значение = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт;
	//ЭлементШрифтаОформления.Использование = Истина;
	
	// Установка оформления для задач другого пользователя
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Пользователи.ТекущийПользователь();
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = WebЦвета.ГрифельноСерый;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для незаполненного поля "Срок".
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполненияАвто");
	ОформляемоеПоле.Использование = Истина;

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполненияАвто");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;

	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	ЭлементЦветаОформления.Значение = НСтр("ru = 'Срок не указан'");
	ЭлементЦветаОформления.Использование = Истина;

КонецПроцедуры

Функция ВариантОформленияТекстаСтрокой(Вариант) Экспорт
	Если Вариант = Перечисления.ВариантыОформленияТекста.Markdown Тогда
		Возврат "Markdown";
	Иначе
		Возврат "HTML"
	КонецЕсли
	;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьРеквизитыАвтораИзменений(Источник)

	Если Источник.ЭтоНовый() Тогда
		Если Не ЗначениеЗаполнено(Источник.Автор) Тогда
			Источник.Автор=Пользователи.ТекущийПользователь();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Источник.ДатаСоздания) Тогда
			Источник.ДатаСоздания=ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;

	Источник.Редактор=Пользователи.ТекущийПользователь();
	Источник.ДатаИзменения=ТекущаяДатаСеанса();

КонецПроцедуры

Функция ИзмененияЗадачиДляПоляИстории(Задача)
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ИзмененияЗадач.Задача,
	|	ИзмененияЗадач.Дата КАК Дата,
	|	ИзмененияЗадач.Реквизит,
	|	ИзмененияЗадач.Автор КАК Автор,
	|	ИзмененияЗадач.ПредыдущееЗначение,
	|	ИзмененияЗадач.НовоеЗначение,
	|	ПРЕДСТАВЛЕНИЕ(ИзмененияЗадач.ПредыдущееЗначение) КАК ПредыдущееЗначениеПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ИзмененияЗадач.НовоеЗначение) КАК НовоеЗначениеПредставление
	|ИЗ
	|	РегистрСведений.ИзмененияЗадач КАК ИзмененияЗадач
	|ГДЕ
	|	ИзмененияЗадач.Задача = &Задача
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ
	|ПО
	|	Дата,
	|	Автор";
	Запрос.УстановитьПараметр("Задача", Задача);

	МетаданныеЗадачи=Метаданные.Документы.Задача;

	МассивИзменений=Новый Массив;

	ВыборкаДата=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДата.Следующий() Цикл
		ВыборкаАвтор=ВыборкаДата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАвтор.Следующий() Цикл
			СтруктураИзмененияПоЗадаче=Новый Структура;
			СтруктураИзмененияПоЗадаче.Вставить("date", Формат(ВыборкаАвтор.Дата,"ДФ='dd.MM.yyyy ЧЧ:мм';"));
			СтруктураИзмененияПоЗадаче.Вставить("author", АвторДляПоляИстории(ВыборкаАвтор.Автор));
			СтруктураИзмененияПоЗадаче.Вставить("changes", Новый Массив);
			
			Выборка=ВыборкаАвтор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				НовоеИзменение=Новый Структура;
				
				НовоеИзменение.Вставить("field", Выборка.Реквизит);
				СинонимРеквизита="";
				МетаданныеРеквизита=МетаданныеЗадачи.Реквизиты.Найти(Выборка.Реквизит);
				Если МетаданныеРеквизита <> Неопределено Тогда
					СинонимРеквизита=МетаданныеРеквизита.Синоним;
				КонецЕсли;
				НовоеИзменение.Вставить("fieldView", СинонимРеквизита);
				Если ЗначениеЗаполнено(Выборка.ПредыдущееЗначение) Тогда
					НовоеИзменение.Вставить("value", Выборка.ПредыдущееЗначениеПредставление);
				Иначе
					НовоеИзменение.Вставить("value", "<Пусто>");
				КонецЕсли;
				Если ЗначениеЗаполнено(Выборка.НовоеЗначение) Тогда
					НовоеИзменение.Вставить("newValue", Выборка.НовоеЗначениеПредставление);
				Иначе
					НовоеИзменение.Вставить("newValue", "<Пусто>");
				КонецЕсли;

				СтруктураИзмененияПоЗадаче.changes.Добавить(НовоеИзменение);
			КонецЦикла;
			МассивИзменений.Добавить(СтруктураИзмененияПоЗадаче);
		КонецЦикла;

	КонецЦикла;
	Возврат МассивИзменений;
КонецФункции

#КонецОбласти

#Область ОбработчикиПодписок

Процедура УстановитьАвтоматическиЗаполняемыеРеквизитыПередЗаписьюСправочниковПередЗаписью(Источник, Отказ) Экспорт
	УстановитьРеквизитыАвтораИзменений(Источник);
КонецПроцедуры

Процедура УстановитьАвтоматическиЗаполняемыеРеквизитыПередЗаписьюДокументовПередЗаписью(Источник, Отказ, РежимЗаписи,
	РежимПроведения) Экспорт
	УстановитьРеквизитыАвтораИзменений(Источник);
КонецПроцедуры

#КонецОбласти