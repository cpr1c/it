
////////////////////////////////////////////////////////////////////////////////
// Управление задачами
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

Функция СтатусыСписка(СписокСтатусов) Экспорт
	Возврат УправлениеЗадачамиПовтИсп.СтатусыСписка(СписокСтатусов);	
КонецФункции

Функция ПодчиненныеПроекты(Проект, ВключатьТекущийПроект = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Ссылка В ИЕРАРХИИ(&Проект)
	|	И ВЫБОР
	|			КОГДА НЕ &ВключатьТекущийПроект
	|				ТОГДА Проекты.Ссылка <> &Проект
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ВключатьТекущийПроект", ВключатьТекущийПроект);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура УстановитьПредметПрисоединенногоФайла(ПрисоединенныйФайл,Предмет) Экспорт
	ФайлОбъект=ПрисоединенныйФайл.ПолучитьОбъект();
	ФайлОбъект.Предмет=Предмет;
	ФайлОбъект.ОбменДанными.Загрузка=Истина;
	ФайлОбъект.Записать();
КонецПроцедуры


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьТрудозатратыПоЗадаче(Задача) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Трудозатраты.Предмет КАК Предмет,
	|	Трудозатраты.ФактОборот КАК Факт
	|ИЗ
	|	РегистрНакопления.Трудозатраты.Обороты(, , , Предмет = &Предмет) КАК Трудозатраты";
	Запрос.УстановитьПараметр("Предмет",Задача);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Факт;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция СтруктураЗаписиИстории(Задача) Экспорт
	СтруктураЗаписиИстории=Новый Структура;
	СтруктураЗаписиИстории.Вставить("Задача",Задача);
	СтруктураЗаписиИстории.Вставить("Заголовок","Обновлено ");
	СтруктураЗаписиИстории.Вставить("ТекстСообщения","");
	СтруктураЗаписиИстории.Вставить("ДатаСоздания");
	СтруктураЗаписиИстории.Вставить("Автор");
	СтруктураЗаписиИстории.Вставить("Ссылка");
	СтруктураЗаписиИстории.Вставить("Основание");
	СтруктураЗаписиИстории.Вставить("МассивВложений",Новый Массив);
	СтруктураЗаписиИстории.Вставить("МассивВложенийЗадачи",Новый Массив);
	
	Возврат СтруктураЗаписиИстории;
КонецФункции

Функция ПолучитьМассивИсторииЗадачи(Задача,ИдентификаторФормы,ДанныеПрисоединенныхФайлов) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	КомментарииЗадач.Задача КАК Задача,
	|	КомментарииЗадач.ТекстСообщения КАК ТекстСообщения,
	|	КомментарииЗадач.ДатаСоздания КАК ДатаСоздания,
	|	КомментарииЗадач.Ссылка КАК Ссылка,
	|	КомментарииЗадач.Автор КАК Автор,
	|	КомментарииЗадач.Основание КАК Основание,
	|	КомментарииЗадач.ТекстСообщенияФормат КАК Формат
	|ИЗ
	|	Справочник.КомментарииЗадач КАК КомментарииЗадач
	|ГДЕ
	|	КомментарииЗадач.Задача = &Задача
	|УПОРЯДОЧИТЬ ПО
	|	КомментарииЗадач.ДатаСоздания";
	
	Запрос.УстановитьПараметр("Задача",Задача);
	
	МассивРезультатов=Запрос.ВыполнитьПакет();
	
	Выборка=МассивРезультатов[0].Выбрать();
	
	ИсторияСообщений=Новый Массив;
	
	//Для начала добавим дату создания задачи
	СтруктураЗаписиИстории=СтруктураЗаписиИстории(Задача);
	СтруктураЗаписиИстории.Вставить("ДатаСоздания",Задача.ДатаСоздания);
	СтруктураЗаписиИстории.Вставить("Автор",Задача.Автор);
	СтруктураЗаписиИстории.Вставить("Ссылка",Задача);
	СтруктураЗаписиИстории.Вставить("Основание",Задача.Основание);
	СтруктураЗаписиИстории.Вставить("Заголовок","Добавлено ");
	////СтруктураЗаписиИстории.Вставить("МассивВложений",ДанныеПрисоединенныхФайлов);
	СтруктураЗаписиИстории.Вставить("МассивВложенийЗадачи",ДанныеПрисоединенныхФайлов);
	
	ТекстСообщения=Задача.Содержание;
	РедакторКомментарияКлиентСервер.СконвертироватьИменаПрисоединенныхФайловВТексте(ДанныеПрисоединенныхФайлов,ТекстСообщения, Задача.СодержаниеФормат);
	СтруктураЗаписиИстории.Вставить("ТекстСообщения",ТекстСообщения);
	СтруктураЗаписиИстории.Вставить("Формат",ВариантОформленияТекстаСтрокой(Задача.СодержаниеФормат));
	
	
	ИсторияСообщений.Добавить(СтруктураЗаписиИстории);
		
	Пока Выборка.Следующий() Цикл
		СтруктураЗаписиИстории=СтруктураЗаписиИстории(Задача);
		
		ТекстСообщения=Выборка.ТекстСообщения;
		РедакторКомментарияКлиентСервер.СконвертироватьИменаПрисоединенныхФайловВТексте(ДанныеПрисоединенныхФайлов,ТекстСообщения, Выборка.Формат);
		
		СтруктураЗаписиИстории.Вставить("ТекстСообщения",ТекстСообщения);
		СтруктураЗаписиИстории.Вставить("Формат",ВариантОформленияТекстаСтрокой(Выборка.Формат));
		СтруктураЗаписиИстории.Вставить("ДатаСоздания",Выборка.ДатаСоздания);
		СтруктураЗаписиИстории.Вставить("Автор",Выборка.Автор);
		СтруктураЗаписиИстории.Вставить("Ссылка",Выборка.Ссылка);
		СтруктураЗаписиИстории.Вставить("Основание",Выборка.Основание);
		СтруктураЗаписиИстории.Вставить("МассивВложенийЗадачи",ДанныеПрисоединенныхФайлов);
		

		Для Каждого СтрокаВложения ИЗ ДанныеПрисоединенныхФайлов Цикл
			Если СтрокаВложения.Ссылка=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаВложения.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаВложения.Ссылка.Предмет<>Выборка.Ссылка Тогда
				Продолжить;
			КонецЕсли;	
				
			СтруктураЗаписиИстории.МассивВложений.Добавить(СтрокаВложения);
		КонецЦикла;
		
		ИсторияСообщений.Добавить(СтруктураЗаписиИстории);
	КонецЦикла;
	
	Возврат ИсторияСообщений;
КонецФункции

Функция ПолучитьСвязанныеЗадачи(Задача) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СвязанныеЗадачи.Задача1 = &Задача
	|			ТОГДА СвязанныеЗадачи.Задача2
	|		ИНАЧЕ СвязанныеЗадачи.Задача1
	|	КОНЕЦ КАК Задача,
	|	СвязанныеЗадачи.ТипСвязи КАК ТипСвязи,
	|	СвязанныеЗадачи.Дата КАК Дата,
	|	СвязанныеЗадачи.Автор КАК Автор
	|ИЗ
	|	РегистрСведений.СвязанныеЗадачи КАК СвязанныеЗадачи
	|ГДЕ
	|	(СвязанныеЗадачи.Задача1 = &Задача
	|			ИЛИ СвязанныеЗадачи.Задача2 = &Задача)";
	Запрос.УстановитьПараметр("Задача",Задача);
	
	МассивРезультата=Новый Массив;
	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СвязаннаяЗадача=Новый Структура;
		СвязаннаяЗадача.Вставить("Задача",Выборка.Задача);
		СвязаннаяЗадача.Вставить("ТипСвязи",Выборка.ТипСвязи);
		
		МассивРезультата.Добавить(СвязаннаяЗадача);
	КонецЦикла;
	
	Возврат МассивРезультата;
КонецФункции

Процедура УдалитьСвязьЗадач(Задача1,Задача2) Экспорт
	Менеджер=РегистрыСведений.СвязанныеЗадачи.СоздатьМенеджерЗаписи();
	Менеджер.Задача1=Задача1;
	Менеджер.Задача2=Задача2;
	Менеджер.Прочитать();
	
	Если Менеджер.Выбран() Тогда
		Менеджер.Удалить();
	Иначе
		Менеджер.Задача1=Задача2;
		Менеджер.Задача2=Задача1;
		Менеджер.Прочитать();
		
		Если Менеджер.Выбран() Тогда
			Менеджер.Удалить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСвязьЗадач(Задача1,Задача2,ТипСвязи) Экспорт 
	Менеджер=РегистрыСведений.СвязанныеЗадачи.СоздатьМенеджерЗаписи();
	Менеджер.Задача1=Задача1;
	Менеджер.Задача2=Задача2;
	Менеджер.ТипСвязи=ТипСвязи;
	Менеджер.Записать(Истина);
КонецПроцедуры

Функция ПолучитьСсылкуНаЗадачуПоИдентификатору(Идентификатор) Экспорт
	Возврат Документы.Задача.ПолучитьСсылку(Идентификатор);
КонецФункции

Функция ПолучитьСсылкуНаПрисоединенныйФайлПоИдентификатору(Идентификатор) Экспорт
	Возврат Справочники.ЗадачаПрисоединенныеФайлы.ПолучитьСсылку(Идентификатор);
КонецФункции

Функция ПолучитьПодчиненныеЗадачи(Задача) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка,
	|	Задача.Номер КАК Номер
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.РодительскаяЗадача = &РодительскаяЗадача
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";
	Запрос.УстановитьПараметр("РодительскаяЗадача",Задача);
	
	МассивЗадач=Новый Массив;
	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивЗадач.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивЗадач;
КонецФункции

Функция НайтиЗадачуПоНомеру(Номер) Экспорт 
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Номер = &Номер";
	Запрос.УстановитьПараметр("Номер",Номер);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.Задача.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Процедура УстановитьОтборыПоУмолчаниюВСпискеЗадач(Форма, Список) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		"Исполнитель", 
		Пользователи.ТекущийПользователь(), 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		"СрокИсполненияАвто", 
		ТекущаяДатаСеанса(), 
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		"Только на сегодня", 
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		"Спринт", 
		Неопределено, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		Ложь,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеСпискаЗадач(Список) Экспорт
	
	УсловноеОформлениеСпискаЗадач = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	
	УсловноеОформлениеСпискаЗадач.Элементы.Очистить();
	
	// Установка оформления для просроченных задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполненияАвто");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполненияАвто");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбораДанных.ПравоеЗначение = УправлениеЗадачамиПовтИсп.СтатусыНеВыполненныхЗадач();
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение;   
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для выполненных задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбораДанных.ПравоеЗначение = УправлениеЗадачамиПовтИсп.СтатусыНеВыполненныхЗадач();
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение = WebЦвета.БледноБирюзовый; 
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для закрытых задач.
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбораДанных.ПравоеЗначение = УправлениеЗадачамиПовтИсп.СтатусыСписка(Справочники.СпискиСтатусовЗадач.Закрытые);
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение = WebЦвета.СеребристоСерый; 
	ЭлементЦветаОформления.Использование = Истина;
	
	//// Установка оформления для отклоненых задач.
	//ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	//ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	//
	//ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	//ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//ЭлементОтбораДанных.ПравоеЗначение = УправлениеЗадачамиПовтИсп.СтатусыСписка(Справочники.СпискиСтатусовЗадач.Отклоненные);
	//ЭлементОтбораДанных.Использование = Истина;
	//
	//ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	//ЭлементШрифтаОформления.Значение = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт;
	//ЭлементШрифтаОформления.Использование = Истина;
	
	// Установка оформления для задач другого пользователя
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Пользователи.ТекущийПользователь();
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = WebЦвета.ГрифельноСерый; 
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для незаполненного поля "Срок".
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполненияАвто");
	ОформляемоеПоле.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполненияАвто");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	ЭлементЦветаОформления.Значение = НСтр("ru = 'Срок не указан'");
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

Функция ВариантОформленияТекстаСтрокой(Вариант) Экспорт
	Если Вариант=Перечисления.ВариантыОформленияТекста.Markdown Тогда
		Возврат "Markdown";
	Иначе
		Возврат "HTML"
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьРеквизитыАвтораИзменений(Источник)
	
	Если Источник.ЭтоНовый() Тогда
		Если Не ЗначениеЗаполнено(Источник.Автор) Тогда
			Источник.Автор=Пользователи.ТекущийПользователь();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Источник.ДатаСоздания) Тогда
			Источник.ДатаСоздания=ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	Источник.Редактор=Пользователи.ТекущийПользователь();
	Источник.ДатаИзменения=ТекущаяДатаСеанса();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписок

Процедура УстановитьАвтоматическиЗаполняемыеРеквизитыПередЗаписьюСправочниковПередЗаписью(Источник, Отказ) Экспорт
	УстановитьРеквизитыАвтораИзменений(Источник);
КонецПроцедуры

Процедура УстановитьАвтоматическиЗаполняемыеРеквизитыПередЗаписьюДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	УстановитьРеквизитыАвтораИзменений(Источник);
КонецПроцедуры

#КонецОбласти

