#Область ПрограммныйИнтерфейс

Процедура ДобавитьПартнераВСтопЛист(Партнер, Причина) Экспорт
	МенеджерЗаписи = РегистрыСведений.СтопЛист.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Партнер = Партнер;
	МенеджерЗаписи.Прочитать();
	Если Не МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Партнер = Партнер;
		МенеджерЗаписи.Причина = Причина;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьПартнераИзСтопЛиста(Партнер) Экспорт
	МенеджерЗаписи = РегистрыСведений.СтопЛист.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Партнер = Партнер;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
КонецПроцедуры

Функция ПартнерПринадлежитКСтопЛисту(Партнер) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтопЛист.Партнер
	|ИЗ
	|	РегистрСведений.СтопЛист КАК СтопЛист
	|ГДЕ
	|	СтопЛист.Партнер = &Партнер";
	Запрос.УстановитьПараметр("Партнер", Партнер);

	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
КонецФункции

Функция ДанныеПринадлежностиПартнераКСтопЛисту(Партнер) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтопЛист.Партнер,
	|	СтопЛист.Дата,
	|	СтопЛист.Автор,
	|	СтопЛист.Причина
	|ИЗ
	|	РегистрСведений.СтопЛист КАК СтопЛист
	|ГДЕ
	|	СтопЛист.Партнер = &Партнер";
	Запрос.УстановитьПараметр("Партнер", Партнер);

	ДанныеПринадлжености = Новый Структура("Принадлежит, Дата, Причина, Автор", Ложь, '00010101', "",
		Справочники.Пользователи.ПустаяСсылка());
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеПринадлжености, Выборка);
		ДанныеПринадлжености.Принадлежит = Истина;
	КонецЕсли;
	
	Возврат ДанныеПринадлжености;
КонецФункции

Функция ЦветФонаДляВыделенияСтопЛиста() Экспорт
	Возврат WebЦвета.ТусклоРозовый;
КонецФункции

Функция ФорматированнаяСтрокаДекорацииНадписьСтопЛиста(ДанныеПринадлежностиКСтопЛисту) Экспорт
	МассивСтрокЗаголовка = Новый Массив;
	МассивСтрокЗаголовка.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.ЗнакСтоп));
	МассивСтрокЗаголовка.Добавить("Отправлен в стоп-лист ");
	МассивСтрокЗаголовка.Добавить(Новый ФорматированнаяСтрока(Строка(ДанныеПринадлежностиКСтопЛисту.Автор), , , , ПолучитьНавигационнуюСсылку(ДанныеПринадлежностиКСтопЛисту.Автор)));
	МассивСтрокЗаголовка.Добавить(" "+ДанныеПринадлежностиКСтопЛисту.Дата);
	МассивСтрокЗаголовка.Добавить(" по причине: ");
	МассивСтрокЗаголовка.Добавить(Новый ФорматированнаяСтрока(ДанныеПринадлежностиКСтопЛисту.Причина, Новый Шрифт(, , Истина)));
	Возврат Новый ФорматированнаяСтрока(МассивСтрокЗаголовка);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// предназначен для модулей, которые являются частью некоторой функциональной подсистемы. В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать только из других функциональных подсистем этой же библиотеки.
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// содержит процедуры и функции, составляющие внутреннюю реализацию общего модуля. В тех случаях, когда общий модуль является частью некоторой функциональной подсистемы, включающей в себя несколько объектов метаданных, в этом разделе также могут быть размещены служебные экспортные процедуры и функции, предназначенные только для вызова из других объектов данной подсистемы.
#КонецОбласти