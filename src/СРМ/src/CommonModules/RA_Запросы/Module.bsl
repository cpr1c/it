Функция КодироватьСтрокуВBase64(ИсходнаяСтрока) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗаписьТекста 	   = Новый ЗаписьТекста(ИмяВременногоФайла);
	ЗаписьТекста.Записать(ИсходнаяСтрока);
	ЗаписьТекста.Закрыть();
	Результат = Base64Строка(Новый ДвоичныеДанные(ИмяВременногоФайла));
	Попытка 
		УдалитьФайлы(ИмяВременногоФайла) ;
	Исключение 
		Сообщить("CRM_ Ошибка обработки пароля в base64!",СтатусСообщения.Внимание);
	КонецПопытки;
	Результат = СтрЗаменить(Результат,"77u/","");
	Возврат Результат;
	
конецфункции

Функция СтрокаВФорматеURL(СтрокаДляКодировки) Экспорт  
	
	Возврат КодироватьСтроку(СтрокаДляКодировки,СпособКодированияСтроки.КодировкаURL);

КонецФункции

Функция ПолучитьСтрокуЗаголовков(Заголовки) 
	СтрокаЗаголовков="";
	
	Для Каждого КлючЗначение Из Заголовки Цикл
		СтрокаЗаголовков=СтрокаЗаголовков+?(ЗначениеЗаполнено(СтрокаЗаголовков),Символы.ПС,"")+КлючЗначение.Ключ+":"+КлючЗначение.Значение;
	КонецЦикла;
	
	Возврат СтрокаЗаголовков;
КонецФункции

Функция ПолучитьЗаголовкиЗапросаИзСтроки(СтрокаЗаголовков) Экспорт
	ТекстовыйДокумент=Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(СтрокаЗаголовков);
	
	Заголовки=Новый Соответствие;
	
	Для НомерСтроки=1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ЗаголовокСтр=ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		
		Если Не ЗначениеЗаполнено(ЗаголовокСтр) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЗаголовка=СтрРазделить(ЗаголовокСтр,":");
		Если МассивЗаголовка.Количество()<>2 Тогда
			Продолжить;
		КонецЕсли;
		
		Заголовки.Вставить(МассивЗаголовка[0],МассивЗаголовка[1]);
		
	КонецЦикла;
	
	Возврат Заголовки;
КонецФункции

Функция ПолучитьКодыУспешногоВыполненияЗапроса() Экспорт
	КодыУспешныхЗапросов=Новый Массив;
	КодыУспешныхЗапросов.Добавить(200);
	КодыУспешныхЗапросов.Добавить(201);
	Возврат КодыУспешныхЗапросов;
КонецФункции

Функция ПроверитьУспешностьВыполненияЗапроса(HTTPответ) Экспорт
	Если HTTPответ=Неопределено Тогда 
		Возврат ложЬ;
	КонецЕсли;
	
	КодыУспешныхЗапросов=ПолучитьКодыУспешногоВыполненияЗапроса();
	
	Возврат КодыУспешныхЗапросов.Найти(HTTPОтвет.КодСостояния)<>Неопределено;
	
КонецФункции

Функция ПолучитьСтрокуПараметровПоСтруктуре(СтруктураПараметров) Экспорт
	СтрокаПараметров = "";
	ЭтоПервый = Истина;
	
	Для каждого текПараметр из СтруктураПараметров Цикл
		
		//не заполненные параметры игнорируются
		Если текПараметр.Значение = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПараметров = СтрокаПараметров 
			+ ?(ЭтоПервый, "", "&")
			+ текПараметр.Ключ 
			+ "=" 
			+ СтрокаВФорматеURL(RA_ОбщегоНазначенияСервер.ФорматЧислоБезРазделителей(текПараметр.Значение));
		
		ЭтоПервый = Ложь;
		
	КонецЦикла;
	
	СтрокаПараметров = ?(СтрокаПараметров = "", "", "?" + СтрокаПараметров);
	
	Возврат СтрокаПараметров;
КонецФункции

Процедура ПовторнаяОтправкаHTTPЗапроса(ЗаписьЛогаЗапроса) Экспорт
	ВыполнитьHTTPЗапрос(ЗаписьЛогаЗапроса.Сервер,ЗаписьЛогаЗапроса.Запрос,ЗаписьЛогаЗапроса.ТелоЗапроса,
						ПолучитьЗаголовкиЗапросаИзСтроки(ЗаписьЛогаЗапроса.ЗаголовкиЗапроса),
						ЗаписьЛогаЗапроса.ИспользоватьHttps,ЗаписьЛогаЗапроса.НастройкаПодключения,ЗаписьЛогаЗапроса.HTTPФункция);	
КонецПроцедуры

Процедура ЗафиксироватьЛогЗапроса(АдресСервера,ИспользоватьHTTPS,HTTPЗапрос,HTTPОтвет,ДатаНачала,ДатаОкончания,HTTPФункция,НастройкаПодключения)
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения) Тогда
		НастройкаПодключения = RA_RedmineПротоколПодключенияПовтИсп.ПолучитьНастройкуПодключенияПоУмолчанию();
	КонецЕсли;
	
	ВариантЛогирования=НастройкаПодключения.УровеньЛогирования;
	
	Если ВариантЛогирования=Перечисления.RA_УровниЛогирования.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если HTTPОтвет = Неопределено Тогда 
		Ошибка = Истина;
	Иначе 
		Ошибка=Не ПроверитьУспешностьВыполненияЗапроса(HTTPОтвет);//.КодСостояния<>КодУспешногоЗапроса;
	КонецЕсли;
	
	Если Не Ошибка И ВариантЛогирования=Перечисления.RA_УровниЛогирования.Ошибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЛога=РегистрыСведений.RA_ЛогиЗапросов.СоздатьМенеджерЗаписи();
	ЗаписьЛога.HTTPФункция=HTTPФункция;
	ЗаписьЛога.Сервер=АдресСервера;
	ЗаписьЛога.НачалоЗапроса=ДатаНачала;
	ЗаписьЛога.КонецЗапроса=ДатаОкончания;
	ЗаписьЛога.Идентификатор=Новый УникальныйИдентификатор;
	ЗаписьЛога.Запрос= HTTPЗапрос.АдресРесурса;
	ЗаписьЛога.ТелоЗапроса=HTTPЗапрос.ПолучитьТелоКакСтроку();
	ЗаписьЛога.КодСостояния= ?(HTTPОтвет = Неопределено,300,HTTPОтвет.КодСостояния);
	ЗаписьЛога.ИспользоватьHttps=ИспользоватьHTTPS;
	ЗаписьЛога.Ошибка=Ошибка;
	ЗаписьЛога.ЗаголовкиЗапроса=ПолучитьСтрокуЗаголовков(HTTPЗапрос.Заголовки);
	ЗаписьЛога.ЗаголовкиОтвета=?(HTTPОтвет=Неопределено,"",ПолучитьСтрокуЗаголовков(HTTPОтвет.Заголовки));
	ЗаписьЛога.ТелоОтвета=?(HTTPОтвет = Неопределено,"См. журнал регистрации.",HTTPОтвет.ПолучитьТелоКакСтроку());
	
	ЗаписьЛога.НастройкаПодключения=НастройкаПодключения;

	ЗаписьЛога.Записать(Истина);	
КонецПроцедуры

Функция СформироватьЗаголовкиЗапроса(ПараметрыПодключения) Экспорт
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Host", ПараметрыПодключения.АдресСервера);
	Если ЗначениеЗаполнено(ПараметрыПодключения.КлючAPI) Тогда
		Заголовки.Вставить("X-Redmine-API-Key", ПараметрыПодключения.КлючAPI);
	Иначе
		Заголовки.Вставить("Authorization", "Basic " + КодироватьСтрокуВBase64(ПараметрыПодключения.Логин + ":" + ПараметрыПодключения.Пароль));
	КонецЕсли;
	Заголовки.Вставить("Accept", "application/json; charset=utf-8");
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат Заголовки;
КонецФункции

Функция ВыполнитьHTTPЗапрос(АдресСервера,Запрос,ТелоЗапроса,Заголовки,ИспользоватьHTTPS,НастройкаПодключения,HTTPФункция="GET") 
	Если ИспользоватьHTTPS Тогда                                                                               
		HTTPСоединение = Новый HTTPСоединение(АдресСервера,,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Иначе
		HTTPСоединение = Новый HTTPСоединение(АдресСервера);
	КонецЕсли;
	
	HTTPЗапрос     = Новый HTTPЗапрос(Запрос,Заголовки);
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	НачалоЗапроса=ТекущаяДатаСеанса();	
	Попытка
		Если ВРег(HTTPФункция)="GET" Тогда
			Результат      = HTTPСоединение.Получить(HTTPЗапрос);
		ИначеЕсли ВРег(HTTPФункция)="POST" Тогда
			Результат      = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ВРег(HTTPФункция)="DELETE" Тогда
			Результат      = HTTPСоединение.Удалить(HTTPЗапрос);
		ИначеЕсли ВРег(HTTPФункция)="PUT" Тогда 
			Результат      = HTTPСоединение.Записать(HTTPЗапрос);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		// исключение здесь говорит о том, что запрос не дошел до HTTP-Сервера
		Сообщить("_ Произошла сетевая ошибка!"+ОписаниеОшибки());
		//ВызватьИсключение;
		Результат=Неопределено;
	КонецПопытки;
	КонецЗапроса=ТекущаяДатаСеанса();
	ЗафиксироватьЛогЗапроса(АдресСервера,ИспользоватьHTTPS,HTTPЗапрос,Результат,НачалоЗапроса,КонецЗапроса,HTTPФункция,НастройкаПодключения);
	
	Возврат Результат;

КонецФункции

//GET Запрос
Функция GETЗапрос(Запрос,НастройкаПодключения) Экспорт
	
	ПараметрыПодключения=RA_RedmineПротоколПодключенияПовтИсп.ПолучитьПараметрыПодключения(НастройкаПодключения);
	
	Заголовки = СформироватьЗаголовкиЗапроса(ПараметрыПодключения);
	
	Возврат ВыполнитьHTTPЗапрос(ПараметрыПодключения.АдресСервера,Запрос,Неопределено,Заголовки,ПараметрыПодключения.ИспользоватьHTTPS,НастройкаПодключения,"GET");
	
КонецФункции

//POST запрос
Функция POSTЗапрос(Запрос,ТелоЗапроса,НастройкаПодключения) Экспорт
	
	ПараметрыПодключения=RA_RedmineПротоколПодключенияПовтИсп.ПолучитьПараметрыПодключения(НастройкаПодключения);
	
	Заголовки = СформироватьЗаголовкиЗапроса(ПараметрыПодключения);
	
	Возврат ВыполнитьHTTPЗапрос(ПараметрыПодключения.АдресСервера,Запрос,ТелоЗапроса,Заголовки,ПараметрыПодключения.ИспользоватьHTTPS,НастройкаПодключения,"POST");
	
КонецФункции

//DELETE запрос
Функция DELETEЗапрос(Запрос,НастройкаПодключения) Экспорт
	
	ПараметрыПодключения=RA_RedmineПротоколПодключенияПовтИсп.ПолучитьПараметрыПодключения(НастройкаПодключения);
	
	Заголовки = СформироватьЗаголовкиЗапроса(ПараметрыПодключения);
	
	Возврат ВыполнитьHTTPЗапрос(ПараметрыПодключения.АдресСервера,Запрос,Неопределено,Заголовки,ПараметрыПодключения.ИспользоватьHTTPS,НастройкаПодключения,"DELETE");
	
КонецФункции

//PUT запрос
Функция PUTЗапрос(Запрос,ТелоЗапроса,НастройкаПодключения) Экспорт
	
	ПараметрыПодключения=RA_RedmineПротоколПодключенияПовтИсп.ПолучитьПараметрыПодключения(НастройкаПодключения);
	Заголовки = СформироватьЗаголовкиЗапроса(ПараметрыПодключения);
	
	Возврат ВыполнитьHTTPЗапрос(ПараметрыПодключения.АдресСервера,Запрос,ТелоЗапроса,Заголовки,ПараметрыПодключения.ИспользоватьHTTPS,НастройкаПодключения,"PUT");
	
КонецФункции


