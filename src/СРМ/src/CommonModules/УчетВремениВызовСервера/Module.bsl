
////////////////////////////////////////////////////////////////////////////////
// УчетВремениВызовСервера
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ТекущиеТаймерыПользователя(Пользователь = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат УчетВремени.ТекущиеТаймерыПользователя(Пользователь,ДополнительныеПараметры);	
КонецФункции

Функция ЗафиксироватьОкончаниеРаботПоТекущимТаймерам(ТекущиеТаймеры, ПараметрыУчетаВремени) Экспорт
	Возврат УчетВремени.ЗафиксироватьОкончаниеРаботПоТекущимТаймерам(ТекущиеТаймеры, ПараметрыУчетаВремени);	
КонецФункции

Функция ОтразитьИзменениеТаймераУчетаВремени(Идентификатор, ПараметрыУчетаВремени) Экспорт
	Возврат УчетВремени.ОтразитьИзменениеТаймераУчетаВремени(Идентификатор, ПараметрыУчетаВремени);	
КонецФункции

Процедура УдалитьТаймер(Идентификатор) Экспорт
	УчетВремени.УдалитьТаймер(Идентификатор);	
КонецПроцедуры

Функция ВедетсяУчетВремени() Экспорт
	Возврат УчетВремени.ВедетсяУчетВремени();	
КонецФункции

Функция ДанныеТаймера(Идентификатор) Экспорт
	Возврат УчетВремени.ДанныеТаймера(Идентификатор);
КонецФункции

Функция СоздатьИСтартоватьТаймер(Предмет) Экспорт
	Возврат УчетВремени.СоздатьИСтартоватьТаймер(Предмет);
КонецФункции

Процедура СтартоватьТаймер(Идентификатор) Экспорт
	УчетВремени.СтартоватьТаймер(Идентификатор);
КонецПроцедуры

Функция СоздатьТаймер(Предмет) Экспорт
	Возврат УчетВремени.СоздатьТаймер(Предмет);
КонецФункции

Процедура ОстановитьТаймер(Идентификатор) Экспорт
	УчетВремени.ОстановитьТаймер(Идентификатор);
КонецПроцедуры


#Область РаботаСТаймерамиЧерезПолеHTML

Функция ДанныеТаймеровДляВыводаВПолеHTML() Экспорт
	ДопПараметры=Новый Структура;
	ДопПараметры.Вставить("ДанныеДляРаботыНаКлиенте", Истина);
	
	ТекущиеТаймеры=ТекущиеТаймерыПользователя(,ДопПараметры);
	
	МассивТаймеровДляПоляHTML=Новый Массив;
	Для Каждого ТекТаймер Из ТекущиеТаймеры Цикл
		НовыйТаймер=Новый Структура;
		НовыйТаймер.Вставить("id", ТекТаймер.Идентификатор);
		НовыйТаймер.Вставить("start",ОбщегоНазначенияКлиентСервер.ДатаUnixTimeИз1С(ТекТаймер.ДатаНачала));
		НовыйТаймер.Вставить("end",ОбщегоНазначенияКлиентСервер.ДатаUnixTimeИз1С(ТекТаймер.ДатаОкончания));
		НовыйТаймер.Вставить("comment",ТекТаймер.Комментарий);
		НовыйТаймер.Вставить("action",Строка(ТекТаймер.ВидДеятельности));
		НовыйТаймер.Вставить("context",Строка(ТекТаймер.Предмет));
		Если ЗначениеЗаполнено(ТекТаймер.Предмет) Тогда
			НовыйТаймер.Вставить("contextUrl", ПолучитьНавигационнуюСсылку(ТекТаймер.Предмет));
		Иначе
			НовыйТаймер.Вставить("contextUrl","");
		КонецЕсли;
		НовыйТаймер.Вставить("duration",ТекТаймер.Часов);
		НовыйТаймер.Вставить("createdAt",ТекТаймер.ДатаСозданияВМилисекундах);
  		
		МассивТаймеровДляПоляHTML.Добавить(НовыйТаймер);
	КонецЦикла;
	
	ДоступныеВидыДеятельностиУчетаТрудозатрат=УчетВремени.ДоступныеВидыДеятельностиУчетаТрудозатрат();

	МассивВидовДеятельности=Новый Массив;
	Для Каждого ТекВид Из МассивВидовДеятельности Цикл
		СтруктураВида=Новый Структура;
		СтруктураВида.Вставить("id", Строка(ТекВид.УникальныйИдентификатор()));
		СтруктураВида.Вставить("name", Строка(ТекВид));
		
		МассивВидовДеятельности.Добавить(СтруктураВида);
	КонецЦикла;
	
	
	СтруктураВозврата=Новый Структура;
	СтруктураВозврата.Вставить("Таймеры",ОбщегоНазначенияКлиентСервер.ЗаписатьДанныеJSON(МассивТаймеровДляПоляHTML));
	СтруктураВозврата.Вставить("КоличествоТаймеров",ТекущиеТаймеры.Количество());
	СтруктураВозврата.Вставить("ТекущиеТаймеры",ТекущиеТаймеры);
	СтруктураВозврата.Вставить("ВидыДеятельности",ОбщегоНазначенияКлиентСервер.ЗаписатьДанныеJSON(МассивВидовДеятельности));
	Возврат СтруктураВозврата;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс



#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти
