////////////////////////////////////////////////////////////////////////////////
// УчетВремени
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ТекущиеТаймерыПользователя(Пользователь = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПредметДляОтбора = Неопределено;
	ПредметДляСортировки = Неопределено;
	ДанныеДляРаботыНаКлиенте = Ложь;
	Если ДополнительныеПараметры.Свойство("ПредметДляОтбора") Тогда
		ПредметДляОтбора = ДополнительныеПараметры.ПредметДляОтбора;
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство("ПредметДляСортировки") Тогда
		ПредметДляСортировки = ДополнительныеПараметры.ПредметДляСортировки;
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство("ДанныеДляРаботыНаКлиенте") Тогда
		ДанныеДляРаботыНаКлиенте = ДополнительныеПараметры.ДанныеДляРаботыНаКлиенте;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таймеры.Идентификатор КАК Идентификатор,
	|	Таймеры.Пользователь КАК Пользователь,
	|	Таймеры.Предмет КАК Предмет,
	|	Таймеры.ДатаНачала КАК ДатаНачала,
	|	Таймеры.ДатаОкончания КАК ДатаОкончания,
	|	Таймеры.Часов КАК Часов,
	|	Таймеры.СчетчикЗапусков КАК СчетчикЗапусков,
	|	Таймеры.Комментарий КАК Комментарий,
	|	Таймеры.ВидДеятельности КАК ВидДеятельности,
	|	ВЫБОР
	|		КОГДА &ПредметДляСортировки = НЕОПРЕДЕЛЕНО
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Таймеры.Предмет = &ПредметДляСортировки
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ПорядокПоПредмету,
	|	ВЫБОР
	|		КОГДА Таймеры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокПоЗавершению
	|ИЗ
	|	РегистрСведений.Таймеры КАК Таймеры
	|ГДЕ
	|	Таймеры.Пользователь = &Пользователь
	|	И ВЫБОР
	|			КОГДА &ОтборПоПредмету
	|				ТОГДА Таймеры.Предмет = &ПредметДляОтбора
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокПоПредмету,
	|	ПорядокПоЗавершению,
	|	ДатаОкончания УБЫВ,
	|	ДатаНачала";
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	КонецЕсли;
	Запрос.УстановитьПараметр("ПредметДляОтбора", ПредметДляОтбора);
	Запрос.УстановитьПараметр("ОтборПоПредмету", ЗначениеЗаполнено(ПредметДляОтбора));
	Запрос.УстановитьПараметр("ПредметДляСортировки", ПредметДляСортировки);
	
	ТаблицаТаймеров = Запрос.Выполнить().Выгрузить();
	
	Если ДанныеДляРаботыНаКлиенте Тогда
		ТаблицаТаймеров = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаТаймеров);		
	КонецЕсли;
	
	Возврат ТаблицаТаймеров;
	
КонецФункции

Функция ЗафиксироватьОкончаниеРаботПоТекущимТаймерам(ТекущиеТаймеры, ПараметрыУчетаВремени) Экспорт
	
	НачатьТранзакцию();
	
	Для Каждого ПараметрыТаймера Из ТекущиеТаймеры Цикл
		
		Набор = РегистрыСведений.Таймеры.СоздатьНаборЗаписей();
		Набор.Отбор.Идентификатор.Установить(ПараметрыТаймера.Идентификатор);
		Набор.Прочитать();
		
		Если Набор.Количество() = 1 Тогда
			
			Запись = Набор[0];
			
			Продолжительность = УчетВремениКлиентСервер.РазностьДатВЧасах(Запись.ДатаНачала, ПараметрыУчетаВремени.ДатаОкончания);
			
			ПараметрыТаймера.Вставить("Часов", Продолжительность);
			
			Запись.ДатаОкончания = ПараметрыУчетаВремени.ДатаОкончания;
			Запись.Часов = Запись.Часов + Продолжительность;
			
			ДобавитьПериодУчетаВремениВЗапись(Запись);
			
			Набор.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

Функция ОтразитьИзменениеТаймераУчетаВремени(Идентификатор, ПараметрыУчетаВремени) Экспорт
	
	Набор = РегистрыСведений.Таймеры.СоздатьНаборЗаписей();
	Набор.Отбор.Идентификатор.Установить(Идентификатор);
	Набор.Прочитать();
	
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
		Запись.Идентификатор = Идентификатор;
		Запись.Пользователь = Пользователи.ТекущийПользователь();
	Иначе
		Запись = Набор[0];
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Запись, ПараметрыУчетаВремени);
	
	ДобавитьПериодУчетаВремениВЗапись(Запись);
	
	Набор.Записать();
		
	Возврат Истина;	
	
КонецФункции

Функция УдалитьТаймер(Идентификатор) Экспорт
	
	Набор = РегистрыСведений.Таймеры.СоздатьНаборЗаписей();
	Набор.Отбор.Идентификатор.Установить(Идентификатор);
	Набор.Записать();
		
	Возврат Истина;	
	
КонецФункции

Функция ВедетсяУчетВремени() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таймеры.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.Таймеры КАК Таймеры
	|ГДЕ
	|	Таймеры.Пользователь = &Пользователь
	|	И Таймеры.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	|	И Таймеры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

Функция ПериодыУчетаВремениПоТаймеру(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таймеры.Периоды КАК Периоды
	|ИЗ
	|	РегистрСведений.Таймеры КАК Таймеры
	|ГДЕ
	|	Таймеры.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Периоды;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПериодУчетаВремениВЗапись(Запись)
	
	Если ЗначениеЗаполнено(Запись.ДатаНачала) И ЗначениеЗаполнено(Запись.ДатаОкончания) Тогда
		
		СтрокаПериода = ПредставлениеПериодаУчетаВремени(Запись.ДатаНачала, Запись.ДатаОкончания);
		МассивПериодов = СтрРазделить(Запись.Периоды, " ", Ложь);
		Если МассивПериодов.Найти(СтрокаПериода) = Неопределено Тогда
			МассивПериодов.Добавить(СтрокаПериода);	
			Запись.Периоды = СтрСоединить(МассивПериодов, " ");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПредставлениеПериодаУчетаВремени(ДатаНачала, ДатаОкончания)
	
	Возврат СтрШаблон("[%1-%2]", Формат(ДатаНачала, "ДФ=HH:mm"), Формат(ДатаОкончания, "ДФ=HH:mm"));
	
КонецФункции

#КонецОбласти
