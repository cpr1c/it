
// Возвращает список статусов не выполненных задач
// 
// Возвращаемое значение:
//   - СписокЗначений
//
Функция СтатусыНеВыполненныхЗадач() Экспорт
	
	Возврат СтатусыСписка(Справочники.СпискиСтатусовЗадач.НеВыполненные);
	//УстановитьПривилегированныйРежим(Истина);
	
	//СписокСтатусов = Новый СписокЗначений;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	СтатусыЗадач.Ссылка КАК Ссылка,
	//|	СтатусыЗадач.Наименование КАК Наименование
	//|ИЗ
	//|	Справочник.СтатусыЗадач КАК СтатусыЗадач
	//|ГДЕ
	//|	НЕ СтатусыЗадач.Вид В (ЗНАЧЕНИЕ(Перечисление.ВидыСтатусовЗадач.Выполнена), ЗНАЧЕНИЕ(Перечисление.ВидыСтатусовЗадач.Закрыта))";
	//ВыборкаСтатусы = Запрос.Выполнить().Выбрать();
	//
	//Пока ВыборкаСтатусы.Следующий() Цикл
	//	СписокСтатусов.Добавить(ВыборкаСтатусы.Ссылка, ВыборкаСтатусы.Наименование);
	//КонецЦикла;
	//
	//Возврат СписокСтатусов;
	
КонецФункции

Функция СтатусЗадачиНовый() Экспорт
	
	Статусы = СтатусыСписка(Справочники.СпискиСтатусовЗадач.Новые);
	
	Если Статусы.Количество() > 0 Тогда
		Возврат Статусы[0].Значение;
	Иначе
		Возврат Справочники.СтатусыЗадач.ПустаяСсылка();
	КонецЕсли;
	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	СтатусыЗадач.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.СтатусыЗадач КАК СтатусыЗадач
	//|ГДЕ
	//|	СтатусыЗадач.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСтатусовЗадач.Новая)";
	//ВыборкаСтатусы = Запрос.Выполнить().Выбрать();
	//
	//Если ВыборкаСтатусы.Следующий() Тогда
	//	Возврат ВыборкаСтатусы.Ссылка;
	//КонецЕсли;
	
КонецФункции

Функция СтатусЗадачиВРаботе() Экспорт
	
	Статусы = СтатусыСписка(Справочники.СпискиСтатусовЗадач.ВРаботе);
	
	Если Статусы.Количество() > 0 Тогда
		Возврат Статусы[0].Значение;
	Иначе
		Возврат Справочники.СтатусыЗадач.ПустаяСсылка();
	КонецЕсли;
	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	СтатусыЗадач.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.СтатусыЗадач КАК СтатусыЗадач
	//|ГДЕ
	//|	СтатусыЗадач.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСтатусовЗадач.ВРаботе)";
	//ВыборкаСтатусы = Запрос.Выполнить().Выбрать();
	//
	//Если ВыборкаСтатусы.Следующий() Тогда
	//	Возврат ВыборкаСтатусы.Ссылка;
	//КонецЕсли;
	
КонецФункции

Функция УпорядоченныйСписокСтатусов() Экспорт
	
	СписокСтатусов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыЗадач.Ссылка КАК Ссылка,
	|	СтатусыЗадач.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СтатусыЗадач КАК СтатусыЗадач
	|ГДЕ
	|	НЕ СтатусыЗадач.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыЗадач.РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокСтатусов.Добавить(Выборка.Ссылка, Выборка.Наименование);	
	КонецЦикла;
	
	Возврат СписокСтатусов;
	
КонецФункции

Функция СтатусыСписка(СписокСтатусов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпискиСтатусовЗадачСтатусы.Статус КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(СпискиСтатусовЗадачСтатусы.Статус) КАК СтатусПредставление
	|ИЗ
	|	Справочник.СпискиСтатусовЗадач.Статусы КАК СпискиСтатусовЗадачСтатусы
	|ГДЕ
	|	СпискиСтатусовЗадачСтатусы.Ссылка = &СписокСтатусов
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпискиСтатусовЗадачСтатусы.Статус.РеквизитДопУпорядочивания";
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	ВыборкаСтатусы = Запрос.Выполнить().Выбрать();
	
	Статусы = Новый СписокЗначений;
	
	Пока ВыборкаСтатусы.Следующий() Цикл
		Статусы.Добавить(ВыборкаСтатусы.Статус, ВыборкаСтатусы.СтатусПредставление);
	КонецЦикла;
	
	Возврат Статусы;
	
КонецФункции

Функция СформироватьТекстHTMLДляПредставленияИсторииЗадачи() Экспорт
	Возврат ПолучитьОбщийМакет("ПолеИсторииЗадачи").ПолучитьТекст();
КонецФункции
