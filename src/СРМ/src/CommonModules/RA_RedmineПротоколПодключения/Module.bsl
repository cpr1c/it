Функция ПолучитьОбщийРазмерВыборки(Запрос,НастройкаПодключения) Экспорт
	
	Ответ=RA_Запросы.GETЗапрос(Запрос,НастройкаПодключения);
	
	Если Ответ=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
		Попытка
			СтруктураРезультата=RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());
		Исключение
			СтруктураРезультата=Неопределено;
		КонецПопытки;
	Иначе
		СтруктураРезультата=Неопределено;
	КонецЕсли;
	
	Если СтруктураРезультата=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураРезультата.Свойство("total_count") Тогда
		Возврат СтруктураРезультата.total_count;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМассивПроектов(НастройкаПодключения) Экспорт
	
	//GET /projects.json
	Запрос="/projects.json";
	
	ОбщийРазмерВыборки=ПолучитьОбщийРазмерВыборки(Запрос,НастройкаПодключения);
	
	РазмерПорции=100;
	КоличествоСтраниц = ОбщийРазмерВыборки / РазмерПорции;
	Если  Цел(КоличествоСтраниц) < КоличествоСтраниц Тогда
		КоличествоСтраниц=Цел(КоличествоСтраниц)+ 1;
	КонецЕсли;
	
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("offset", 0); //смещение
	ПараметрыЗапроса.Вставить("limit", РазмерПорции); //количество задач в выборке, по умолчанию 25, максимум 100
		
	МассивПроектов=Новый Массив;
	
	Для НомерСтраницы=1 По КоличествоСтраниц Цикл
		ТекЗапрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
		Ответ=RA_Запросы.GETЗапрос(ТекЗапрос,НастройкаПодключения);
		
		Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
			Прервать;
		КонецЕсли;
		
		СтруктураОтвета=RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());

		Для каждого Элемент ИЗ СтруктураОтвета.projects Цикл
			МассивПроектов.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьСтруктуру(Элемент));
		КонецЦикла;
		
		ПараметрыЗапроса.offset=ПараметрыЗапроса.offset+ПараметрыЗапроса.limit;

	КонецЦикла;
	
	Возврат МассивПроектов;	
	
КонецФункции

Функция ПолучитьМассивВерсийПоПроекту(НастройкаПодключения,ИдентификаторПроекта) Экспорт
	
	//GET /GET /projects/foo/versions.json
	Запрос="/projects/"+ИдентификаторПроекта+"/versions.json";
	
	ОбщийРазмерВыборки=ПолучитьОбщийРазмерВыборки(Запрос,НастройкаПодключения);
	
	Если Не ЗначениеЗаполнено(ОбщийРазмерВыборки) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	РазмерПорции=100;
	КоличествоСтраниц = ОбщийРазмерВыборки / РазмерПорции;
	Если  Цел(КоличествоСтраниц) < КоличествоСтраниц Тогда
		КоличествоСтраниц=Цел(КоличествоСтраниц)+ 1;
	КонецЕсли;
	
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("offset", 0); //смещение
	ПараметрыЗапроса.Вставить("limit", РазмерПорции); //количество задач в выборке, по умолчанию 25, максимум 100
		
	Массив=Новый Массив;
	
	Для НомерСтраницы=1 По КоличествоСтраниц Цикл
		
		ТекЗапрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
		Ответ=RA_Запросы.GETЗапрос(ТекЗапрос,НастройкаПодключения);
		
		Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
			Прервать;
		КонецЕсли;
		
		СтруктураОтвета=RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());

		Для каждого Элемент ИЗ СтруктураОтвета.versions Цикл
			Массив.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьСтруктуру(Элемент));
		КонецЦикла;
		
		ПараметрыЗапроса.offset=ПараметрыЗапроса.offset+ПараметрыЗапроса.limit;

	КонецЦикла;
	
	Возврат Массив;
		
КонецФункции

Функция ПолучитьМассивВерсий(НастройкаПодключения) Экспорт
	
	МассивПроектов=ПолучитьМассивПроектов(НастройкаПодключения);
	
	МассивВерсий=Новый Массив;
	СписокИдентификаторов=Новый СписокЗначений;
		
	Для Каждого ТекПроект Из МассивПроектов Цикл
		
		ВременныйМассивВерсий=ПолучитьМассивВерсийПоПроекту(НастройкаПодключения, RA_ОбщегоНазначенияСервер.ФорматЧислоБезРазделителей(ТекПроект.id));
		
		Для Каждого ТекВерсия Из ВременныйМассивВерсий Цикл
			
			Если СписокИдентификаторов.НайтиПоЗначению(RA_ОбщегоНазначенияСервер.ФорматЧислоБезРазделителей(ТекВерсия.id))<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивВерсий.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьРекурсивно(ТекВерсия));
			СписокИдентификаторов.Добавить(RA_ОбщегоНазначенияСервер.ФорматЧислоБезРазделителей(ТекВерсия.id));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивВерсий;
	
КонецФункции

Функция ПолучитьМассивСтатусовЗадач(НастройкаПодключения) Экспорт
	
	//GET /issue_statuses.json
	Запрос="/issue_statuses.json";
	
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("offset", 0); //смещение
	ПараметрыЗапроса.Вставить("limit", 100); //количество задач в выборке, по умолчанию 25, максимум 100
		
	МассивСтатусов=Новый Массив;
	
	Запрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
	Ответ=RA_Запросы.GETЗапрос(Запрос,НастройкаПодключения);
		
	Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОтвета=RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());
	
	Для каждого Элемент ИЗ СтруктураОтвета.issue_statuses Цикл
		МассивСтатусов.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьСтруктуру(Элемент));
	КонецЦикла;
	
	Возврат МассивСтатусов;	
	
КонецФункции

Функция ПолучитьМассивВидовАктивности(НастройкаПодключения) Экспорт
	
	//GET /enumerations/time_entry_activities.json
	Запрос="/enumerations/time_entry_activities.json";
	
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("offset", 0); //смещение
	ПараметрыЗапроса.Вставить("limit", 100); //количество задач в выборке, по умолчанию 25, максимум 100
	
	МассивРезультата=Новый Массив;
	
	Запрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
	Ответ=RA_Запросы.GETЗапрос(Запрос,НастройкаПодключения);
		
	Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОтвета=RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());
	
	Для каждого Элемент ИЗ СтруктураОтвета.time_entry_activities Цикл
		МассивРезультата.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьСтруктуру(Элемент));
	КонецЦикла;
	
	Возврат МассивРезультата;	
	
КонецФункции

Функция ПолучитьМассивПриоритетов(НастройкаПодключения) Экспорт
	
	//GET /enumerations/issue_priorities.json
	Запрос="/enumerations/issue_priorities.json";
	
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("offset", 0); //смещение
	ПараметрыЗапроса.Вставить("limit", 100); //количество задач в выборке, по умолчанию 25, максимум 100
	
	МассивРезультата=Новый Массив;
	
	Запрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
	Ответ=RA_Запросы.GETЗапрос(Запрос,НастройкаПодключения);
		
	Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОтвета=RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());
	
	Для каждого Элемент ИЗ СтруктураОтвета.issue_priorities Цикл
		МассивРезультата.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьСтруктуру(Элемент));
	КонецЦикла;
	
	Возврат МассивРезультата;	
	
КонецФункции

Функция ПолучитьМассивЗадачПоФильтрам(НастройкаПодключения,Фильтры=Неопределено) Экспорт
	
	//GET /issues
	Запрос="/issues.json";
	
	РазмерПорции=100;
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("offset", 0); //смещение
	ПараметрыЗапроса.Вставить("limit", РазмерПорции); //количество задач в выборке, по умолчанию 25, максимум 100
	ПараметрыЗапроса.Вставить("status_id", "*"); //Possible values: open, closed, * to get open and closed issues, status id
	
	Если Фильтры<>Неопределено Тогда
		Для Каждого КлючЗначение Из Фильтры Цикл
			ПараметрыЗапроса.Вставить(КлючЗначение.Ключ,КлючЗначение.Значение);
		КонецЦиклА;
	КонецЕсли;
	
	ТекЗапрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
	ОбщийРазмерВыборки=ПолучитьОбщийРазмерВыборки(ТекЗапрос,НастройкаПодключения);
	
	КоличествоСтраниц = ОбщийРазмерВыборки / РазмерПорции;
	Если  Цел(КоличествоСтраниц) < КоличествоСтраниц Тогда
		КоличествоСтраниц=Цел(КоличествоСтраниц)+ 1;
	КонецЕсли;
		
	МассивРезультата=Новый Массив;
	
	Для НомерСтраницы=1 По КоличествоСтраниц Цикл
		
		ТекЗапрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
		Ответ=RA_Запросы.GETЗапрос(ТекЗапрос,НастройкаПодключения);
		
		Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
			Прервать;
		КонецЕсли;
		
		СтруктураОтвета=RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());

		Для каждого Элемент ИЗ СтруктураОтвета.issues Цикл
			МассивРезультата.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьСтруктуру(Элемент));
		КонецЦикла;
		
		ПараметрыЗапроса.offset=ПараметрыЗапроса.offset+ПараметрыЗапроса.limit;
		
	КонецЦикла;
	
	Возврат МассивРезультата;
		
КонецФункции

Функция ПолучитьДанныеПоЗадаче(НастройкаПодключения, ИдентификаторЗадачи, ВключаемыеДанные="") Экспорт
	
	//GET GET /issues/[id].[format]
	Запрос="/issues/"+ИдентификаторЗадачи+".json";
	
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("offset", 0); //смещение
	ПараметрыЗапроса.Вставить("limit", 100); //количество задач в выборке, по умолчанию 25, максимум 100
	Если RA_RedmineПротоколПодключенияПовтИсп.ПолучитьПараметрыПодключения(НастройкаПодключения).ЗагружатьИзмененияЗадач Тогда
		ПараметрыЗапроса.Вставить("include", "journals"); //смещение
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВключаемыеДанные) Тогда
		Если Не ПараметрыЗапроса.Свойство("include") Тогда
			ПараметрыЗапроса.Вставить("include", ВключаемыеДанные);
		Иначе
			ПараметрыЗапроса.include=ПараметрыЗапроса.include+","+ВключаемыеДанные;
		КонецЕсли;
	КонецЕсли;
 	
	Запрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
	Ответ=RA_Запросы.GETЗапрос(Запрос,НастройкаПодключения);
		
	Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОтвета=RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());
	
	Возврат СтруктураОтвета.issue;	
	
КонецФункции

Функция ПолучитьМассивПользователей(НастройкаПодключения) Экспорт
	
	//GET /users.json
	Запрос="/users.json";
	
	ОбщийРазмерВыборки=ПолучитьОбщийРазмерВыборки(Запрос,НастройкаПодключения);
	
	РазмерПорции=100;
	КоличествоСтраниц = ОбщийРазмерВыборки / РазмерПорции;
	Если  Цел(КоличествоСтраниц) < КоличествоСтраниц Тогда
		КоличествоСтраниц=Цел(КоличествоСтраниц)+ 1;
	КонецЕсли;
	
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("offset", 0); //смещение
	ПараметрыЗапроса.Вставить("limit", РазмерПорции); //количество задач в выборке, по умолчанию 25, максимум 100
		
	МассивПроектов=Новый Массив;
	
	Для НомерСтраницы=1 По КоличествоСтраниц Цикл
		ТекЗапрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
		Ответ=RA_Запросы.GETЗапрос(ТекЗапрос,НастройкаПодключения);
		
		Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
			Прервать;
		КонецЕсли;
		
		СтруктураОтвета=RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());

		Для каждого Элемент ИЗ СтруктураОтвета.users Цикл
			МассивПроектов.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьСтруктуру(Элемент));
		КонецЦикла;
		
		ПараметрыЗапроса.offset=ПараметрыЗапроса.offset+ПараметрыЗапроса.limit;

	КонецЦикла;
	
	Возврат МассивПроектов;	
	
КонецФункции

// Описание
// 
// Параметры:
// 	НомерЗадачи
// 	НастройкаПодключения
// Возвращаемое значение:
// 	Массив - Описание
//
Функция ПолучитьТрудозатратыПоЗадаче(НомерЗадачи,НастройкаПодключения) Экспорт
	
	//GET /time_entries.json
	Запрос="/time_entries.json";
	
	//РазмерПорции=100;
	
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("issue_id", НомерЗадачи); 
	
	СтрокаЗапроса=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
	Ответ=RA_Запросы.GETЗапрос(СтрокаЗапроса,НастройкаПодключения);
	
	МассивТрудозатрат = Новый Массив;
	Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
		Возврат МассивТрудозатрат;
	КонецЕсли;

	СтруктураОтвета = RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());

	Для каждого Элемент ИЗ СтруктураОтвета.time_entries Цикл
		МассивТрудозатрат.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьСтруктуру(Элемент));
	КонецЦикла; 

	Возврат МассивТрудозатрат;
	
КонецФункции

// Описание
// 
// Параметры:
// 	Фильтры- Структура с возможными ключами
//	issue_id, project_id, user_id, 
// 	НастройкаПодключения
// Возвращаемое значение:
// 	Массив - Описание
//
Функция ПолучитьТрудозатратыПоФильтрам(НастройкаПодключения,Фильтры) Экспорт
	
	//GET /time_entries
	Запрос="/time_entries.json";
	
	РазмерПорции=100;
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("offset", 0); //смещение
	ПараметрыЗапроса.Вставить("limit", РазмерПорции); //количество задач в выборке, по умолчанию 25, максимум 100
	
	Если Фильтры<>Неопределено Тогда
		Для Каждого КлючЗначение Из Фильтры Цикл
			ПараметрыЗапроса.Вставить(КлючЗначение.Ключ,КлючЗначение.Значение);
		КонецЦиклА;
	КонецЕсли;
	
	ТекЗапрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
	ОбщийРазмерВыборки=ПолучитьОбщийРазмерВыборки(ТекЗапрос,НастройкаПодключения);
	
	КоличествоСтраниц = ОбщийРазмерВыборки / РазмерПорции;
	Если  Цел(КоличествоСтраниц) < КоличествоСтраниц Тогда
		КоличествоСтраниц=Цел(КоличествоСтраниц)+ 1;
	КонецЕсли;
		
	МассивРезультата=Новый Массив;
	
	Для НомерСтраницы=1 По КоличествоСтраниц Цикл
		ТекЗапрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
		Ответ=RA_Запросы.GETЗапрос(ТекЗапрос,НастройкаПодключения);
		
		Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
			Прервать;
		КонецЕсли;
		
		СтруктураОтвета=RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());

		Для каждого Элемент ИЗ СтруктураОтвета.time_entries Цикл
			МассивРезультата.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьСтруктуру(Элемент));
		КонецЦикла;
		
		ПараметрыЗапроса.offset=ПараметрыЗапроса.offset+ПараметрыЗапроса.limit;
	КонецЦикла;
	
	Возврат МассивРезультата;
		
КонецФункции

// Описание
// 
// Параметры:
// 	Дата
// 	НомерЗадачи
// 	ИдентификаторАктивности
// 	Комментарий
// 	
// Возвращаемое значение:
// 	
Функция ДобавитьТрудозатратыКЗадаче(Дата, НомерЗадачи,	ИдентификаторАктивности, КоличествоЧасов, Комментарий,НастройкаПодключения) Экспорт 
 	
 	//POST /time_entries.xml
	//Creates a time entry.
	//
	//Parameters:
	//
	//time_entry (required): a hash of the time entry attributes, including:
	//issue_id or project_id (only one is required): the issue id or project id to log time on
	//spent_on: the date the time was spent (default to the current date)
	//hours (required): the number of spent hours
	//activity_id: the id of the time activity. This parameter is required unless a default activity is defined in Redmine.
	//comments: short description for the entry (255 characters max)	
	
	Запрос="/time_entries.json";
	
	СтруктураТела=Новый Структура;
	СтруктураТела.Вставить("issue_id",НомерЗадачи);
	СтруктураТела.Вставить("spent_on",Дата);
	СтруктураТела.Вставить("hours",КоличествоЧасов);
	СтруктураТела.Вставить("activity_id",ИдентификаторАктивности);
	СтруктураТела.Вставить("comments",Комментарий);
	
	Трудозатрата=Новый Структура;
	Трудозатрата.Вставить("time_entry",СтруктураТела);
	
	Успешно=Истина;
	
	Ответ=RA_Запросы.POSTЗапрос(Запрос,RA_ОбщегоНазначенияСервер.ЗаписатьДанныеJSON(Трудозатрата),НастройкаПодключения);
		
	Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
		Успешно=Ложь;
	КонецЕсли;
	
	Возврат Успешно;
	
 КонецФункции

Функция ПолучитьМассивКатегорийЗадачПоПроекту(НастройкаПодключения,ИдентификаторПроекта) Экспорт
	
	//GET /projects/:project_id/issue_categories.json
	Запрос="/projects/"+ИдентификаторПроекта+"/issue_categories.json";
	
	ОбщийРазмерВыборки=ПолучитьОбщийРазмерВыборки(Запрос,НастройкаПодключения);
	
	Если Не ЗначениеЗаполнено(ОбщийРазмерВыборки) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	РазмерПорции=100;
	КоличествоСтраниц = ОбщийРазмерВыборки / РазмерПорции;
	Если  Цел(КоличествоСтраниц) < КоличествоСтраниц Тогда
		КоличествоСтраниц=Цел(КоличествоСтраниц)+ 1;
	КонецЕсли;
	
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("offset", 0); //смещение
	ПараметрыЗапроса.Вставить("limit", РазмерПорции); //количество задач в выборке, по умолчанию 25, максимум 100
		
	Массив=Новый Массив;
	
	Для НомерСтраницы=1 По КоличествоСтраниц Цикл
		
		ТекЗапрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
		Ответ=RA_Запросы.GETЗапрос(ТекЗапрос,НастройкаПодключения);
		
		Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
			Прервать;
		КонецЕсли;
		
		СтруктураОтвета=RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());

		Для каждого Элемент ИЗ СтруктураОтвета.issue_categories Цикл
			Массив.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьСтруктуру(Элемент));
		КонецЦикла;
		
		ПараметрыЗапроса.offset=ПараметрыЗапроса.offset+ПараметрыЗапроса.limit;

	КонецЦикла;
	
	Возврат Массив;
		
КонецФункции

Функция ПолучитьМассивКатегорийЗадач(НастройкаПодключения) Экспорт
	
	МассивПроектов=ПолучитьМассивПроектов(НастройкаПодключения);
	
	МассивКатегорийЗадач=Новый Массив;
	СписокИдентификаторов=Новый СписокЗначений;
		
	Для Каждого ТекПроект Из МассивПроектов Цикл
		
		ВременныйМассивКатегорийЗадач=ПолучитьМассивКатегорийЗадачПоПроекту(НастройкаПодключения,RA_ОбщегоНазначенияСервер.ФорматЧислоБезРазделителей(ТекПроект.id));
		
		Для Каждого ТекКатегорияЗадач Из ВременныйМассивКатегорийЗадач Цикл
			
			Если СписокИдентификаторов.НайтиПоЗначению(RA_ОбщегоНазначенияСервер.ФорматЧислоБезРазделителей(ТекКатегорияЗадач.id))<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивКатегорийЗадач.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьРекурсивно(ТекКатегорияЗадач));
			СписокИдентификаторов.Добавить(RA_ОбщегоНазначенияСервер.ФорматЧислоБезРазделителей(ТекКатегорияЗадач.id));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивКатегорийЗадач;
	
КонецФункции

Функция ПолучитьМассивТрекеров(НастройкаПодключения) Экспорт
	
	//GET /trackers.xml
	Запрос="/trackers.json";
	
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("offset", 0); //смещение
	ПараметрыЗапроса.Вставить("limit", 100); //количество задач в выборке, по умолчанию 25, максимум 100
	
	МассивРезультата=Новый Массив;
	
	Запрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
	Ответ=RA_Запросы.GETЗапрос(Запрос,НастройкаПодключения);
		
	Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОтвета=RA_ОбщегоНазначенияСервер.ПрочитатьДанныеJSON(Ответ.ПолучитьТелоКакСтроку());
	
	Для каждого Элемент ИЗ СтруктураОтвета.trackers Цикл
		МассивРезультата.Добавить(RA_ОбщегоНазначенияСервер.СкопироватьСтруктуру(Элемент));
	КонецЦикла;
	
	Возврат МассивРезультата;	
	
КонецФункции

Функция ПолучитьДанныеВложения(НастройкаПодключения, Идентификатор, ИмяФайла) Экспорт
	//GET /trackers.xml"http://crm.cprit.ru/attachments/download/896/%D0%91%D0%B5%D0%B7%D1%8B%D0%BC%D1%8F%D0%BD%D0%BD%D1%8B%D0%B9.png"
	Запрос="/attachments/download/"+Идентификатор+"/"+ИмяФайла;
	
//	ПараметрыЗапроса=Новый Структура;
//	ПараметрыЗапроса.Вставить("offset", 0); //смещение
//	ПараметрыЗапроса.Вставить("limit", 100); //количество задач в выборке, по умолчанию 25, максимум 100
	
	МассивРезультата=Новый Массив;
	
//	Запрос=Запрос+RA_Запросы.ПолучитьСтрокуПараметровПоСтруктуре(ПараметрыЗапроса);
	Ответ=RA_Запросы.GETЗапрос(Запрос,НастройкаПодключения);
		
	Если Не RA_Запросы.ПроверитьУспешностьВыполненияЗапроса(Ответ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ответ.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции