#Область ПрограммныйИнтерфейс

// Возвращаются реквизиты юридического лица по данным ЕГРЮЛ (наименование, адрес, коды и т.д.).
//
// Параметры:
//  ИНН  - Строка - ИНН юридического лица, реквизиты которого надо получить.
//
// Возвращаемое значение:
//   Структура - реквизиты юридического лица. 
//   	* ИНН - Строка - ИНН юридического лица.
//   	* КПП - Строка - КПП юридического лица.
//   	* Наименование - Строка - представление юридического лица в учетной программе.
//   	* НаименованиеПолное - Строка - полное наименование юридического лица.
//   	* НаименованиеСокращенное - Строка - сокращенное наименование юридического лица.
//   	* РегистрационныйНомер - Строка - ОГРН юридического лица.
//   	* ПравоваяФорма - Строка, Неопределено - правовая форма юридического лица.
//   	* ЮридическийАдрес - Структура, Неопределено - данные об юридическом адресе.
//   		** КонтактнаяИнформация - Строка - данные в формате XML.
//   		** Представление - Строка - представление адреса.
//   		** Комментарий - Строка - произвольный комментарий.
//   	* Телефон - Структура, Неопределено - данные о телефоне.
//   		** КонтактнаяИнформация - Строка - данные в формате XML.
//   		** Представление - Строка - представление телефона.
//   		** Комментарий - Строка - произвольный комментарий.
//   	* Руководитель - Структура, Неопределено - данные о руководителе.
//   		** Должность - Строка - должность руководителя.
//   		** Фамилия - Строка - фамилия руководителя.
//   		** Имя - Строка - имя руководителя.
//   		** Отчество - Строка - отчество руководителя.
//   		** Представление - Строка - ФИО руководителя.
//   		** ИНН - Строка - ИНН руководителя.
//   		** ДатаЗаписи - Дата - дата записи о руководителе.
//   	* РегистрацияВНалоговомОргане - Структура, Неопределено - данные о регистрации в ИФНС.
//   		** Код - Строка - код налогового органа.
//   		** Наименование - Строка - наименование налогового органа.
//   		** ОКТМО - Строка - код ОКТМО налогового органа.
//   		** ОКАТО - Строка - код ОКАТО налогового органа.
//   		** ДатаРегистрации - Дата - дата постановки на учет в налоговом органе.
//   	* ДатаРегистрации - Дата - дата регистрации юридического лица.
//   	* РегистрацияВПенсионномФонде - Структура, Неопределено - данные о регистрации в ПФР.
//   		** РегистрационныйНомерПФР - Строка - регистрационный номер юридического лица в ПФР.
//   		** КодОрганаПФР - Строка - код органа ПФР.
//   		** НаименованиеОрганаПФР - Строка - наименование органа ПФР.
//   		** ДатаРегистрации - Дата - дата постановки на учет в ПФР.
//   	* РегистрацияВФСС - Структура, Неопределено - данные о регистрации в ФСС.
//   		** РегистрационныйНомерФСС - Строка - регистрационный номер юридического лица в ФСС.
//   		** КодПодчиненности - Строка - код подчиненности органа ФСС.
//   		** КодОрганаФСС - Строка - код органа ФСС.
//   		** НаименованиеОрганаФСС - Строка - наименование органа ФСС.
//   		** ДатаРегистрации - Дата - дата постановки на учет в ФСС.
//   	* КодОКВЭД - Строка - основной код по классификатору ОКВЭД.
//   	* ЭтоОКВЭД2 - Булево - основной код приведен по классификатору редакции 2 или редакции 1.
//   	* ОписаниеОшибки - Строка - описание возникшей ошибки.
//
Функция РеквизитыЮридическогоЛицаПоИНН(Знач ИНН) Экспорт
	
	РеквизитыОрганизации = НовыеРеквизитыЮридическогоЛица();
	РеквизитыОрганизации.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	ОбъектXDTO     = Неопределено;
	Прокси         = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "getCorporationRequisitesByINN"));
		ВходныеПараметры.INN = ИНН;
		ВходныеПараметры.configurationName = Метаданные.Имя;
		Попытка
			Ответ      = Прокси.getCorporationRequisitesByINN(ВходныеПараметры);
			ОбъектXDTO = Ответ.РеквизитыЮрЛица;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(ОбъектXDTO, ОписаниеОшибки, "getCorporationRequisitesByINN", РеквизитыОрганизации);
	
	Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
		Возврат РеквизитыОрганизации;
	КонецЕсли;
	
	ЗаполнитьНаименованияЮридическогоЛица(ОбъектXDTO, РеквизитыОрганизации);
	
	РеквизитыОрганизации.РегистрационныйНомер = ОбъектXDTO.ОГРН;
	РеквизитыОрганизации.КПП = ОбъектXDTO.КПП;
	
	РеквизитыОрганизации.ДатаРегистрации = ОбъектXDTO.СвНаимЮЛ.ДатаОбрЮЛ;
	
	ЗаполнитьКодОКВЭД(ОбъектXDTO, РеквизитыОрганизации);
	
	ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, РеквизитыОрганизации);
	
	ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, РеквизитыОрганизации);
	
	ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ОбъектXDTO, РеквизитыОрганизации);
	
	ЗаполнитьЮридическийАдрес(ОбъектXDTO, РеквизитыОрганизации, Прокси.ФабрикаXDTO);
	
	ЗаполнитьРуководителяИНомерТелефона(ОбъектXDTO, РеквизитыОрганизации);
	
	Возврат РеквизитыОрганизации;
	
КонецФункции

// Возвращаются реквизиты индивидуального предпринимателя по данным ЕГРИП  - ФИО, свидетельство о регистрации,
// коды и т.д.
//
// Параметры:
//  ИНН  - Строка - ИНН индивидуального предпринимателя, реквизиты которого надо получить.
//
// Возвращаемое значение:
//   Структура   - реквизиты индивидуального предпринимателя. 
//   	* ИНН - Строка - ИНН предпринимателя.
//   	* Наименование - Строка - представление предпринимателя в учетной программе.
//   	* НаименованиеПолное - Строка - фамилия, имя, отчество предпринимателя.
//   	* НаименованиеСокращенное - Строка - фамилия, имя, отчество предпринимателя.
//   	* Фамилия - Строка - фамилия предпринимателя.
//   	* Имя - Строка - имя предпринимателя.
//   	* Отчество - Строка - отчество предпринимателя.
//   	* РегистрационныйНомер - Строка - ОГРНИП.
//   	* Пол - Строка, Неопределено - "1" - Мужской, "2" - Женский.
//   	* КодСтраныГражданства - Строка, Неопределено - код страны.
//   	* РегистрацияВНалоговомОргане - Структура, Неопределено - данные о регистрации в ИФНС.
//   		** Код - Строка - код налогового органа.
//   		** Наименование - Строка - наименование налогового органа.
//   		** ОКТМО - Строка - код ОКТМО налогового органа.
//   		** ОКАТО - Строка - код ОКАТО налогового органа.
//   		** ДатаРегистрации - Дата - дата постановки на учет в налоговом органе.
//   	* ДатаРегистрации - Дата - дата регистрации предпринимателя.
//   	* РегистрацияВПенсионномФонде - Структура, Неопределено - данные о регистрации в ПФР.
//   		** РегистрационныйНомерПФР - Строка - регистрационный номер предпринимателя в ПФР.
//   		** КодОрганаПФР - Строка - код органа ПФР.
//   		** НаименованиеОрганаПФР - Строка - наименование органа ПФР.
//   		** ДатаРегистрации - Дата - дата постановки на учет в ПФР.
//   	* РегистрацияВФСС - Структура, Неопределено - данные о регистрации в ФСС.
//   		** РегистрационныйНомерФСС - Строка - регистрационный номер предпринимателя в ФСС.
//   		** КодПодчиненности - Строка - код подчиненности органа ФСС.
//   		** КодОрганаФСС - Строка - код органа ФСС.
//   		** НаименованиеОрганаФСС - Строка - наименование органа ФСС.
//   		** ДатаРегистрации - Дата - дата постановки на учет в ФСС.
//   	* СвидетельствоОРегистрации - Структура, Неопределено - данные свидетельства.
//   		** Серия - Строка - серия свидетельства.
//   		** Номер - Строка - номер свидетельства.
//   		** Дата - Дата - дата выдачи свидетельства.
//   	* КодОКВЭД - Строка - код основного вида деятельности по классификатору ОКВЭД.
//   	* ЭтоОКВЭД2 - Булево - код ОКВЭД приведен по классификатору редакции 2 или редакции 1.
//   	* ОписаниеОшибки - Строка - описание возникшей ошибки.
//
Функция РеквизитыПредпринимателяПоИНН(Знач ИНН) Экспорт
	
	РеквизитыПредпринимателя = НовыеРеквизитыПредпринимателя();
	РеквизитыПредпринимателя.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	ОбъектXDTO     = Неопределено;
	Прокси         = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "getEntrepreneurRequisitesByINN"));
		ВходныеПараметры.INN = ИНН;
		ВходныеПараметры.configurationName = Метаданные.Имя;
		Попытка
			Ответ      = Прокси.getEntrepreneurRequisitesByINN(ВходныеПараметры);
			ОбъектXDTO = Ответ.РеквизитыИП;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(ОбъектXDTO, ОписаниеОшибки, "getEntrepreneurRequisitesByINN", РеквизитыПредпринимателя);
	
	Если ЗначениеЗаполнено(РеквизитыПредпринимателя.ОписаниеОшибки) Тогда
		Возврат РеквизитыПредпринимателя;
	КонецЕсли;
	
	РеквизитыПредпринимателя.Фамилия  = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Фамилия);
	РеквизитыПредпринимателя.Имя      = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Имя);
	РеквизитыПредпринимателя.Отчество = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Отчество);
	РеквизитыПредпринимателя.Пол      = Ответ.РеквизитыИП.СвФЛ.Пол;
	
	ЗаполнитьКодОКВЭД(ОбъектXDTO, РеквизитыПредпринимателя);
	
	ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, РеквизитыПредпринимателя);
	
	ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, РеквизитыПредпринимателя);
	
	ЗаполнитьСвидетельствоОРегистрации(ОбъектXDTO, РеквизитыПредпринимателя);
	
	РеквизитыПредпринимателя.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 %3'"), 
		РеквизитыПредпринимателя.Фамилия,
		РеквизитыПредпринимателя.Имя,
		РеквизитыПредпринимателя.Отчество);
	РеквизитыПредпринимателя.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Индивидуальный предприниматель %1'"),
		РеквизитыПредпринимателя.Наименование);
	РеквизитыПредпринимателя.НаименованиеСокращенное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ИП %1'"),
		РеквизитыПредпринимателя.Наименование);
		
	РеквизитыПредпринимателя.РегистрационныйНомер = ОбъектXDTO.ОГРН;
	
	Если ОбъектXDTO.СвГражд <> Неопределено Тогда
		РеквизитыПредпринимателя.КодСтраныГражданства = ОбъектXDTO.СвГражд.ОКСМ;
	КонецЕсли;
	
	Если ОбъектXDTO.СвРегИП <> Неопределено Тогда
		РеквизитыПредпринимателя.ДатаРегистрации = ОбъектXDTO.СвРегИП.ДатаРег;
	КонецЕсли;
	
	Возврат РеквизитыПредпринимателя;
	
КонецФункции

// Возвращаются основные реквизиты юридических лиц по данным ЕГРЮЛ, подходящих по условиям поиска по наименованию.
//
// Параметры:
//  Наименование - Строка - одно или несколько слов из наименования юридического лица для поиска в ЕГРЮЛ.
//  КодРегиона - Строка, 2 - код региона в юридическом адресе для поиска в ЕГРЮЛ.
//  Адрес - Строка - одно или несколько слов из юридического адреса (от региона до улицы) для поиска в ЕГРЮЛ.
//
// Возвращаемое значение:
//   Структура - реквизиты найденных юридических лиц. Содержание структуры: 
//   	* РеквизитыЮрЛиц - Массив - реквизиты найденных юридических лиц.
//			Если найдено больше 20 контрагентов - возвращаются реквизиты только первых 20.
//			Элементы массива - Структура.
//   			** ИНН - Строка - ИНН юридического лица.
//   			** Наименование - Строка - наименование юридического лица.
//   			** ЮридическийАдрес - Структура, Неопределено - данные об юридическом адресе.
//   				*** КонтактнаяИнформация - Строка - данные в формате XML.
//   				*** Представление - Строка - представление адреса.
//   				*** Комментарий - Строка - произвольный комментарий.
//   			** Руководитель - Структура, Неопределено - данные о руководителе.
//   				*** Должность - Строка - должность руководителя.
//   				*** Фамилия - Строка - фамилия руководителя.
//   				*** Имя - Строка - имя руководителя.
//   				*** Отчество - Строка - отчество руководителя.
//   				*** Представление - Строка - ФИО руководителя.
//   				*** ИНН - Строка - ИНН руководителя.
//   				*** ДатаЗаписи - Дата - дата записи о руководителе.
//				** КоличествоНайденных - Число - общее количество найденных контрагентов (может быть больше 20).
//				** ОписаниеОшибки - Строка - служебный реквизит.
//
Функция РеквизитыЮридическихЛицПоНаименованию(Знач Наименование, Знач КодРегиона = "", Знач Адрес = "") Экспорт
	
	РеквизитыОрганизаций = Новый Структура("РеквизитыОрганизаций,КоличествоНайденных,ОписаниеОшибки",
		Новый Массив, 0, Неопределено);
	
	ОписаниеОшибки = "";
	ОбъектXDTO     = Неопределено;
	Прокси         = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "getCorporationRequisitesByNameAndAddress"));
		ВходныеПараметры.name = Наименование;
		ВходныеПараметры.address = Адрес;
		ВходныеПараметры.regionCode = КодРегиона;
		ВходныеПараметры.configurationName = Метаданные.Имя;
		Попытка
			Ответ      = Прокси.getCorporationRequisitesByNameAndAddress(ВходныеПараметры);
			СписокXDTO = ?(Ответ.CorporationSearchResult = Неопределено, 
				Неопределено, 
				Ответ.CorporationSearchResult.РеквизитыЮрЛица);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Наименование -  %1:'"), Наименование)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
		
	ОбработатьОшибкуСервиса(СписокXDTO, ОписаниеОшибки, "getCorporationRequisitesByNameAndAddress", РеквизитыОрганизаций);
	
	Если ЗначениеЗаполнено(РеквизитыОрганизаций.ОписаниеОшибки) Тогда
		Возврат РеквизитыОрганизаций;
	КонецЕсли;
	
	Для каждого ОбъектXDTO Из СписокXDTO Цикл
		
		РеквизитыОрганизации     = НовыеРеквизитыЮридическогоЛица();
		РеквизитыОрганизации.ИНН = ОбъектXDTO.ИНН;
		
		ЗаполнитьНаименованияЮридическогоЛица(ОбъектXDTO, РеквизитыОрганизации);
		
		ЗаполнитьЮридическийАдрес(ОбъектXDTO, РеквизитыОрганизации, Прокси.ФабрикаXDTO);
		
		ЗаполнитьРуководителяИНомерТелефона(ОбъектXDTO, РеквизитыОрганизации);
		
		РеквизитыОрганизаций.РеквизитыОрганизаций.Добавить(РеквизитыОрганизации);
		
	КонецЦикла; 
	
	РеквизитыОрганизаций.КоличествоНайденных = Ответ.CorporationSearchResult.corporationsFound;
	
	Возврат РеквизитыОрганизаций;
	
КонецФункции

// Возвращается информация о связях юридического лица, его руководителей и учредителей 
// с другими лицами по данным ЕГРЮЛ.
//
// Параметры:
//  ИНН  - Строка - ИНН юридического лица, информацию о связях которого надо получить.
//
// Возвращаемое значение:
//   Структура   - информация о связях юридического лица.
//   	Содержит основные данные о юридическом лице - см. РеквизитыЮридическогоЛицаПоИНН.
//   	Также содержит данные:
//   	* НаименованиеСтатуса - Строка - наименование текущего статуса.
//   	* КодСтатуса - Строка - код текущего статуса.
//   	* УставныйКапитал - Число - размер уставного капитала, рублей.
//   	* ВидыДеятельности - ТаблицаЗначений - данные о видах деятельности.
//   		** КодОКВЭД - Строка - код вида деятельности по классификатору ОКВЭД.
//   		** НаименованиеОКВЭД - Строка - наименование вида деятельности по ОКВЭД,  
//   			сервисом не поставляется, должно заполняться из переопределяемого кода.
//   		** ЭтоОКВЭД2 - Булево - код приведен по классификатору редакции 2 или редакции 1.
//   	* Лицензии - ТаблицаЗначений - данные о полученных лицензиях.
//   		** Лицензия - Строка - наименование лицензии.
//   		** ОписаниеЛицензии - Строка - подробное описание лицензии.
//   	* ОрганизацииПоАдресу - ТаблицаЗначений - данные об организациях, зарегистрированных по тому же адресу.
//   		** НаименованиеОрганизации - Строка - наименование организации.
//   		** ИНН - Строка - ИНН организации.
//   		** КодСтатуса - Строка - код текущего статуса организации.
//   		** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//   	* ОрганизацииГдеРуководитель - ТаблицаЗначений - данные об организациях, где руководитель этой организации также является руководителем.
//   		** НаименованиеОрганизации - Строка - наименование организации.
//   		** ИНН - Строка - ИНН организации.
//   		** КодСтатуса - Строка - код текущего статуса организации.
//   		** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//   	* ОрганизацииГдеРуководительПоФИО - Булево - если Истина, поиск проводился по ФИО руководителя, иначе по ИНН.
//   	* ОрганизацииГдеУчредитель - ТаблицаЗначений - организации, где руководитель этой организации является учредителем.
//   		** НаименованиеОрганизации - Строка - наименование организации.
//   		** ИНН - Строка - ИНН организации.
//   		** КодСтатуса - Строка - код текущего статуса организации.
//   		** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//   		** ПроцентКапитала - Число - процент в уставном капитале.
//   		** СуммаКапитала - Число - сумма взноса в уставный капитал.
//   	* ОрганизацииГдеУчредительПоФИО - Булево - если Истина, поиск проводился по ФИО руководителя, иначе по ИНН.
//   	* УчрежденныеФирмы - ТаблицаЗначений - организации, где эта организация является учредителем.
//   		** НаименованиеОрганизации - Строка - наименование организации.
//   		** ИНН - Строка - ИНН организации.
//   		** КодСтатуса - Строка - код текущего статуса организации.
//   		** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//   		** ПроцентКапитала - Число - процент в уставном капитале.
//   		** СуммаКапитала - Число - сумма взноса в уставный капитал.
//   	* Учредители - ТаблицаЗначений - учредители этой организации.
//   		** Учредитель - Строка - ФИО или наименование учредителя.
//   		** ИНН - Строка - ИНН учредителя.
//   		** ПроцентКапитала - Число - процент в уставном капитале.
//   		** СуммаКапитала - Число - сумма взноса в уставный капитал.
//   		** ОрганизацииГдеРуководитель - ТаблицаЗначений - данные об организациях, где этот учредитель является руководителем.
//   			*** НаименованиеОрганизации - Строка - наименование организации.
//   			*** ИНН - Строка - ИНН организации.
//   			*** КодСтатуса - Строка - код текущего статуса организации.
//   			*** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//   		** ОрганизацииГдеРуководительПоФИО - Булево - если Истина, поиск проводился по ФИО учредителя, иначе по ИНН.
//   		** ОрганизацииГдеУчредитель - ТаблицаЗначений - организации, где этот учредитель также является учредителем.
//   			*** НаименованиеОрганизации - Строка - наименование организации.
//   			*** ИНН - Строка - ИНН организации.
//   			*** КодСтатуса - Строка - код текущего статуса организации.
//   			*** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//   			*** ПроцентКапитала - Число - процент в уставном капитале.
//   			*** СуммаКапитала - Число - сумма взноса в уставный капитал.
//   		** ОрганизацииГдеУчредительПоФИО - Булево - если Истина, поиск проводился по ФИО учредителя, иначе по ИНН.
//   	* Подразделения - ТаблицаЗначений - филиалы и представительства юридического лица, указанные в Уставе.
//   		** ОписаниеПодразделения - Строка - наименование подразделения.
//   	* ИзмененияВРеестре - ТаблицаЗначений - данные об изменениях в ЕГРЮЛ по этому лицу.
//   		** ДатаИзменения - Дата - дата внесения изменения.
//   		** ГосударственныйОрган - Строка - орган, который внес изменение.
//   		** ОписаниеИзменения - Строка - описание изменения.
//   	* БухгалтерскаяОтчетность - ТаблицаЗначений - данные бухгалтерской отчетности, сданной в органы Росстата.
//   		** Год - Число - год, за который была сдана отчетность.
//   		** КодВалютыОтчетности - Строка - в рублях, в тысячах или в миллионах рублей.
//   		** ТипОтчетности - Строка - обычная отчетность, упрощенная или отчетность НКО.
//   		** Показатели - ТаблицаЗначений - показатели бухгалтерской отчетности.
//   			*** Код - Строка - код показателя отчетности.
//   			*** Значение - Число - значение показателя отчетности.
//   	* ОжиданиеОтвета - Булево - если возвращается Истина - требуется повторный вызов метода с этими же параметрами.
//
Функция ИнформацияОСвязяхЮридическогоЛицаПоИНН(Знач ИНН) Экспорт
	
	ИнформацияОСвязях = НоваяИнформацияОСвязяхЮридическогоЛица();
	ИнформацияОСвязях.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	ОбъектXDTO     = Неопределено;
	Прокси         = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "checkCorporationTrustability"));
		ВходныеПараметры.INN = ИНН;
		ВходныеПараметры.configurationName = Метаданные.Имя;
		Попытка
			Ответ      = Прокси.checkCorporationTrustability(ВходныеПараметры);
			ОбъектXDTO = Ответ.CorporationTrustability;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(ОбъектXDTO, ОписаниеОшибки, "checkCorporationTrustability", ИнформацияОСвязях);
	
	Если ЗначениеЗаполнено(ИнформацияОСвязях.ОписаниеОшибки) Тогда
		Возврат ИнформацияОСвязях;
	КонецЕсли;
	
	ИнформацияОСвязях.ОжиданиеОтвета = ОбъектXDTO.awaitingResponse;
	Если ИнформацияОСвязях.ОжиданиеОтвета Тогда
		Возврат ИнформацияОСвязях;
	КонецЕсли;
	
	ЗаполнитьНаименованияЮридическогоЛица(ОбъектXDTO, ИнформацияОСвязях);
	
	ИнформацияОСвязях.РегистрационныйНомер = ОбъектXDTO.ОГРН;
	ИнформацияОСвязях.КПП = ОбъектXDTO.КПП;
	
	ИнформацияОСвязях.ДатаРегистрации = ОбъектXDTO.СвНаимЮЛ.ДатаОбрЮЛ;
	
	ЗаполнитьИнформациюОСтатусе(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьЮридическийАдрес(ОбъектXDTO, ИнформацияОСвязях, Прокси.ФабрикаXDTO);
	
	ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьИнформациюОМассовостиАдреса(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьИнформациюОВидахДеятельности(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьИнформациюОЛицензиях(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьИнформациюОРуководителе(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьИнформациюОбУчрежденныхФирмах(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьИнформациюОбУчредителях(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьИнформациюОбУставномКапитале(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьИнформациюОПодразделениях(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьИнформациюОбИзмененияхВРеестре(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьИнформациюОБухгалтерскойОтчетности(ОбъектXDTO, ИнформацияОСвязях);
	
	Возврат ИнформацияОСвязях;
	
КонецФункции

// Возвращается информация о связях индивидуального предпринимателя с другими лицами по данным ЕГРЮЛ и ЕГРИП.
//
// Параметры:
//  ИНН  - Строка - ИНН индивидуального предпринимателя, информацию о связях которого надо получить.
//
// Возвращаемое значение:
//   Структура   - информация о связях индивидуального предпринимателя. 
//   	Содержит основные данные о предпринимателе - см. РеквизитыПредпринимателяПоИНН.
//   	Также содержит данные:
//   	* КодСтатуса - Строка - код текущего статуса.
//   	* УставныйКапитал - Число - размер уставного капитала, рублей.
//   	* ВидыДеятельности - ТаблицаЗначений - данные о видах деятельности.
//   		** КодОКВЭД - Строка - код вида деятельности по классификатору ОКВЭД.
//   		** НаименованиеОКВЭД - Строка - наименование вида деятельности по ОКВЭД,  
//   			сервисом не поставляется, должно заполняться из переопределяемого кода.
//   		** ЭтоОКВЭД2 - Булево - код приведен по классификатору редакции 2 или редакции 1.
//   	* Лицензии - ТаблицаЗначений - данные о полученных лицензиях.
//   		** Лицензия - Строка - наименование лицензии.
//   		** ОписаниеЛицензии - Строка - подробное описание лицензии.
//   	* ОрганизацииГдеРуководитель - ТаблицаЗначений - данные об организациях, где этот предприниматель является руководителем.
//   		** НаименованиеОрганизации - Строка - наименование организации.
//   		** ИНН - Строка - ИНН организации.
//   		** КодСтатуса - Строка - код текущего статуса организации.
//   		** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//   	* ОрганизацииГдеРуководительПоФИО - Булево - если Истина, поиск проводился по ФИО предпринимателя, иначе по ИНН.
//   	* ОрганизацииГдеУчредитель - ТаблицаЗначений - организации, где этот предприниматель является учредителем.
//   		** НаименованиеОрганизации - Строка - наименование организации.
//   		** ИНН - Строка - ИНН организации.
//   		** КодСтатуса - Строка - код текущего статуса организации.
//   		** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//   		** ПроцентКапитала - Число - процент в уставном капитале.
//   		** СуммаКапитала - Число - сумма взноса в уставный капитал.
//   	* ОрганизацииГдеУчредительПоФИО - Булево - если Истина, поиск проводился по ФИО предпринимателя, иначе по ИНН.
//   	* ИзмененияВРеестре - ТаблицаЗначений - данные об изменениях в ЕГРИП по этому лицу.
//   		** ДатаИзменения - Дата - дата внесения изменения.
//   		** ГосударственныйОрган - Строка - орган, который внес изменение.
//   		** ОписаниеИзменения - Строка - описание изменения.
//   	* ОжиданиеОтвета - Булево - если возвращается Истина - требуется повторный вызов метода с этими же параметрами.
//
Функция ИнформацияОСвязяхПредпринимателяПоИНН(Знач ИНН) Экспорт
	
	ИнформацияОСвязях = НоваяИнформацияОСвязяхПредпринимателя();
	ИнформацияОСвязях.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	ОбъектXDTO     = Неопределено;
	Прокси         = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "checkPersonTrustabilityByInn"));
		ВходныеПараметры.INN = ИНН;
		ВходныеПараметры.configurationName = Метаданные.Имя;
		Попытка
			Ответ      = Прокси.checkPersonTrustabilityByInn(ВходныеПараметры);
			ОбъектXDTO = Ответ.PersonTrustability;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(ОбъектXDTO, ОписаниеОшибки, "checkPersonTrustabilityByInn", ИнформацияОСвязях);
	
	Если ЗначениеЗаполнено(ИнформацияОСвязях.ОписаниеОшибки) Тогда
		Возврат ИнформацияОСвязях;
	КонецЕсли;
	
	ИнформацияОСвязях.Фамилия  = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Фамилия);
	ИнформацияОСвязях.Имя      = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Имя);
	ИнформацияОСвязях.Отчество = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Отчество);
	ИнформацияОСвязях.Пол      = ОбъектXDTO.СвФЛ.Пол;
	
	ИнформацияОСвязях.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 %3'"), 
		ИнформацияОСвязях.Фамилия,
		ИнформацияОСвязях.Имя,
		ИнформацияОСвязях.Отчество);
	ИнформацияОСвязях.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Индивидуальный предприниматель %1'"),
		ИнформацияОСвязях.Наименование);
	ИнформацияОСвязях.НаименованиеСокращенное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ИП %1'"),
		ИнформацияОСвязях.Наименование);
	
	ИнформацияОСвязях.РегистрационныйНомер = ОбъектXDTO.ОГРН;
	
	Если ОбъектXDTO.СвГражд <> Неопределено Тогда
		ИнформацияОСвязях.КодСтраныГражданства = ОбъектXDTO.СвГражд.ОКСМ;
	КонецЕсли;
	
	Если ОбъектXDTO.СвРегИП <> Неопределено Тогда
		ИнформацияОСвязях.ДатаРегистрации = ОбъектXDTO.СвРегИП.ДатаРег;
	КонецЕсли;
	
	ЗаполнитьИнформациюОСтатусе(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьИнформациюОВидахДеятельности(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьИнформациюОЛицензиях(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаполнитьСвязанныеОрганизацииФизическогоЛица(
		ОбъектXDTO, 
		ИнформацияОСвязях, 
		ИнформацияОСвязях.ИНН, 
		ИнформацияОСвязях.ИНН);
	
	ЗаполнитьИнформациюОбИзмененияхВРеестре(ОбъектXDTO, ИнформацияОСвязях);
	
	Возврат ИнформацияОСвязях;
	
КонецФункции

// Возвращается информация о проверках юридического лица или предпринимателя контролирующими органами
// по открытым данным единого реестра проверок.
//
// Параметры:
//  ИНН  - Строка - ИНН юридического лица или предпринимателя, информацию о проверках которого надо получить.
//  Плановые  - Булево - требуется ли информация о плановых проверках.
//  Внеплановые  - Булево - требуется ли информация о внеплановых проверках.
//  Завершенные  - Булево - требуется ли информация о завершенных проверках (плановых и внеплановых), 
//                          по которым уже известен результат.
//  Незавершенные  - Булево - требуется ли информация о незавершенных проверках (плановых и внеплановых), 
//                          результат по которым не известен.
//
// Возвращаемое значение:
//   Структура   - информация о проверках. 
//   	* ИНН - Строка - ИНН юридического лица или предпринимателя.
//   	* Проверки - ТаблицаЗначений - информация о проверках.
//   		** 	Идентификатор - Строка - идентификатор проверки в едином реестре проверок.
//   		** 	ПлановаяПроверка - Булево - плановая проверка или внеплановая.
//   		** 	ПериодПроверки - Дата - месяц, в котором проводится проверка.
//   		** 	ДатаПроверки - Дата - дата начала проверки.
//   		** 	КонтролирующийОрган - Строка - орган, который проводит проверку.
//   		** 	АдресПроверки - Строка - адрес, по которому проводится проверка.
//   		** 	ЦельПроверки - Строка - с какой целью проводится проверка.
//   		** 	Длительность - Строка - длительность проверки.
//   		** 	Результат - Строка - описание результата проверки.
//   		** 	Нарушения - ТаблицаЗначений - найденные нарушения.
//   			*** 	НомерНарушения - Число - номер по порядку.
//   			*** 	Нарушение - Строка - описание нарушения.
//   			*** 	НарушенныйАкт - Строка - нарушенный нормативный акт.
//   			*** 	Предписание - Строка - выданное предписание о необходимости устранении нарушения.
//   			*** 	Исполнение - Строка - информация об устранении нарушения.
//   	* ОписаниеОшибки - Строка - описание возникшей ошибки.
//   	* ОжиданиеОтвета - Булево - если возвращается Истина - требуется повторный вызов метода с этими же параметрами.
//
Функция ИнформацияОПроверкахКонтролирующимиОрганамиПоИНН(Знач ИНН, Плановые, Внеплановые, Завершенные, Незавершенные) Экспорт
	
	ИнформацияОПроверках = НоваяИнформацияОПроверкахКонтролирующимиОрганами();
	ИнформацияОПроверках.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	ОбъектXDTO     = Неопределено;
	Прокси         = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "getInspectionsByInn"));
		ВходныеПараметры.INN = ИНН;
		ВходныеПараметры.configurationName = Метаданные.Имя;
		Попытка
			Ответ      = Прокси.getInspectionsByInn(ВходныеПараметры);
			ОбъектXDTO = Ответ.Inspections;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(ОбъектXDTO, ОписаниеОшибки, "getInspectionsByInn", ИнформацияОПроверках);
	
	Если ЗначениеЗаполнено(ИнформацияОПроверках.ОписаниеОшибки) Тогда
		Возврат ИнформацияОПроверках;
	КонецЕсли;
	
	ИнформацияОПроверках.ОжиданиеОтвета = ОбъектXDTO.awaitingResponse;
	Если ИнформацияОПроверках.ОжиданиеОтвета Тогда
		Возврат ИнформацияОПроверках;
	КонецЕсли;
	
	ЗаполнитьИнформациюОПроверкахКонтролирующимиОрганами(
		ОбъектXDTO, ИнформацияОПроверках, Плановые, Внеплановые, Завершенные, Незавершенные);
	
	Возврат ИнформацияОПроверках;
	
КонецФункции

#КонецОбласти

#Область ОписанияРеквизитов

Функция НовыеРеквизитыЮридическогоЛица()

	РеквизитыОрганизации = Новый Структура;
	
	// Заполняется на основе данных ЕГРЮЛ.
	
	РеквизитыОрганизации.Вставить("ИНН");                         // Строка, 10
	РеквизитыОрганизации.Вставить("КПП");                         // Строка, 9
	РеквизитыОрганизации.Вставить("Наименование");                // Строка, 0
	РеквизитыОрганизации.Вставить("НаименованиеПолное");          // Строка, 0
	РеквизитыОрганизации.Вставить("НаименованиеСокращенное");     // Строка, 0
	РеквизитыОрганизации.Вставить("РегистрационныйНомер");        // Строка, 13 - ОГРН
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных.
	РеквизитыОрганизации.Вставить("ПравоваяФорма");               // Строка, 0
	РеквизитыОрганизации.Вставить("ЮридическийАдрес");            // Структура из НоваяКонтактнаяИнформация().
	РеквизитыОрганизации.Вставить("Телефон");                     // Структура из НоваяКонтактнаяИнформация().
	РеквизитыОрганизации.Вставить("Руководитель");                // Структура из НовоеКонтактноеЛицо().
	РеквизитыОрганизации.Вставить("РегистрацияВНалоговомОргане"); // Структура из НоваяРегистрацияВНалоговомОргане().
	РеквизитыОрганизации.Вставить("ДатаРегистрации");             // Дата
	РеквизитыОрганизации.Вставить("РегистрацияВПенсионномФонде"); // Структура из НоваяРегистрацияВПенсионномФонде().
	РеквизитыОрганизации.Вставить("РегистрацияВФСС");             // Структура из НоваяРегистрацияВФСС().
	РеквизитыОрганизации.Вставить("КодОКВЭД");                    // Строка, 8
	
	РеквизитыОрганизации.Вставить("ЭтоОКВЭД2", Ложь);             // Булево - КодОКВЭД редакции 2 или редакции 1.
	
	// Служебный реквизит
	РеквизитыОрганизации.Вставить("ОписаниеОшибки");              // Строка, 0
	
	Возврат РеквизитыОрганизации;

КонецФункции 

Функция НовыеРеквизитыПредпринимателя()

	РеквизитыПредпринимателя = Новый Структура;
	
	// Заполняется на основе данных ЕГРИП.
	
	РеквизитыПредпринимателя.Вставить("ИНН");                         // Строка, 12
	РеквизитыПредпринимателя.Вставить("Наименование");                // Строка, 0
	РеквизитыПредпринимателя.Вставить("НаименованиеПолное");          // Строка, 0
	РеквизитыПредпринимателя.Вставить("НаименованиеСокращенное");     // Строка, 0
	РеквизитыПредпринимателя.Вставить("Фамилия");                     // Строка, 0
	РеквизитыПредпринимателя.Вставить("Имя");                         // Строка, 0
	РеквизитыПредпринимателя.Вставить("Отчество");                    // Строка, 0
	РеквизитыПредпринимателя.Вставить("РегистрационныйНомер");        // Строка, 13 - ОГРН
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных.
	РеквизитыПредпринимателя.Вставить("Пол");                         // Строка: "1" - Мужской, "2" - Женский.
	РеквизитыПредпринимателя.Вставить("КодСтраныГражданства");        // Строка, 3
	РеквизитыПредпринимателя.Вставить("РегистрацияВНалоговомОргане"); // Структура из НоваяРегистрацияВНалоговомОргане().
	РеквизитыПредпринимателя.Вставить("РегистрацияВПенсионномФонде"); // Структура из НоваяРегистрацияВПенсионномФонде().
	РеквизитыПредпринимателя.Вставить("РегистрацияВФСС");             // Структура из НоваяРегистрацияВФСС().
	РеквизитыПредпринимателя.Вставить("ДатаРегистрации");             // Дата
	РеквизитыПредпринимателя.Вставить("СвидетельствоОРегистрации");   // Структура из НовоеСвидетельствоОРегистрации().
	РеквизитыПредпринимателя.Вставить("КодОКВЭД");                    // Строка, 8
	
	РеквизитыПредпринимателя.Вставить("ЭтоОКВЭД2", Ложь);             // Булево - КодОКВЭД редакции 2 или редакции 1.
	
	// Служебный реквизит
	РеквизитыПредпринимателя.Вставить("ОписаниеОшибки");       // Строка, 0
	
	Возврат РеквизитыПредпринимателя;

КонецФункции 

Функция НоваяИнформацияОСвязяхЮридическогоЛица()

	ИнформацияОСвязях = НовыеРеквизитыЮридическогоЛица();
	
	// Дополнительная информация о юридическом лице и его связях.
	
	ИнформацияОСвязях.Вставить("НаименованиеСтатуса"); 	// Строка
	ИнформацияОСвязях.Вставить("КодСтатуса");			// Строка
	
	ИнформацияОСвязях.Вставить("УставныйКапитал");		// Число
	
	ИнформацияОСвязях.Вставить("ВидыДеятельности", НоваяТаблицаВидыДеятельности());
	
	ИнформацияОСвязях.Вставить("Лицензии", НоваяТаблицаЛицензии());
	
	// Все организации, которые зарегистрированы по тому же адресу, что и эта организация.
	ИнформацияОСвязях.Вставить("ОрганизацииПоАдресу", НоваяТаблицаОрганизации());
	
	// Все организации, где этот руководитель является руководителем.
	ИнформацияОСвязях.Вставить("ОрганизацииГдеРуководитель",      НоваяТаблицаОрганизации());
	ИнформацияОСвязях.Вставить("ОрганизацииГдеРуководительПоФИО", Ложь);
	
	// Все организации, где этот руководитель является учредителем.
	ИнформацияОСвязях.Вставить("ОрганизацииГдеУчредитель",      НоваяТаблицаОрганизацииГдеУчредитель());
	ИнформацияОСвязях.Вставить("ОрганизацииГдеУчредительПоФИО", Ложь);
	
	// Все организации, где эта организация является учредителем.
	ИнформацияОСвязях.Вставить("УчрежденныеФирмы", НоваяТаблицаОрганизацииГдеУчредитель());
	
	// Все учредители этой организации.
	ИнформацияОСвязях.Вставить("Учредители", НоваяТаблицаУчредители());
	
	ИнформацияОСвязях.Вставить("Подразделения", НоваяТаблицаПодразделения());
	
	ИнформацияОСвязях.Вставить("ИзмененияВРеестре", НоваяТаблицаИзмененияВРеестре());
	
	ИнформацияОСвязях.Вставить("БухгалтерскаяОтчетность", НоваяТаблицаБухгалтерскаяОтчетность());
	
	// Служебный реквизит
	ИнформацияОСвязях.Вставить("ОжиданиеОтвета", Ложь);
	
	Возврат ИнформацияОСвязях;

КонецФункции 

Функция НоваяИнформацияОСвязяхПредпринимателя()

	ИнформацияОСвязях = НовыеРеквизитыПредпринимателя();
	
	// Дополнительная информация о предпринимателе и его связях.
	
	ИнформацияОСвязях.Вставить("НаименованиеСтатуса"); 	// Строка
	ИнформацияОСвязях.Вставить("КодСтатуса");			// Строка
	
	ИнформацияОСвязях.Вставить("ВидыДеятельности", НоваяТаблицаВидыДеятельности());
	
	ИнформацияОСвязях.Вставить("Лицензии", НоваяТаблицаЛицензии());
	
	// Все организации, где этот предприниматель является руководителем.
	ИнформацияОСвязях.Вставить("ОрганизацииГдеРуководитель",      НоваяТаблицаОрганизации());
	ИнформацияОСвязях.Вставить("ОрганизацииГдеРуководительПоФИО", Ложь);
	
	// Все организации, где этот предприниматель является учредителем.
	ИнформацияОСвязях.Вставить("ОрганизацииГдеУчредитель",      НоваяТаблицаОрганизацииГдеУчредитель());
	ИнформацияОСвязях.Вставить("ОрганизацииГдеУчредительПоФИО", Ложь);
	
	ИнформацияОСвязях.Вставить("ИзмененияВРеестре", НоваяТаблицаИзмененияВРеестре());
	
	// Служебный реквизит
	ИнформацияОСвязях.Вставить("ОжиданиеОтвета", Ложь);
	
	Возврат ИнформацияОСвязях;

КонецФункции 

Функция НоваяИнформацияОПроверкахКонтролирующимиОрганами()

	Информация = Новый Структура;
	Информация.Вставить("ИНН"); // Строка, 12
	
	Информация.Вставить("Проверки", НоваяТаблицаПроверкиКонтролирующимиОрганами());
	
	// Служебные реквизиты
	Информация.Вставить("ОписаниеОшибки"); // Строка, 0
	Информация.Вставить("ОжиданиеОтвета", Ложь);
	
	Возврат Информация;

КонецФункции 

Функция НоваяКонтактнаяИнформация()

	Результат = Новый Структура;
	Результат.Вставить("КонтактнаяИнформация"); // Строка, 0 - XML 
	Результат.Вставить("Представление");        // Строка, 0
	Результат.Вставить("Комментарий");          // Строка, 0
	Возврат Результат;

КонецФункции

Функция НовоеКонтактноеЛицо()

	Результат = Новый Структура;
	Результат.Вставить("Должность");     // Строка, 0
	Результат.Вставить("Фамилия");       // Строка, 0
	Результат.Вставить("Имя");           // Строка, 0
	Результат.Вставить("Отчество");      // Строка, 0
	Результат.Вставить("Представление"); // Строка, 0
	Результат.Вставить("ИНН");           // Строка, 12
	Результат.Вставить("ДатаЗаписи");    // Дата
	Возврат Результат;

КонецФункции

Функция НоваяРегистрацияВНалоговомОргане()
	
	Результат = Новый Структура;
	Результат.Вставить("Код");             // Строка, 4
	Результат.Вставить("Наименование");    // Строка, 0
	Результат.Вставить("ОКТМО");           // Строка, 11
	Результат.Вставить("ОКАТО");           // Строка, 11
	Результат.Вставить("ДатаРегистрации"); // Дата
	Возврат Результат;
	
КонецФункции

Функция НоваяРегистрацияВПенсионномФонде()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомерПФР"); // Строка, 14
	Результат.Вставить("КодОрганаПФР");            // Строка, 7
	Результат.Вставить("НаименованиеОрганаПФР");   // Строка, 0
	Результат.Вставить("ДатаРегистрации");         // Дата
	Возврат Результат;
	
КонецФункции

Функция НоваяРегистрацияВФСС()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомерФСС"); // Строка, 15
	Результат.Вставить("КодПодчиненности");        // Строка, 5
	Результат.Вставить("КодОрганаФСС");            // Строка, 4
	Результат.Вставить("НаименованиеОрганаФСС");   // Строка, 0
	Результат.Вставить("ДатаРегистрации");         // Дата
	Возврат Результат;
	
КонецФункции

Функция НовоеСвидетельствоОРегистрации()
	
	Результат = Новый Структура;
	Результат.Вставить("Серия");  // Строка, 0
	Результат.Вставить("Номер");  // Строка, 0
	Результат.Вставить("Дата");   // Дата
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаВидыДеятельности()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КодОКВЭД",          Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеОКВЭД", Новый ОписаниеТипов("Строка"));
	// ЭтоОКВЭД2 = Истина - код в строке по классификатору редакции 2, Ложь - редакции 1.
	Результат.Колонки.Добавить("ЭтоОКВЭД2",         Новый ОписаниеТипов("Булево"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаЛицензии()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Лицензия",         Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ОписаниеЛицензии", Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаИзмененияВРеестре()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДатаИзменения",        Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ГосударственныйОрган", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ОписаниеИзменения",    Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаПодразделения()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОписаниеПодразделения", Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаОрганизации()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НаименованиеОрганизации", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИНН",                     Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодСтатуса",              Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеСтатуса",     Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаОрганизацииГдеУчредитель()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеОрганизации", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодСтатуса",              Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеСтатуса",     Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПроцентКапитала", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6)));
	Результат.Колонки.Добавить("СуммаКапитала",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаУчредители()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Учредитель", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПроцентКапитала", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6)));
	Результат.Колонки.Добавить("СуммаКапитала",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("ОрганизацииГдеРуководитель");     // Таблица значений
	Результат.Колонки.Добавить("ОрганизацииГдеРуководительПоФИО", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ОрганизацииГдеУчредитель");	      // Таблица значений
	Результат.Колонки.Добавить("ОрганизацииГдеУчредительПоФИО",   Новый ОписаниеТипов("Булево"));
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаБухгалтерскаяОтчетность()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Год",                 Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("КодВалютыОтчетности", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипОтчетности",       Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Показатели");         // см. НоваяТаблицаБухгалтерскаяОтчетностьПоказатели
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаБухгалтерскаяОтчетностьПоказатели()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Код",      Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаПроверкиКонтролирующимиОрганами()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",       Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПлановаяПроверка",    Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ПериодПроверки",      Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаПроверки",        Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("КонтролирующийОрган", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("АдресПроверки",       Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЦельПроверки",        Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Длительность",        Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Результат",           Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Нарушения");          // см. НоваяТаблицаНарушенияВыявленныеКонтролирующимиОрганами
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаНарушенияВыявленныеКонтролирующимиОрганами()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерНарушения", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Нарушение",      Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НарушенныйАкт",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Предписание",    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Исполнение",     Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

#КонецОбласти

#Область ЗаполнениеРеквизитов

Процедура ЗаполнитьНаименованияЮридическогоЛица(ОбъектXDTO, Реквизиты)

	ПравовыеФормы = Новый Массив;
	ПравовыеФормы.Добавить("Общество с ограниченной ответственностью");
	ПравовыеФормы.Добавить("Закрытое акционерное общество");
	ПравовыеФормы.Добавить("Открытое акционерное общество");
	ПравовыеФормы.Добавить("Публичное акционерное общество");
	ПравовыеФормы.Добавить("Акционерное общество");
	Если ОбъектXDTO.СвНаимЮЛ.ОПФ <> Неопределено Тогда
		ПравоваяФормаОбъекта = Строка(ОбъектXDTO.СвНаимЮЛ.ОПФ.ПолнНаимОПФ);
		Реквизиты.ПравоваяФорма = ПравоваяФормаОбъекта;
		Если ПравовыеФормы.Найти(ПравоваяФормаОбъекта) = Неопределено Тогда
			ПравовыеФормы.Добавить(ПравоваяФормаОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты.НаименованиеПолное = ОбъектXDTO.СвНаимЮЛ.НаимЮЛПолн;
	Для каждого ПравоваяФорма Из ПравовыеФормы Цикл
		Если ВРег(ПравоваяФорма) = ВРег(Лев(Реквизиты.НаименованиеПолное, СтрДлина(ПравоваяФорма))) Тогда
			Реквизиты.НаименованиеПолное = ПравоваяФорма + Сред(Реквизиты.НаименованиеПолное, СтрДлина(ПравоваяФорма) + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Реквизиты.НаименованиеСокращенное = ОбъектXDTO.СвНаимЮЛ.НаимЮЛСокр;
	Если НЕ ЗначениеЗаполнено(Реквизиты.НаименованиеСокращенное) 
		ИЛИ НЕ ЗначениеЗаполнено(СтрЗаменить(Реквизиты.НаименованиеСокращенное, "-", "")) 
		ИЛИ ВРег(Реквизиты.НаименованиеСокращенное) = "НЕТ" Тогда
		Реквизиты.НаименованиеСокращенное = Реквизиты.НаименованиеПолное;
	КонецЕсли;
	
	Реквизиты.Наименование = Реквизиты.НаименованиеСокращенное;
	Поз = СтрНайти(Реквизиты.Наименование, """");
	Если Поз > 0 И Поз <= 10 Тогда
		Реквизиты.Наименование = СокрП(Сред(Реквизиты.Наименование, Поз)) + " " + СокрП(Лев(Реквизиты.Наименование, Поз-1));
		Реквизиты.Наименование = СтрЗаменить(Реквизиты.Наименование, """", "");
	КонецЕсли;
	Реквизиты.Наименование = СокрЛП(Реквизиты.Наименование);

КонецПроцедуры

Процедура ЗаполнитьОбъектXDTOКонтактнойИнформации(Фабрика, Объект, ИсходныйОбъект)
	
	Для каждого СвойствоИсходногоОбъекта Из ИсходныйОбъект.Свойства() Цикл
		
		СвойствоОбъекта = Объект.Свойства().Получить(СвойствоИсходногоОбъекта.Имя);
		Если СвойствоОбъекта <> Неопределено Тогда
			
			ЗначениеСвойства = ИсходныйОбъект[СвойствоИсходногоОбъекта.Имя];
			Если ЗначениеСвойства = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
				
				Объект[СвойствоОбъекта.Имя] = Фабрика.Создать(СвойствоОбъекта.Тип);
				ЗаполнитьОбъектXDTOКонтактнойИнформации(Фабрика, Объект[СвойствоОбъекта.Имя], ИсходныйОбъект[СвойствоИсходногоОбъекта.Имя]);
				
			ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
				
				Для Каждого ИсходныйЭлемент Из ЗначениеСвойства Цикл
					
					Элемент = Фабрика.Создать(СвойствоОбъекта.Тип);
					ЗаполнитьОбъектXDTOКонтактнойИнформации(Фабрика, Элемент, ИсходныйЭлемент);
					Объект[СвойствоОбъекта.Имя].Добавить(Элемент);
					
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
				
				МассивСлов      = СтрРазделить(ЗначениеСвойства, " ", Ложь);
				МаксИндексСлова = ?(МассивСлов.Количество() = 1, 0, МассивСлов.Количество() - 2);
				Для ИндексСлова = 0 По МаксИндексСлова Цикл
					Если ЭтоРимскоеЧисло(МассивСлов[ИндексСлова]) Тогда
						МассивСлов[ИндексСлова] = ВРег(МассивСлов[ИндексСлова]);
					Иначе
						МассивЧастейСлова = СтрРазделить(МассивСлов[ИндексСлова], ".", Ложь);
						Для ИндексЧастиСлова = 0 По МассивЧастейСлова.Количество() - 1 Цикл
							МассивЧастейСлова[ИндексЧастиСлова] = ТРег(МассивЧастейСлова[ИндексЧастиСлова]);
						КонецЦикла;
						МассивСлов[ИндексСлова] = СтрСоединить(МассивЧастейСлова, ".");
					КонецЕсли;
				КонецЦикла;
				Объект[СвойствоОбъекта.Имя] = СтрСоединить(МассивСлов, " ");
				
			Иначе
				
				Объект[СвойствоОбъекта.Имя] = ЗначениеСвойства;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоРимскоеЧисло(Знач ПроверяемаяСтрока)

	ЧастиРимскихЧисел = "IVXLCDM";
	ДлинаСтроки = СтрДлина(ПроверяемаяСтрока);
	ПроверяемаяСтрока = ВРег(ПроверяемаяСтрока);
	
	Для НомерЗнака = 1 По ДлинаСтроки Цикл
		Если СтрНайти(ЧастиРимскихЧисел, Сред(ПроверяемаяСтрока, НомерЗнака, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Процедура ЗаменитьПолныеНаименованияАдресныхОбъектовСокращенными(Объект, АдресныеСокращения = Неопределено)
	
	Если АдресныеСокращения = Неопределено Тогда
		АдресныеСокращения = АдресныйКлассификаторСлужебный.СокращенияАдресныхОбъектов(Новый Массив);
	КонецЕсли;
	
	Для каждого СвойствоОбъекта Из Объект.Свойства() Цикл
		
		ЗначениеСвойства = Объект[СвойствоОбъекта.Имя];
		Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
			МассивСлов = СтрРазделить(ЗначениеСвойства, " ", Ложь);
			Слово = ВРег(МассивСлов[МассивСлов.ВГраница()]);
			АдресноеСокращение = АдресныеСокращения[Слово];
			Если АдресноеСокращение <> Неопределено Тогда
				МассивСлов[МассивСлов.ВГраница()] = АдресноеСокращение;
			КонецЕсли;
			Объект[СвойствоОбъекта.Имя] = СтрСоединить(МассивСлов, " ");
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			ЗаменитьПолныеНаименованияАдресныхОбъектовСокращенными(ЗначениеСвойства, АдресныеСокращения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ПроверитьДополнительныеАдресныеЭлементы(Объект, Фабрика)
	
	Если Объект.Свойства().Получить("ДопАдрЭл") = Неопределено
		ИЛИ Объект.ДопАдрЭл = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НовыеЗначения = Новый ТаблицаЗначений;
	НовыеЗначения.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	НовыеЗначения.Колонки.Добавить("ТипЭлемента");
	НовыеЗначения.Колонки.Добавить("ТипНомера");
	ТипыАдресныхЭлементов = Новый СписокЗначений;
	Для каждого ТипОбъектовАдресации Из РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ() Цикл
		ТипыАдресныхЭлементов.Добавить(ВРег(ТипОбъектовАдресации.Ключ), ТипОбъектовАдресации.Код);
	КонецЦикла;
	
	Для каждого АдресныйЭлемент Из Объект.ДопАдрЭл Цикл
		
		Если ТипЗнч(АдресныйЭлемент.Номер) <> Тип("ОбъектXDTO")
			ИЛИ НЕ ЗначениеЗаполнено(АдресныйЭлемент.Номер.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		КонецЗначения = СтрНайти(АдресныйЭлемент.Номер.Значение, ";");
		Если КонецЗначения > 0 Тогда
			НовоеЗначение = СокрЛП(Сред(АдресныйЭлемент.Номер.Значение, КонецЗначения + 1));
			Если НЕ ПустаяСтрока(НовоеЗначение) Тогда
				НоваяСтрока = НовыеЗначения.Добавить();
				НоваяСтрока.Значение    = НовоеЗначение;
				НоваяСтрока.ТипЭлемента = АдресныйЭлемент.Тип();
				НоваяСтрока.ТипНомера   = АдресныйЭлемент.Номер.Тип();
				АдресныйЭлемент.Номер.Значение = Лев(АдресныйЭлемент.Номер.Значение, КонецЗначения - 1);
			КонецЕсли;
		КонецЕсли;
		
		КонецСлова = СтрНайти(АдресныйЭлемент.Номер.Значение, ".");
		КонецСлова = ?(КонецСлова > 1, КонецСлова, СтрНайти(АдресныйЭлемент.Номер.Значение, " "));
		Если КонецСлова > 1 Тогда
			ПервоеСловоЗначения = Лев(АдресныйЭлемент.Номер.Значение, КонецСлова - 1);
			Для каждого ТипАдресныхЭлементов Из ТипыАдресныхЭлементов Цикл
				Если СтрНачинаетсяС(ТипАдресныхЭлементов.Значение, ПервоеСловоЗначения) Тогда
					АдресныйЭлемент.Номер.Значение = СокрЛ(Сред(АдресныйЭлемент.Номер.Значение, КонецСлова + 1));
					АдресныйЭлемент.Номер.Тип      = ТипАдресныхЭлементов.Представление;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из НовыеЗначения Цикл
	
		КонецСлова = СтрНайти(СтрокаТаблицы.Значение, ".");
		КонецСлова = ?(КонецСлова > 0, КонецСлова, СтрНайти(СтрокаТаблицы.Значение, " "));
		Если КонецСлова > 0 Тогда
			ПервоеСловоЗначения = Лев(СтрокаТаблицы.Значение, КонецСлова - 1);
			Для каждого ТипАдресныхЭлементов Из ТипыАдресныхЭлементов Цикл
				Если СтрНачинаетсяС(ТипАдресныхЭлементов.Значение, ПервоеСловоЗначения) Тогда
					НовыйЭлемент = Фабрика.Создать(СтрокаТаблицы.ТипЭлемента);
					НовыйЭлемент.Номер = Фабрика.Создать(СтрокаТаблицы.ТипНомера);
					НовыйЭлемент.Номер.Значение = СокрЛ(Сред(СтрокаТаблицы.Значение, КонецСлова + 1));
					НовыйЭлемент.Номер.Тип      = ТипАдресныхЭлементов.Представление;
					Объект.ДопАдрЭл.Добавить(НовыйЭлемент);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвУчетНО <> Неопределено
		И ОбъектXDTO.СвУчетНО.СвНО <> Неопределено Тогда
		
		Реквизиты.РегистрацияВНалоговомОргане = НоваяРегистрацияВНалоговомОргане();
		
		Реквизиты.РегистрацияВНалоговомОргане.Код             = ОбъектXDTO.СвУчетНО.СвНО.КодНО;
		Реквизиты.РегистрацияВНалоговомОргане.Наименование    = ОбъектXDTO.СвУчетНО.СвНО.НаимНО;
		Реквизиты.РегистрацияВНалоговомОргане.ДатаРегистрации = ОбъектXDTO.СвУчетНО.ДатаПостУч;
		
		Если ОбъектXDTO.Свойства().Получить("СвАдрес") <> Неопределено // Адрес есть только у юридических лиц.
			И ОбъектXDTO.СвАдрес <> Неопределено 
			И ОбъектXDTO.СвАдрес.Адрес <> Неопределено Тогда
			
			Адрес = ОбъектXDTO.СвАдрес.Адрес;
			Реквизиты.РегистрацияВНалоговомОргане.ОКТМО = Адрес.Состав.ОКТМО;
			Реквизиты.РегистрацияВНалоговомОргане.ОКАТО = Адрес.Состав.ОКАТО;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодОКВЭД(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвОКВЭД <> Неопределено Тогда
		
		СписокОКВЭД = ОбъектXDTO.СвОКВЭД;
		КодОКВЭД  = "";
		ДатаОКВЭД = '00010101';
		ЭтоОКВЭД2 = Ложь;
		Для Каждого ЭлементОКВЭД Из СписокОКВЭД Цикл
			Если ЭлементОКВЭД.ДатаНачДейств > ДатаОКВЭД
				И ЭлементОКВЭД.ПрОснДоп = "1" Тогда
				ДатаОКВЭД = ЭлементОКВЭД.ДатаНачДейств;
				КодОКВЭД  = ЭлементОКВЭД.КодОКВЭД;
				ЭтоОКВЭД2 = ЭлементОКВЭД.Свойства().Получить("ПрВерсОКВЭД") <> Неопределено
					И ЭлементОКВЭД.ПрВерсОКВЭД = "2014";
			КонецЕсли;
		КонецЦикла;
		Реквизиты.КодОКВЭД  = КодОКВЭД;
		Реквизиты.ЭтоОКВЭД2 = ЭтоОКВЭД2;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОВидахДеятельности(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвОКВЭД <> Неопределено Тогда
		
		// Сначала добавляем строку с основным кодом.
		Для Каждого ЭлементОКВЭД Из ОбъектXDTO.СвОКВЭД Цикл
			Если ЭлементОКВЭД.ПрОснДоп = "1" Тогда
				НоваяСтрока = ИнформацияОСвязях.ВидыДеятельности.Добавить();
				НоваяСтрока.КодОКВЭД  = ЭлементОКВЭД.КодОКВЭД;
				НоваяСтрока.ЭтоОКВЭД2 = ЭлементОКВЭД.Свойства().Получить("ПрВерсОКВЭД") <> Неопределено
					И ЭлементОКВЭД.ПрВерсОКВЭД = "2014";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// Затем добавляем строки с неосновными кодами.
		Для Каждого ЭлементОКВЭД Из ОбъектXDTO.СвОКВЭД Цикл
			Если ЭлементОКВЭД.ПрОснДоп = "1" Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ИнформацияОСвязях.ВидыДеятельности.Добавить();
			НоваяСтрока.КодОКВЭД  = ЭлементОКВЭД.КодОКВЭД;
			НоваяСтрока.ЭтоОКВЭД2 = ЭлементОКВЭД.Свойства().Получить("ПрВерсОКВЭД") <> Неопределено
				И ЭлементОКВЭД.ПрВерсОКВЭД = "2014";
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОЛицензиях(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвЛицензия <> Неопределено Тогда
		
		Для каждого СтрокаЛицензии Из ОбъектXDTO.СвЛицензия Цикл
			НоваяСтрока = ИнформацияОСвязях.Лицензии.Добавить();
			НоваяСтрока.Лицензия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 от %2'"),
				СтрокаЛицензии.НомЛиц,
				Формат(СтрокаЛицензии.ДатаЛиц, "ДЛФ=D"));
			Если СтрокаЛицензии.НаимЛицВидДеят <> Неопределено Тогда
				ОписаниеЛицензии = "";
				Для каждого СтрокаОписания Из СтрокаЛицензии.НаимЛицВидДеят Цикл
					ОписаниеЛицензии = ОписаниеЛицензии + ?(ПустаяСтрока(ОписаниеЛицензии), "", ", ") + СтрокаОписания;
				КонецЦикла;
				НоваяСтрока.ОписаниеЛицензии = ОписаниеЛицензии;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОПодразделениях(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвПодразд <> Неопределено Тогда
		
		ПространствоИменКИ = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		ПространствоИменАдресов = РаботаСАдресами.ПространствоИмен();
	
		Для каждого СтрокаПодразделения Из ОбъектXDTO.СвПодразд Цикл
			
			ОписаниеПодразделения = "";
			Если СтрокаПодразделения.АдрМНРФ <> Неопределено 
				И СтрокаПодразделения.АдрМНРФ.Состав <> Неопределено Тогда
		
				АдресРФ_КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменАдресов, "АдресРФ"));
				ЗаполнитьОбъектXDTOКонтактнойИнформации(ФабрикаXDTO, АдресРФ_КИ, СтрокаПодразделения.АдрМНРФ.Состав);
				КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "КонтактнаяИнформация"));
				КИ.Состав        = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "Адрес"));
				КИ.Состав.Страна = ОбъектXDTO.СвАдрес.Адрес.Страна;
				КИ.Состав.Состав = АдресРФ_КИ;
				КИ.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(КИ,
					Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес));
		
				ОписаниеПодразделения = КИ.Представление;
				
			ИначеЕсли СтрокаПодразделения.АдрМНИн <> Неопределено Тогда
				
				ОписаниеПодразделения = СтрокаПодразделения.АдрМНИн.АдрИн;
				
			ИначеЕсли СтрокаПодразделения.НаимПолн <> Неопределено Тогда
				
				ОписаниеПодразделения = СтрокаПодразделения.НаимПолн;
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ОписаниеПодразделения) Тогда
				НоваяСтрока = ИнформацияОСвязях.Подразделения.Добавить();
				НоваяСтрока.ОписаниеПодразделения = ОписаниеПодразделения;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбИзмененияхВРеестре(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвЗапДейств <> Неопределено Тогда
		
		Для каждого СтрокаИзменения Из ОбъектXDTO.СвЗапДейств Цикл
			НоваяСтрока = ИнформацияОСвязях.ИзмененияВРеестре.Добавить();
			НоваяСтрока.ДатаИзменения = СтрокаИзменения.ДатаЗап;
			Если СтрокаИзменения.СвРегОрг <> Неопределено Тогда
				НоваяСтрока.ГосударственныйОрган = СтрокаИзменения.СвРегОрг.НаимНО;
			КонецЕсли;
			ОписаниеИзменения = "";
			Если СтрокаИзменения.ВидЗап <> Неопределено Тогда
				ОписаниеИзменения = ОписаниеИзменения + СтрокаИзменения.ВидЗап.НаимВидЗап;
			КонецЕсли;
			Если СтрокаИзменения.СвСвид <> Неопределено Тогда
				Для каждого СтрокаСвидетельства Из СтрокаИзменения.СвСвид Цикл
					ОписаниеИзменения = ОписаниеИзменения + ?(ПустаяСтрока(ОписаниеИзменения), "", Символы.ПС)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Выдано свидетельство %1 %2'"), 
						СтрокаСвидетельства.Серия,
						СтрокаСвидетельства.Номер);
				КонецЦикла;
			КонецЕсли;
			НоваяСтрока.ОписаниеИзменения = ОписаниеИзменения;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОРуководителе(ОбъектXDTO, ИнформацияОСвязях)

	Если ОбъектXDTO.СвУправлДеятСвязЮЛ <> Неопределено
		И ОбъектXDTO.СвУправлДеятСвязЮЛ.СведДолжнФЛСвязЮЛ <> Неопределено Тогда
		
		Для каждого СтрокаРуководителя Из ОбъектXDTO.СвУправлДеятСвязЮЛ.СведДолжнФЛСвязЮЛ Цикл
			
			Если ПолучитьДанныеОРуководителеИНомерТелефона(СтрокаРуководителя.СведДолжнФЛ, ИнформацияОСвязях) Тогда
				ЗаполнитьСвязанныеОрганизацииФизическогоЛица(
					СтрокаРуководителя, 
					ИнформацияОСвязях, 
					ИнформацияОСвязях.ИНН, 
					ИнформацияОСвязях.Руководитель.ИНН);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюОбУчрежденныхФирмах(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвязЮЛПоУчредителю <> Неопределено
		И ОбъектXDTO.СвязЮЛПоУчредителю.СвязЮЛ <> Неопределено Тогда
		
		Для каждого ОбъектXDTOСвязЮЛ Из ОбъектXDTO.СвязЮЛПоУчредителю.СвязЮЛ Цикл
			ЗаполнитьСтрокуОбУчредителе(ОбъектXDTOСвязЮЛ, ИнформацияОСвязях.УчрежденныеФирмы, ИнформацияОСвязях.ИНН);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюОбУчредителях(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвУчредитСвязЮЛ <> Неопределено Тогда
		
		// Учредители - российские юридические лица.
		
		Если ОбъектXDTO.СвУчредитСвязЮЛ.УчрЮЛРосСвязЮЛ <> Неопределено Тогда
			
			Для каждого ДанныеУчредителя Из ОбъектXDTO.СвУчредитСвязЮЛ.УчрЮЛРосСвязЮЛ Цикл
				
				СтрокаУчредителя = ИнформацияОСвязях.Учредители.Добавить();
				СтрокаУчредителя.ОрганизацииГдеРуководитель = НоваяТаблицаОрганизации();
				СтрокаУчредителя.ОрганизацииГдеУчредитель   = НоваяТаблицаОрганизацииГдеУчредитель();
				
				СтрокаУчредителя.Учредитель = ДанныеУчредителя.УчрЮЛРос.НаимЮЛПолн;
				СтрокаУчредителя.ИНН = ?(СтрДлина(ДанныеУчредителя.УчрЮЛРос.ИННЮЛ) = 10, ДанныеУчредителя.УчрЮЛРос.ИННЮЛ, "");
				
				Если ДанныеУчредителя.УчрЮЛРос.ДоляУстКап <> Неопределено Тогда
					СтрокаУчредителя.СуммаКапитала   = ДанныеУчредителя.УчрЮЛРос.ДоляУстКап.НоминСтоим;
					СтрокаУчредителя.ПроцентКапитала = ДанныеУчредителя.УчрЮЛРос.ДоляУстКап.Процент;
				КонецЕсли;
	
				// Еще организации, где этот учредитель является учредителем.
				
				Если ДанныеУчредителя.связЮЛПоУчредителю <> Неопределено
					И ДанныеУчредителя.связЮЛПоУчредителю.связЮЛ <> Неопределено Тогда
						
					Для каждого ОбъектXDTOСвязЮЛ Из ДанныеУчредителя.связЮЛПоУчредителю.связЮЛ Цикл
						ЗаполнитьСтрокуОбУчредителе(ОбъектXDTOСвязЮЛ, СтрокаУчредителя.ОрганизацииГдеУчредитель, ИнформацияОСвязях.ИНН);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Учредители - иностранные юридические лица.
		
		Если ОбъектXDTO.СвУчредитСвязЮЛ.УчрЮЛИнСвязЮЛ <> Неопределено Тогда
			
			Для каждого ДанныеУчредителя Из ОбъектXDTO.СвУчредитСвязЮЛ.УчрЮЛИнСвязЮЛ Цикл
				
				СтрокаУчредителя = ИнформацияОСвязях.Учредители.Добавить();
				СтрокаУчредителя.ОрганизацииГдеРуководитель = НоваяТаблицаОрганизации();
				СтрокаУчредителя.ОрганизацииГдеУчредитель   = НоваяТаблицаОрганизацииГдеУчредитель();
				
				Учредитель = ДанныеУчредителя.УчрЮЛИн.НаимЮЛПолн;
				Если ДанныеУчредителя.УчрЮЛИн.СвРегИн <> Неопределено Тогда
					Учредитель = Учредитель + " (" + ДанныеУчредителя.УчрЮЛИн.СвРегИн.НаимСтран + ")";
				КонецЕсли;
				СтрокаУчредителя.Учредитель = Учредитель;
				
				Если ДанныеУчредителя.УчрЮЛИн.ДоляУстКап <> Неопределено Тогда
					СтрокаУчредителя.СуммаКапитала   = ДанныеУчредителя.УчрЮЛИн.ДоляУстКап.НоминСтоим;
					СтрокаУчредителя.ПроцентКапитала = ДанныеУчредителя.УчрЮЛИн.ДоляУстКап.Процент;
				КонецЕсли;
	
				// Еще организации, где этот учредитель является учредителем.
				
				Если ДанныеУчредителя.связЮЛПоУчредителю <> Неопределено
					И ДанныеУчредителя.связЮЛПоУчредителю.связЮЛ <> Неопределено Тогда
						
					Для каждого ОбъектXDTOСвязЮЛ Из ДанныеУчредителя.связЮЛПоУчредителю.связЮЛ Цикл
						ЗаполнитьСтрокуОбУчредителе(ОбъектXDTOСвязЮЛ, СтрокаУчредителя.ОрганизацииГдеУчредитель, ИнформацияОСвязях.ИНН);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Учредители - физические лица.
		
		Если ОбъектXDTO.СвУчредитСвязЮЛ.УчрФЛСвязЮЛ <> Неопределено Тогда
			
			Для каждого ДанныеУчредителя Из ОбъектXDTO.СвУчредитСвязЮЛ.УчрФЛСвязЮЛ Цикл
				
				СтрокаУчредителя = ИнформацияОСвязях.Учредители.Добавить();
				СтрокаУчредителя.ОрганизацииГдеРуководитель = НоваяТаблицаОрганизации();
				СтрокаУчредителя.ОрганизацииГдеУчредитель   = НоваяТаблицаОрганизацииГдеУчредитель();
				
				Учредитель = НовоеКонтактноеЛицо();
				Если ДанныеУчредителя.УчрФЛ.ФИО <> Неопределено Тогда
					Учредитель.Фамилия  = ТРег(ДанныеУчредителя.УчрФЛ.ФИО.Фамилия);
					Учредитель.Имя      = ТРег(ДанныеУчредителя.УчрФЛ.ФИО.Имя);
					Учредитель.Отчество = ТРег(ДанныеУчредителя.УчрФЛ.ФИО.Отчество);
					Учредитель.ИНН      = ДанныеУчредителя.УчрФЛ.ИННФЛ;
					Учредитель.Представление = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					    НСтр("ru='%1 %2 %3'"),
						Учредитель.Фамилия,
						Учредитель.Имя,
						Учредитель.Отчество));
				КонецЕсли;
				
				СтрокаУчредителя.Учредитель = Учредитель.Представление;
				СтрокаУчредителя.ИНН = ?(СтрДлина(Учредитель.ИНН) = 12, Учредитель.ИНН, "");
				
				Если ДанныеУчредителя.УчрФЛ.ДоляУстКап <> Неопределено Тогда
					СтрокаУчредителя.СуммаКапитала   = ДанныеУчредителя.УчрФЛ.ДоляУстКап.НоминСтоим;
					СтрокаУчредителя.ПроцентКапитала = ДанныеУчредителя.УчрФЛ.ДоляУстКап.Процент;
				КонецЕсли;
				
				ЗаполнитьСвязанныеОрганизацииФизическогоЛица(
					ДанныеУчредителя, 
					СтрокаУчредителя, 
					ИнформацияОСвязях.ИНН, 
					СтрокаУчредителя.ИНН);
	
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСвязанныеОрганизацииФизическогоЛица(ДанныеФизЛица, Результат, ИННКонтрагента, ИННФизЛица)

	Если ДанныеФизЛица.СвязЮЛПоПарам <> Неопределено Тогда
		
		// Организации, где это физическое лицо является руководителем.
		
		Если ЗначениеЗаполнено(ИННФизЛица)
			И ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоДиректоруПоИНН <> Неопределено 
			И ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоДиректоруПоИНН.corporationsFound > 0
			И ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоДиректоруПоИНН.связЮЛ <> Неопределено Тогда
			
			Для каждого ОбъектXDTOСвязЮЛ Из ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоДиректоруПоИНН.связЮЛ Цикл
				ЗаполнитьСтрокуОбОрганизации(ОбъектXDTOСвязЮЛ, Результат.ОрганизацииГдеРуководитель, ИННКонтрагента);
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ИННФизЛица)
			И ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоДиректоруПоФИО <> Неопределено 
			И ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоДиректоруПоФИО.corporationsFound > 0
			И ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоДиректоруПоФИО.связЮЛ <> Неопределено Тогда
			
			Для каждого ОбъектXDTOСвязЮЛ Из ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоДиректоруПоФИО.связЮЛ Цикл
				ЗаполнитьСтрокуОбОрганизации(ОбъектXDTOСвязЮЛ, Результат.ОрганизацииГдеРуководитель, ИННКонтрагента);
			КонецЦикла;
			Результат.ОрганизацииГдеРуководительПоФИО = Истина;
			
		КонецЕсли;
		
		// Организации, где это физическое лицо является учредителем.
		
		Если ЗначениеЗаполнено(ИННФизЛица)
			И ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоУчредителюПоИНН <> Неопределено 
			И ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоУчредителюПоИНН.corporationsFound > 0
			И ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоУчредителюПоИНН.связЮЛ <> Неопределено Тогда
			
			Для каждого ОбъектXDTOСвязЮЛ Из ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоУчредителюПоИНН.связЮЛ Цикл
				ЗаполнитьСтрокуОбУчредителе(ОбъектXDTOСвязЮЛ, Результат.ОрганизацииГдеУчредитель, ИННКонтрагента);
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ИННФизЛица)
			И ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоУчредителюПоФИО <> Неопределено 
			И ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоУчредителюПоФИО.corporationsFound > 0
			И ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоУчредителюПоФИО.связЮЛ <> Неопределено Тогда
			
			Для каждого ОбъектXDTOСвязЮЛ Из ДанныеФизЛица.СвязЮЛПоПарам.связЮЛПоУчредителюПоФИО.связЮЛ Цикл
				ЗаполнитьСтрокуОбУчредителе(ОбъектXDTOСвязЮЛ, Результат.ОрганизацииГдеУчредитель, ИННКонтрагента);
			КонецЦикла;
			Результат.ОрганизацииГдеУчредительПоФИО = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбУставномКапитале(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвУстКап <> Неопределено Тогда
		
		ИнформацияОСвязях.УставныйКапитал = ОбъектXDTO.СвУстКап.СумКап;
		
	ИначеЕсли ИнформацияОСвязях.Учредители.Количество() > 0 Тогда
		
		ИнформацияОСвязях.УставныйКапитал = ИнформацияОСвязях.Учредители.Итог("СуммаКапитала");
		
	Иначе
		
		ИнформацияОСвязях.УставныйКапитал = 0;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюОСтатусе(ОбъектXDTO, Данные)
	
	Если ОбъектXDTO.СвСтатус_РО <> Неопределено 
		И ОбъектXDTO.СвСтатус_РО.СвСтатус <> Неопределено Тогда
		
		Данные.НаименованиеСтатуса = ОбъектXDTO.СвСтатус_РО.СвСтатус.НаимСтатус;
		Данные.КодСтатуса          = ОбъектXDTO.СвСтатус_РО.СвСтатус.КодСтатус;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюОМассовостиАдреса(ОбъектXDTO, ИнформацияОСвязях)

	Если ОбъектXDTO.СвязЮЛПоАдресу <> Неопределено
		И ОбъектXDTO.СвязЮЛПоАдресу.СвязЮЛ <> Неопределено Тогда
		
		Для каждого ОбъектXDTOСвязЮЛ Из ОбъектXDTO.СвязЮЛПоАдресу.СвязЮЛ Цикл
			ЗаполнитьСтрокуОбОрганизации(ОбъектXDTOСвязЮЛ, ИнформацияОСвязях.ОрганизацииПоАдресу, ИнформацияОСвязях.ИНН);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюОБухгалтерскойОтчетности(ОбъектXDTO, ИнформацияОСвязях)

	Если ОбъектXDTO.annualStatement <> Неопределено Тогда
		
		Для каждого СтрокаОтчетности Из ОбъектXDTO.annualStatement Цикл
			
			НоваяСтрока = ИнформацияОСвязях.БухгалтерскаяОтчетность.Добавить();
			НоваяСтрока.Год = СтрокаОтчетности.year;
			НоваяСтрока.КодВалютыОтчетности = СтрокаОтчетности.measure;
			НоваяСтрока.ТипОтчетности       = СтрокаОтчетности.type;
			НоваяСтрока.Показатели          = НоваяТаблицаБухгалтерскаяОтчетностьПоказатели();
			Если СтрокаОтчетности.article <> Неопределено Тогда
				Для каждого СтрокаПоказателя Из СтрокаОтчетности.article Цикл
					НоваяСтрокаПоказателя = НоваяСтрока.Показатели.Добавить();
					НоваяСтрокаПоказателя.Код      = СтрокаПоказателя.code;
					НоваяСтрокаПоказателя.Значение = СтрокаПоказателя.value;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаОтчетности.type = "1" Тогда
				// Если в отчетности МП есть заполненные показатели с такими кодами - это обычная отчетность.
				КодыОбычнойОтчетности = СтрРазделить(
					"13103;13203;13403;13503;13603;13703;13104;13204;13404;13504;13604;13704", ";");
				НоваяСтрока.Показатели.Индексы.Добавить("Код");
				Для каждого КодОтчетности Из КодыОбычнойОтчетности Цикл
					СтрокаПоказателя = НоваяСтрока.Показатели.Найти(КодОтчетности, "Код");
					Если СтрокаПоказателя <> Неопределено 
						И СтрокаПоказателя.Значение <> 0 Тогда
						НоваяСтрока.ТипОтчетности = "2";
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвРегПФ <> Неопределено Тогда
		
		РегистрацияВПФР = НоваяРегистрацияВПенсионномФонде();
		
		РегистрационныйНомерПФР = ОбъектXDTO.СвРегПФ.РегНомПФ;
		РегистрационныйНомерПФР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2-%3'"), 
			Лев(РегистрационныйНомерПФР, 3), Сред(РегистрационныйНомерПФР,4, 3), Прав(РегистрационныйНомерПФР, 6));
		РегистрацияВПФР.РегистрационныйНомерПФР = РегистрационныйНомерПФР;
		Если ОбъектXDTO.СвРегПФ.СвОргПФ <> Неопределено Тогда
			КодОрганаПФР = ОбъектXDTO.СвРегПФ.СвОргПФ.КодПФ;
			КодОрганаПФР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2'"), 
				Лев(КодОрганаПФР, 3), Прав(КодОрганаПФР, 3));
			РегистрацияВПФР.КодОрганаПФР          = КодОрганаПФР;
			РегистрацияВПФР.НаименованиеОрганаПФР = ОбъектXDTO.СвРегПФ.СвОргПФ.НаимПФ;
		КонецЕсли;
		РегистрацияВПФР.ДатаРегистрации = ОбъектXDTO.СвРегПФ.ДатаРег;
		
		Реквизиты.РегистрацияВПенсионномФонде = РегистрацияВПФР;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвРегФСС <> Неопределено Тогда
		
		РегистрацияВФСС = НоваяРегистрацияВФСС();
		
		Если СтрДлина(ОбъектXDTO.СвРегФСС.РегНомФСС) <= 10 Тогда
			РегистрацияВФСС.РегистрационныйНомерФСС = СокрЛП(ОбъектXDTO.СвРегФСС.РегНомФСС);
			РегистрацияВФСС.КодПодчиненности        = "";
		Иначе
			РегистрацияВФСС.РегистрационныйНомерФСС = СокрЛП(Лев(ОбъектXDTO.СвРегФСС.РегНомФСС, 10));
			РегистрацияВФСС.КодПодчиненности        = СокрЛП(Сред(ОбъектXDTO.СвРегФСС.РегНомФСС, 11));
			Если СтрДлина(РегистрацияВФСС.КодПодчиненности) <> 5 Тогда
				РегистрацияВФСС.КодПодчиненности = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектXDTO.СвРегФСС.СвОргФСС <> Неопределено Тогда
			РегистрацияВФСС.КодОрганаФСС            = ОбъектXDTO.СвРегФСС.СвОргФСС.КодФСС;
			РегистрацияВФСС.НаименованиеОрганаФСС   = ОбъектXDTO.СвРегФСС.СвОргФСС.НаимФСС;
		КонецЕсли;
		РегистрацияВФСС.ДатаРегистрации = ОбъектXDTO.СвРегФСС.ДатаРег;
		
		Реквизиты.РегистрацияВФСС = РегистрацияВФСС;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвидетельствоОРегистрации(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвЗапДейств <> Неопределено Тогда
		
		Свидетельство = НовоеСвидетельствоОРегистрации();
		Свидетельство.Дата = '00010101';
		Для Каждого Запись Из ОбъектXDTO.СвЗапДейств Цикл
			Для Каждого ЗаписьСвидетельства Из Запись.СвСвид Цикл
				Если ЗначениеЗаполнено(ЗаписьСвидетельства.ДатаЗап) Тогда
					ДатаЗап = ЗаписьСвидетельства.ДатаЗап;
				ИначеЕсли ЗначениеЗаполнено(Запись.ДатаЗап) Тогда
					ДатаЗап = Запись.ДатаЗап;
				Иначе
					ДатаЗап = '00010101';
				КонецЕсли;
				Если ДатаЗап > Свидетельство.Дата Тогда
					Свидетельство.Дата  = ДатаЗап;
					Свидетельство.Серия = ЗаписьСвидетельства.Серия;
					Свидетельство.Номер = Прав("000000000" + ЗаписьСвидетельства.Номер, 9);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если Свидетельство.Дата > '00010101' Тогда
			Реквизиты.СвидетельствоОРегистрации = Свидетельство;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЮридическийАдрес(ОбъектXDTO, Реквизиты, Фабрика)
	
	ПространствоИменКИ = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	ПространствоИменАдресов = РаботаСАдресами.ПространствоИмен();
	
	Если ОбъектXDTO.СвАдрес <> Неопределено 
		И ОбъектXDTO.СвАдрес.Адрес <> Неопределено Тогда
		
		АдресРФ_КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменАдресов, "АдресРФ"));
		
		ЗаменитьПолныеНаименованияАдресныхОбъектовСокращенными(ОбъектXDTO.СвАдрес.Адрес.Состав);
		ПроверитьДополнительныеАдресныеЭлементы(ОбъектXDTO.СвАдрес.Адрес.Состав, Фабрика);
		ЗаполнитьОбъектXDTOКонтактнойИнформации(ФабрикаXDTO, АдресРФ_КИ, ОбъектXDTO.СвАдрес.Адрес.Состав);
		
		КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "КонтактнаяИнформация"));
		КИ.Состав        = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "Адрес"));
		КИ.Состав.Страна = ОбъектXDTO.СвАдрес.Адрес.Страна;
		КИ.Состав.Состав = АдресРФ_КИ;
		КИ.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(КИ,
			Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес));
		
		СтруктураКИ = НоваяКонтактнаяИнформация();
		СтруктураКИ.КонтактнаяИнформация = СериализацияОбъектаXDTO(КИ);
		СтруктураКИ.Представление  = КИ.Представление;
		
		Реквизиты.ЮридическийАдрес = СтруктураКИ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРуководителяИНомерТелефона(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвУправлДеят <> Неопределено
		И ОбъектXDTO.СвУправлДеят.СведДолжнФЛ <> Неопределено Тогда
		
		Для каждого СведенияОДолжности Из ОбъектXDTO.СвУправлДеят.СведДолжнФЛ Цикл
			Если ПолучитьДанныеОРуководителеИНомерТелефона(СведенияОДолжности, Реквизиты) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеОРуководителеИНомерТелефона(СведенияОДолжности, Данные)
	
	Если СтрНайти(ВРег(СведенияОДолжности.НаимВидДолжн), "РУКОВОДИТЕЛЬ") = 0 
		ИЛИ СведенияОДолжности.ФИО = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Руководитель
	СтруктураКИ = НовоеКонтактноеЛицо();
	СтруктураКИ.Фамилия    = ТРег(СведенияОДолжности.ФИО.Фамилия);
	СтруктураКИ.Имя        = ТРег(СведенияОДолжности.ФИО.Имя);
	СтруктураКИ.Отчество   = ТРег(СведенияОДолжности.ФИО.Отчество);
	СтруктураКИ.Должность  = ПредложениеСЗаглавнойБуквы(СведенияОДолжности.НаимДолжн);
	СтруктураКИ.ИНН        = СведенияОДолжности.ИННФл;
	СтруктураКИ.ДатаЗаписи = СведенияОДолжности.ДатаНачДейств;
	СтруктураКИ.Представление = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	    НСтр("ru='%1 %2 %3'"),
		СтруктураКИ.Фамилия,
		СтруктураКИ.Имя,
		СтруктураКИ.Отчество));
	
	Данные.Руководитель = СтруктураКИ;
	
	// Номер телефона
	Если ЗначениеЗаполнено(СведенияОДолжности.НомТел) Тогда
		ПространствоИменКИ = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "КонтактнаяИнформация"));
		КИ.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "НомерТелефона"));
		Если Лев(СведенияОДолжности.НомТел, 1) = "(" Тогда
			КонецКодаГорода     = СтрНайти(СведенияОДолжности.НомТел, ")");
			КИ.Состав.КодГорода = Сред(СведенияОДолжности.НомТел, 2, КонецКодаГорода - 2);
			КИ.Состав.Номер     = Сред(СведенияОДолжности.НомТел, КонецКодаГорода + 1);
		Иначе
			КИ.Состав.Номер     = СведенияОДолжности.НомТел;
		КонецЕсли;
		КИ.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(КИ,
			Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон));
		СтруктураКИ = НоваяКонтактнаяИнформация();
		СтруктураКИ.КонтактнаяИнформация = СериализацияОбъектаXDTO(КИ);
		СтруктураКИ.Представление        = КИ.Представление;
		
		Данные.Телефон = СтруктураКИ;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьСтрокуОбОрганизации(ОбъектXDTO, ТаблицаДанных, ИННКонтрагента)

	Если ЗначениеЗаполнено(ОбъектXDTO.ИНН)
		И (ОбъектXDTO.ИНН = ИННКонтрагента
		ИЛИ ТаблицаДанных.Найти(ОбъектXDTO.ИНН, "ИНН") <> Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыЮЛ = НовыеРеквизитыЮридическогоЛица();
	ЗаполнитьНаименованияЮридическогоЛица(ОбъектXDTO, РеквизитыЮЛ);
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.НаименованиеОрганизации = РеквизитыЮЛ.НаименованиеСокращенное;
	НоваяСтрока.ИНН = ?(СтрДлина(ОбъектXDTO.ИНН) = 10, ОбъектXDTO.ИНН, "");
	ЗаполнитьИнформациюОСтатусе(ОбъектXDTO, НоваяСтрока);
	
	Возврат НоваяСтрока;

КонецФункции

Процедура ЗаполнитьСтрокуОбУчредителе(ОбъектXDTO, ТаблицаДанных, ИННКонтрагента)
	
	НоваяСтрока = ЗаполнитьСтрокуОбОрганизации(ОбъектXDTO, ТаблицаДанных, ИННКонтрагента);
	
	Если НоваяСтрока <> Неопределено
		И ОбъектXDTO.ДоляУстКап <> Неопределено Тогда
		НоваяСтрока.СуммаКапитала   = ОбъектXDTO.ДоляУстКап.НоминСтоим;
		НоваяСтрока.ПроцентКапитала = ОбъектXDTO.ДоляУстКап.Процент;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОПроверкахКонтролирующимиОрганами(ОбъектXDTO, ИнформацияОПроверках, Плановые, Внеплановые, Завершенные, Незавершенные)
	
	Если НЕ Завершенные И НЕ Незавершенные Тогда
		Возврат;
	КонецЕсли;
	ТолькоЗавершенные   = Завершенные И НЕ Незавершенные;
	ТолькоНезавершенные = НЕ Завершенные И Незавершенные;
	
	// Внеплановые проверки
	Если Внеплановые
		И ОбъектXDTO.InspectionsUnregular294 <> Неопределено Тогда
		Для каждого ПроверкиЗаМесяц Из ОбъектXDTO.InspectionsUnregular294 Цикл
			Если ПроверкиЗаМесяц.InspectionUnregular294 <> Неопределено Тогда
				
				ГодПроверки    = ПроверкиЗаМесяц.YEAR;
				МесяцПроверки  = ПроверкиЗаМесяц.MONTH;
				ПериодПроверки = Дата(ГодПроверки, МесяцПроверки, 1);
				
				Для каждого СтрокаПроверки Из ПроверкиЗаМесяц.InspectionUnregular294 Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаПроверки.KO_NAME) Тогда 
						Продолжить; // Пропускаем записи с пустым контролирующим органом.
					КонецЕсли;
					Завершена = СтрокаПроверки.InspectionResult294 <> Неопределено;
					Если ТолькоЗавершенные И НЕ Завершена
						ИЛИ ТолькоНезавершенные И Завершена Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ИнформацияОПроверках.Проверки.Добавить();
					НоваяСтрока.Идентификатор    = Формат(СтрокаПроверки.ERPID, "ЧГ=");
					НоваяСтрока.ПлановаяПроверка = Ложь;
					НоваяСтрока.ПериодПроверки   = ПериодПроверки;
					ДатаНачала = ?(ЗначениеЗаполнено(СтрокаПроверки.START_DATE), 
						СтрокаПроверки.START_DATE, ПериодПроверки);
					ДатаКонца  = ?(ЗначениеЗаполнено(СтрокаПроверки.END_DATE), 
						СтрокаПроверки.END_DATE, КонецМесяца(ДатаНачала));
					НоваяСтрока.ДатаПроверки = ДатаНачала;
					НоваяСтрока.Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='с %1 по %2'"), 
						Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаКонца, "ДЛФ=D"));
					НоваяСтрока.КонтролирующийОрган = СокрЛП(СтрокаПроверки.KO_NAME);
					НоваяСтрока.АдресПроверки = ?(ЗначениеЗаполнено(СтрокаПроверки.ADR_SEC_II), 
						СокрЛП(СтрокаПроверки.ADR_SEC_II), СокрЛП(СтрокаПроверки.ADR_SEC_I));
					НоваяСтрока.ЦельПроверки = СокрЛП(СтрокаПроверки.INSP_TARGET);
					НоваяСтрока.Нарушения    = НоваяТаблицаНарушенияВыявленныеКонтролирующимиОрганами();
					
					Если Завершена Тогда
						
						Если СтрокаПроверки.InspectionResult294.InspectionViolations294 <> Неопределено Тогда
							Для каждого СтрокаНарушения Из СтрокаПроверки.InspectionResult294.InspectionViolations294 Цикл
								НоваяСтрокаНарушения = НоваяСтрока.Нарушения.Добавить();
								НоваяСтрокаНарушения.НомерНарушения = СтрокаНарушения.Violation_ID;
								НоваяСтрокаНарушения.Нарушение      = СтрокаНарушения.Violation_Note;
								НоваяСтрокаНарушения.НарушенныйАкт  = СтрокаНарушения.Violation_Act;
								НоваяСтрокаНарушения.Предписание    = СтрокаНарушения.Injunction_Note;
								НоваяСтрокаНарушения.Исполнение     = СтрокаНарушения.Injunction_Execution;
							КонецЦикла;
						КонецЕсли;
						
						КоличествоНарушений = НоваяСтрока.Нарушения.Количество();
						Если КоличествоНарушений = 0 Тогда
							НоваяСтрока.Результат = НСтр("ru='Нарушений не выявлено'");
						Иначе
							НоваяСтрока.Нарушения.Сортировать("НомерНарушения");
							НоваяСтрока.Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Выявлено %1'"),
								СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
									КоличествоНарушений, НСтр("ru='нарушение,нарушения,нарушений'")));
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Плановые проверки
	Если Плановые
		И ОбъектXDTO.InspectionsRegular294 <> Неопределено Тогда
		Для каждого ПроверкиЗаМесяц Из ОбъектXDTO.InspectionsRegular294 Цикл
			Если ПроверкиЗаМесяц.InspectionRegular294 <> Неопределено Тогда
				
				ГодПроверки    = ПроверкиЗаМесяц.YEAR;
				МесяцПроверки  = ПроверкиЗаМесяц.MONTH;
				ПериодПроверки = Дата(ГодПроверки, МесяцПроверки, 1);
				
				Для каждого СтрокаПроверки Из ПроверкиЗаМесяц.InspectionRegular294 Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаПроверки.KO_NAME) Тогда 
						Продолжить; // Пропускаем записи с пустым контролирующим органом.
					КонецЕсли;
					Завершена = СтрокаПроверки.InspectionResult294 <> Неопределено;
					Если ТолькоЗавершенные И НЕ Завершена
						ИЛИ ТолькоНезавершенные И Завершена Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ИнформацияОПроверках.Проверки.Добавить();
					НоваяСтрока.Идентификатор    = Формат(СтрокаПроверки.ERPID, "ЧГ=");
					НоваяСтрока.ПлановаяПроверка = Истина;
					НоваяСтрока.ПериодПроверки   = ПериодПроверки;
					ДатаНачала = ?(ЗначениеЗаполнено(СтрокаПроверки.START_DATE), 
						СтрокаПроверки.START_DATE, ПериодПроверки);
					Если ЗначениеЗаполнено(СтрокаПроверки.DURATION_SEC_II) Тогда
						Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='%1 рабочих дней'"), СтрокаПроверки.DURATION_SEC_II);
					ИначеЕсли ЗначениеЗаполнено(СтрокаПроверки.DURATION_SEC_I) Тогда
						Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='%1 рабочих часов'"), СтрокаПроверки.DURATION_SEC_I);
					Иначе
						Длительность = "";
					КонецЕсли;
					НоваяСтрока.ДатаПроверки = ДатаНачала;
					Если ЗначениеЗаполнено(Длительность) Тогда
						НоваяСтрока.Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='с %1, %2'"), Формат(ДатаНачала, "ДЛФ=D"), Длительность);
					Иначе
						НоваяСтрока.Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='с %1'"), Формат(ДатаНачала, "ДЛФ=D"));
					КонецЕсли;
					НоваяСтрока.КонтролирующийОрган = СокрЛП(СтрокаПроверки.KO_NAME);
					НоваяСтрока.АдресПроверки = ?(ЗначениеЗаполнено(СтрокаПроверки.ADR_SEC_IV), СокрЛП(СтрокаПроверки.ADR_SEC_IV),
						?(ЗначениеЗаполнено(СтрокаПроверки.ADR_SEC_III), СокрЛП(СтрокаПроверки.ADR_SEC_III), 
							СокрЛП(СтрокаПроверки.ADR_SEC_I)));
					НоваяСтрока.ЦельПроверки = СокрЛП(СтрокаПроверки.INSP_TARGET);
					НоваяСтрока.Нарушения    = НоваяТаблицаНарушенияВыявленныеКонтролирующимиОрганами();
					
					Если Завершена Тогда
						
						Если СтрокаПроверки.InspectionResult294.InspectionViolations294 <> Неопределено Тогда
							Для каждого СтрокаНарушения Из СтрокаПроверки.InspectionResult294.InspectionViolations294 Цикл
								НоваяСтрокаНарушения = НоваяСтрока.Нарушения.Добавить();
								НоваяСтрокаНарушения.НомерНарушения = СтрокаНарушения.Violation_ID;
								НоваяСтрокаНарушения.Нарушение      = СтрокаНарушения.Violation_Note;
								НоваяСтрокаНарушения.НарушенныйАкт  = СтрокаНарушения.Violation_Act;
								НоваяСтрокаНарушения.Предписание    = СтрокаНарушения.Injunction_Note;
								НоваяСтрокаНарушения.Исполнение     = СтрокаНарушения.Injunction_Execution;
							КонецЦикла;
						КонецЕсли;
						
						КоличествоНарушений = НоваяСтрока.Нарушения.Количество();
						Если КоличествоНарушений = 0 Тогда
							НоваяСтрока.Результат = НСтр("ru='Нарушений не выявлено'");
						Иначе
							НоваяСтрока.Нарушения.Сортировать("НомерНарушения");
							НоваяСтрока.Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Выявлено %1'"),
								СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
									КоличествоНарушений, НСтр("ru='нарушение,нарушения,нарушений'")));
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИнформацияОПроверках.Проверки.Сортировать("ПериодПроверки,ДатаПроверки,КонтролирующийОрган");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПредложениеСЗаглавнойБуквы(Строка)
	
	Если ЗначениеЗаполнено(Строка) Тогда
		Возврат ВРег(Лев(Строка, 1)) + НРег(Сред(Строка, 2))
	Иначе
		Возврат Строка;
	КонецЕсли;
	
КонецФункции

Функция ПроксиСервиса(ОписаниеОшибки)
	
	Прокси = Неопределено;
	ПараметрыАутентификации = ПараметрыАутентификацииВСервисе();
	
	Если ПараметрыАутентификации = Неопределено Тогда
		
		// Служебный текст. Должен быть обработан на клиенте.
		ОписаниеОшибки = "НеУказаныПараметрыАутентификации"; 
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыАутентификации.Пароль) Тогда
		
		// Служебный текст. Должен быть обработан на клиенте.
		ОписаниеОшибки = "НеУказанПароль"; 
		
	Иначе
		
		ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыПодключения.АдресWSDL = АдресСервиса();
		ПараметрыПодключения.URIПространстваИмен = ПространствоИмен();
		ПараметрыПодключения.ИмяСервиса = "RequisitesWebServiceEndpointImpl7Service";
		ПараметрыПодключения.ИмяТочкиПодключения = "RequisitesWebServiceEndpointImpl7Port";
		ПараметрыПодключения.ИмяПользователя = ПараметрыАутентификации.Логин;
		ПараметрыПодключения.Пароль = ПараметрыАутентификации.Пароль;
		ПараметрыПодключения.Таймаут = 60;
		
		Попытка
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки; 
		
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ПараметрыАутентификацииВСервисе()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Новый Структура("Логин,Пароль", 
			"fresh", "fresh");
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
 		МодульИнтернетПоддержкаПользователей = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		Возврат МодульИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция АдресСервиса()
	
	Возврат "https://api.orgregister.1c.ru/orgregister/v7?wsdl";

КонецФункции

Функция ПространствоИмен()

	Возврат "http://ws.orgregister.company1c.com/";

КонецФункции

Процедура ОбработатьОшибкуСервиса(ОбъектXDTO, ОписаниеОшибки, ИмяМетода, СтруктураРеквизитов)
	
	Если ОбъектXDTO <> Неопределено
		И НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	КодОсновногоЯзыка  = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
	ОписаниеОшибкиВРег = ВРег(ОписаниеОшибки);
	ТекстОшибки        = "";
	
	Если ОписаниеОшибкиВРег = ВРег("НеУказаныПараметрыАутентификации") Тогда
		
		ТекстОшибки    = "НеУказаныПараметрыАутентификации"; // Служебный текст. Должен быть обработан на клиенте.
		ТекстСобытия   = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		ОписаниеОшибки = НСтр("ru='Не указаны логин и пароль для доступа к интернет-поддержке'");
		
	ИначеЕсли ОписаниеОшибкиВРег = ВРег("НеУказанПароль") Тогда
		
		ТекстОшибки    = "НеУказанПароль"; // Служебный текст. Должен быть обработан на клиенте.
		ТекстСобытия   = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		ОписаниеОшибки = НСтр("ru='Не указан пароль для доступа к интернет-поддержке'");
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-11:") > 0 
		ИЛИ СтрНайти(ОписаниеОшибкиВРег, "SERVER-12:") > 0 Тогда
		
		ТекстОшибки    = "Сервис1СКонтрагентНеПодключен"; // Служебный текст. Должен быть обработан на клиенте.
		ТекстСобытия   = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		ОписаниеОшибки = НСтр("ru='Не подключен сервис 1С:Контрагент'");
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, """STATUS"":401") > 0 
		ИЛИ СтрНайти(ОписаниеОшибкиВРег, "SERVER-9:") > 0 Тогда
		
		ТекстОшибки  = НСтр("ru='Неверно указаны логин и пароль для доступа к интернет-поддержке'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-1:") > 0 Тогда
		
		Если ИмяМетода = "getCorporationRequisitesByINN" 
			ИЛИ ИмяМетода = "checkCorporationTrustability" Тогда
			ТекстОшибки = НСтр("ru='Не указан ИНН юридического лица'");
		ИначеЕсли ИмяМетода = "getEntrepreneurRequisitesByINN" 
			ИЛИ ИмяМетода = "checkPersonTrustabilityByInn" Тогда
			ТекстОшибки = НСтр("ru='Не указан ИНН предпринимателя'");
		ИначеЕсли ИмяМетода = "getCorporationRequisitesByNameAndAddress" Тогда
			ТекстОшибки = НСтр("ru='Не указано наименование юридического лица'");
		ИначеЕсли ИмяМетода = "getInspectionsByInn" Тогда
			ТекстОшибки = НСтр("ru='Не указан ИНН проверяемого лица'");	
		КонецЕсли;
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-2:") > 0 Тогда
		
		Если ИмяМетода = "getCorporationRequisitesByINN" 
			ИЛИ ИмяМетода = "checkCorporationTrustability" Тогда
			ТекстОшибки = НСтр("ru='ИНН юридического лица должен состоять из 10 цифр'");
		ИначеЕсли ИмяМетода = "getEntrepreneurRequisitesByINN" 
			ИЛИ ИмяМетода = "checkPersonTrustabilityByInn" Тогда
			ТекстОшибки = НСтр("ru='ИНН предпринимателя должен состоять из 12 цифр'");
		ИначеЕсли ИмяМетода = "getInspectionsByInn" Тогда
			ТекстОшибки = НСтр("ru='ИНН проверяемого лица должен состоять из 10 или 12 цифр'");
		КонецЕсли;
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-3:") > 0 Тогда
		
		Если ИмяМетода = "getCorporationRequisitesByINN" 
			
			ИЛИ ИмяМетода = "checkCorporationTrustability" Тогда
			ТекстОшибки = НСтр("ru='ИНН юридического лица должен содержать только цифры'");
		ИначеЕсли ИмяМетода = "getEntrepreneurRequisitesByINN" 
			ИЛИ ИмяМетода = "checkPersonTrustabilityByInn" Тогда
			ТекстОшибки = НСтр("ru='ИНН предпринимателя должен содержать только цифры'");
		ИначеЕсли ИмяМетода = "getInspectionsByInn" Тогда
			ТекстОшибки = НСтр("ru='ИНН проверяемого лица должен содержать только цифры'");
		КонецЕсли;
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-7:") > 0 Тогда
		
		ТекстОшибки  = НСтр("ru='Превышен лимит количества вызовов сервиса за один день'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-8:") > 0 Тогда
		
		ТекстОшибки  = НСтр("ru='Отсутствует действующий договор ИТС'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ОписаниеОшибки)
		И ОбъектXDTO = Неопределено Тогда
		
		Если ИмяМетода = "getCorporationRequisitesByINN" 
			ИЛИ ИмяМетода = "getEntrepreneurRequisitesByINN" Тогда
			ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные для заполнения реквизитов по ИНН %1'"),
				СтруктураРеквизитов.ИНН);
		ИначеЕсли ИмяМетода = "getCorporationRequisitesByNameAndAddress" Тогда
			ТекстОшибки  = НСтр("ru='Не удалось выполнить поиск по наименованию'");
		ИначеЕсли ИмяМетода = "getInspectionsByInn" Тогда
			ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные о проверках по ИНН %1'"),
				СтруктураРеквизитов.ИНН);
		ИначеЕсли ИмяМетода = "checkCorporationTrustability" Тогда
			ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные о юридическом лице с ИНН %1'"),
				СтруктураРеквизитов.ИНН);
		ИначеЕсли ИмяМетода = "checkPersonTrustabilityByInn" Тогда
			ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные о предпринимателе с ИНН %1'"),
				СтруктураРеквизитов.ИНН);
		КонецЕсли;
		ТекстСобытия   = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		ОписаниеОшибки = ТекстОшибки;	
	
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда // Неклассифицированная ошибка.
		ТекстОшибки  = НСтр("ru='Ошибка при работе с сервисом (подробнее см. Журнал регистрации)'");
		ТекстСобытия = НСтр("ru='Ошибка при работе с сервисом'", КодОсновногоЯзыка);
	КонецЕсли;
	
	СтруктураРеквизитов.ОписаниеОшибки = ТекстОшибки;
	
	ИмяСобытия = НСтр("ru = 'Сервис данных единых гос_реестров.'", КодОсновногоЯзыка) + " " + ТекстСобытия;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	
КонецПроцедуры

Функция СериализацияОбъектаXDTO(ОбъектXDTO)
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	Если ОбъектXDTO <> Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
	КонецЕсли;
	
	Возврат СтрЗаменить(Запись.Закрыть(), Символы.ПС, "&#10;");
	
КонецФункции

#КонецОбласти
