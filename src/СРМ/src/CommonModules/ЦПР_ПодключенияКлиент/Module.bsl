#Область СлужебныеФункции

Процедура ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеСозданияФайлаРемины(ДополнительныеПараметры) Экспорт
	ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗапуска.ДождатьсяЗавершения = Ложь;
	ПараметрыЗапуска.Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеЗапускаПрограммы", ЭтотОбъект, ДополнительныеПараметры);
	Сообщить(ДополнительныеПараметры.ИмяФайла);
	ФайловаяСистемаКлиент.ЗапуститьПрограмму("/usr/bin/remmina -c "+ДополнительныеПараметры.ИмяФайла,ПараметрыЗапуска);
КонецПроцедуры	

Процедура ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеЗапускаПрограммы(Результат, ДополнительныеПараметры) Экспорт
//	НачатьУдалениеФайлов(,ДополнительныеПараметры.Каталог);
КонецПроцедуры

Процедура ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеОткрытияПотокаЗаписиФайлаRemmina(Поток, ДополнительныеПараметры) Экспорт
	СтруктураНастройки = ДополнительныеПараметры.СтруктураНастройки;
	
	
	ФайлРемины = Новый ТекстовыйДокумент;
	ФайлРемины.ДобавитьСтроку("[remmina]");
	ФайлРемины.ДобавитьСтроку("name=" + СтруктураНастройки.ПартнерНаименование + "|"
		+ СтруктураНастройки.НаименованиеВладельца + "|" + СтруктураНастройки.Логин);
	ФайлРемины.ДобавитьСтроку("protocol=RDP");
	ФайлРемины.ДобавитьСтроку("server=" + СокрЛП(СтруктураНастройки.Адрес) + ?(ЗначениеЗаполнено(
		СтруктураНастройки.Порт), ":" + Формат(СтруктураНастройки.Порт, "ЧГ=0"), ""));
	ФайлРемины.ДобавитьСтроку("scale=1");
	ФайлРемины.ДобавитьСтроку("window_maximize=1");
	ФайлРемины.ДобавитьСтроку("viewmode=1");
	ФайлРемины.ДобавитьСтроку("username=" + СокрЛП(СтруктураНастройки.Логин));
	ФайлРемины.ДобавитьСтроку("password=" + ДополнительныеПараметры.ЗашифрованныйПароль);
	
	ЗаписьДанных = Новый ЗаписьДанных(Поток, , , , , , Ложь);
	ЗаписьДанных.НачатьЗаписьСтроки(Новый ОписаниеОповещения("ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеСозданияФайлаРемины",
		ЭтотОбъект, ДополнительныеПараметры), ФайлРемины.ПолучитьТекст());
КонецПроцедуры


Процедура ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеПолученияЗашифрованногоПароляRemmina(ЗашифрованныйПароль,
	ДополнительныеПараметры) Экспорт

	ДополнительныеПараметры.Вставить("ЗашифрованныйПароль",ЗашифрованныйПароль);

	ДополнительныеПараметры.Вставить("ИмяФайла", ДополнительныеПараметры.Каталог + ПолучитьРазделительПути() + Формат(
		ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".remmina");

	ФайловыеПотоки.НачатьСоздание(Новый ОписаниеОповещения("ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеОткрытияПотокаЗаписиФайлаRemmina",ЭтотОбъект,ДополнительныеПараметры), ДополнительныеПараметры.ИмяФайла);

КонецПроцедуры

Процедура НачатьПолучениеЗашифрованногоПароляRemminaЗавершениеЧтенияФайлаПароля(ДополнительныеПараметры) Экспорт
	ЗашифрованныйПароль=ДополнительныеПараметры.ТекстовыйДокументФайлаСПаролем.ПолучитьСтроку(1);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, ЗашифрованныйПароль);
КонецПроцедуры

Процедура НачатьПолучениеЗашифрованногоПароляRemminaЗавершениеВыполненияСкрипта(Результат, ДополнительныеПараметры) Экспорт
	Если Результат.КодВозврата <>0 Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, "");
		Возврат;
	КонецЕсли;  
	                     
	Текст=Новый ТекстовыйДокумент;
	
	ДополнительныеПараметры.Вставить("ТекстовыйДокументФайлаСПаролем", Текст);
	Текст.НачатьЧтение(Новый ОписаниеОповещения("НачатьПолучениеЗашифрованногоПароляRemminaЗавершениеЧтенияФайлаПароля", ЭтотОбъект, ДополнительныеПараметры), ДополнительныеПараметры.ИмяВременногоФайла);

КонецПроцедуры

Процедура НачатьПолучениеЗашифрованногоПароляRemminaЗавершениеЗаписиФайлаСкрипта(Результат, ДополнительныеПараметры) Экспорт
	Если Результат<>Истина Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, "");
		Возврат;
	КонецЕсли;

	ИмяВременногоФайла=ДополнительныеПараметры.ВременныйКаталог + ПолучитьРазделительПути() + Формат(
		ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".txt";
		
	ДополнительныеПараметры.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
	
	СтрокаКоманды="/usr/bin/python3 """+ДополнительныеПараметры.ИмяФайлаСкрипта+ """ "+ДополнительныеПараметры.Пароль+" """+ИмяВременногоФайла+"""";
	
	ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗапуска.ДождатьсяЗавершения = Истина;
	ПараметрыЗапуска.Оповещение = Новый ОписаниеОповещения("НачатьПолучениеЗашифрованногоПароляRemminaЗавершениеВыполненияСкрипта", ЭтотОбъект, ДополнительныеПараметры);
	
	ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапуска);
	
КонецПроцедуры

Процедура НачатьПолучениеЗашифрованногоПароляRemmina(ОписаниеОповещения, Пароль, ВременныйКаталог)
	ТекстСкриптаНаПитоне=
	"import base64
	|import os
	|import re
	|import sys
	|from Crypto.Cipher import DES3
	|from os.path import expanduser
	|
	|home = expanduser(""~"")
	|REMMINA_FOLDER = home+'/'+'.config/remmina/'
	|REMMINA_PREF = 'remmina.pref'
	|REGEXP_ACCOUNTS = r'[0-9]{13}\.remmina'
	|REGEXP_PREF = r'remmina.pref'
	|
	|fs = open(REMMINA_FOLDER+REMMINA_PREF)
	|fso = fs.readlines()
	|fs.close()
	|
	|for i in fso:
	|    if re.findall(r'secret=', i):
	|          REMMINAPREF_SECRET_B64 = i[len(r'secret='):][:-1]
	|
	|plain = sys.argv[1].encode('utf-8')
	|secret = base64.b64decode(REMMINAPREF_SECRET_B64)
	|key = secret[:24]
	|iv = secret[24:]
	|plain = plain + b""\0"" * (8 - len(plain) % 8)
	|cipher = DES3.new(key, DES3.MODE_CBC, iv)
	|result = cipher.encrypt(plain)
	|result = base64.b64encode(result)
	|result = result.decode('utf-8')
	|
	|tempfilename = sys.argv[2]
	|
	|fileResult=open(tempfilename, ""w"")
	|fileResult.write(result)
	|fileResult.close()";
	Текст = Новый ТекстовыйДокумент();
	Текст.УстановитьТекст(ТекстСкриптаНаПитоне);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Оповещение", ОписаниеОповещения);
	ДопПараметры.Вставить("ВременныйКаталог", ВременныйКаталог);
	ДопПараметры.Вставить("Пароль", Пароль);
	ДопПараметры.Вставить("ИмяФайлаСкрипта", ВременныйКаталог + ПолучитьРазделительПути() + Формат(
		ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".py");
		
	Оповещение = Новый ОписаниеОповещения("НачатьПолучениеЗашифрованногоПароляRemminaЗавершениеЗаписиФайлаСкрипта", ЭтотОбъект, ДопПараметры);
	Текст.НачатьЗапись(Оповещение, ДопПараметры.ИмяФайлаСкрипта);
КонецПроцедуры

Процедура ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеЗаписиФайлаRDP(Результат, ДополнительныеПараметры) Экспорт
	Если Результат<>Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗапуска.ДождатьсяЗавершения = Ложь;
	ПараметрыЗапуска.Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеЗапускаПрограммы", ЭтотОбъект, ДополнительныеПараметры);
	
	ФайловаяСистемаКлиент.ЗапуститьПрограмму("mstsc """+ДополнительныеПараметры.ИмяФайлаRDP+""" /f",ПараметрыЗапуска);

КонецПроцедуры

Процедура ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеДобавленияПароляВХранилищеПаролейWindows(Результат,
	ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ИмяФайлаRDP", ДополнительныеПараметры.Каталог + ПолучитьРазделительПути() + Формат(
		ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".rdp");

	Текст=Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ЦПР_ПодключенияСервер.ТекстФайлаПодключениеКУдаленнымРабочимСтолам(ДополнительныеПараметры.СтруктураНастройки));
	Текст.НачатьЗапись(Новый ОписаниеОповещения("ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеЗаписиФайлаRDP", ЭтотОбъект, ДополнительныеПараметры), ДополнительныеПараметры.ИмяФайлаRDP);

КонецПроцедуры

Процедура ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеСозданияВременногоКаталога(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(Результат);
	
	ДополнительныеПараметры.Вставить("Каталог", Результат);
	
	СтруктураНастройки = ДополнительныеПараметры.СтруктураНастройки;
	Если ДополнительныеПараметры.ЭтоWindowsКлиент Тогда
		ПараметрыЗапуска = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
		ПараметрыЗапуска.ДождатьсяЗавершения = Истина;
		ПараметрыЗапуска.Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеДобавленияПароляВХранилищеПаролейWindows", ЭтотОбъект, ДополнительныеПараметры);
		ФайловаяСистемаКлиент.ЗапуститьПрограмму("cmdkey /add:"+СокрЛП(СтруктураНастройки.Адрес)+" /user:"+СокрЛП(СтруктураНастройки.Логин)+" /pass:"+СокрЛП(СтруктураНастройки.Пароль), ПараметрыЗапуска);
	Иначе
		
		НачатьПолучениеЗашифрованногоПароляRemmina(
			Новый ОписаниеОповещения("ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеПолученияЗашифрованногоПароляRemmina",
			ЭтотОбъект, ДополнительныеПараметры), СокрЛП(СтруктураНастройки.Пароль), Результат);

	КонецЕсли;
	
	//Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
	//	//1. добавляем пароль в хранилище паролей
	//	СтрокаКоманды="cmdkey /add:"+СокрЛП(СтруктураНастройки.Адрес)+" /user:"+СокрЛП(СтруктураНастройки.Логин)+" /pass:"+СокрЛП(СтруктураНастройки.Пароль);
	//	ЗапуститьПриложение(СтрокаКоманды,,Истина);
	//	
	//	ИмяВременногоФайла=ПолучитьИмяВременногоФайла("rdp");
	//	
	//	ДД=ЦПР_ПодключенияСервер.ПолучитьДвоичныеДанныеФайлаПодключениеКУдаленнымРабочимСтолам(СтруктураНастройки);
	//	ДД.Записать(ИмяВременногоФайла);
	//	
	//	СтрокаКоманды="mstsc """+ИмяВременногоФайла+""" /f";
	//	
	//иначе
	//	//Сначала пробуем ремину оживить
	//	ЗашифрованныйПароль=ЗашифроватьПарольДляRemmina(СокрЛП(СтруктураНастройки.Пароль));
	//	СтрокаКоманды="export DIR=/tmp/remmina ; mkdir -p $DIR ; chmod 700 $DIR ; export FILE=$(mktemp -p $DIR XXXXXXXXXX --suffix=.remmina) ; echo '[remmina]\nname="+СтруктураНастройки.ПартнерНаименование+"|"+СтруктураНастройки.НаименованиеВладельца+"|"+СтруктураНастройки.Логин+"\nprotocol=RDP\nserver="+СокрЛП(СтруктураНастройки.Адрес)+?(ЗначениеЗаполнено(СтруктураНастройки.Порт),":"+Формат(СтруктураНастройки.Порт,"ЧГ=0"),"")+"\nscale=1\nwindow_maximize=1\nviewmode=1\nusername="+СокрЛП(СтруктураНастройки.Логин)+"\npassword="+ЗашифрованныйПароль+"' > $FILE ; remmina -c $FILE ; rm -f $FILE";
	//	
	//
	//КонецЕсли;
	//КомандаСистемы(СтрокаКоманды);
	//
	//Попытка
	//	//УдалитьФайлы(ИмяВременногоФайла);
	//Исключение
	//КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеПоНастрйоке
Процедура ВыполнитьПодключение(Подключение,Логин,Пароль) Экспорт 
	СтруктураПараметровПодключения=ЦПР_ПодключенияСервер.ПолучитьСтруктуруНастройкиПодключения(Подключение,Логин,Пароль);
	
	Если Не СтруктураПараметровПодключения.Свойство("ТипСтрокой") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметровПодключения.ТипСтрокой="RDP" Тогда
		ВыполнитьПодключениеКУдаленномуРабочемуСтолу(СтруктураПараметровПодключения);
	ИначеЕсли СтруктураПараметровПодключения.ТипСтрокой="AmmyAdmin" Тогда
		ВыполнитьПодключениеЧерезАммиАдмин(СтруктураПараметровПодключения);
	ИначеЕсли СтруктураПараметровПодключения.ТипСтрокой="Email" Тогда
		ВыполнитьПодключениеКЭлектроннойПочте(СтруктураПараметровПодключения);
	ИначеЕсли СтруктураПараметровПодключения.ТипСтрокой="HTTP" Тогда
		ВыполнитьПодключениеКИнтернетРесурсу(СтруктураПараметровПодключения);
	ИначеЕсли СтруктураПараметровПодключения.ТипСтрокой="TeamViewer" Тогда
		ВыполнитьПодключениеЧерезТимВьювер(СтруктураПараметровПодключения);
	ИначеЕсли СтруктураПараметровПодключения.ТипСтрокой="AnyDesk" Тогда
		ВыполнитьПодключениеЧерезAnyDesk(СтруктураПараметровПодключения);
	ИначеЕсли СтруктураПараметровПодключения.ТипСтрокой="VNC" Тогда
		ВыполнитьПодключениеЧерезVNC(СтруктураПараметровПодключения);
	ИначеЕсли СтруктураПараметровПодключения.ТипСтрокой="UltraVNC" Тогда
		ВыполнитьПодключениеЧерезUltraVNC(СтруктураПараметровПодключения);
	ИначеЕсли СтруктураПараметровПодключения.ТипСтрокой="VPN" Тогда
		ВыполнитьПодключениеКVPN(СтруктураПараметровПодключения);
	ИначеЕсли СтруктураПараметровПодключения.ТипСтрокой="SSH" Тогда	
		ВыполнитьПодключениеКSSH(СтруктураПараметровПодключения);
	КонецЕсли;

КонецПроцедуры
	
Процедура ВыполнитьПодключениеКУдаленномуРабочемуСтолу(СтруктураНастройки) 

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СтруктураНастройки", СтруктураНастройки);
	ДопПараметры.Вставить("ЭтоWindowsКлиент", ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент());
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключениеКУдаленномуРабочемуСтолуЗавершениеСозданияВременногоКаталога", ЭтотОбъект, ДопПараметры);
	
	ФайловаяСистемаКлиент.СоздатьВременныйКаталог(Оповещение);
КонецПроцедуры

Процедура ВыполнитьПодключениеЧерезАммиАдмин(СтруктураНастройки) 
	Файл=Новый Файл(СтруктураНастройки.ИмяФайлаПрограммы);
	
	Если НЕ Файл.Существует() Тогда
		ПоказатьПредупреждение(,"Не указан путь к файлу амми админа");
		Возврат;
	КонецЕсли;
	
	ПутькКПрограмме = """"+СтруктураНастройки.ИмяФайлаПрограммы+"""";
	
	СтрокаЗапуска = ПутькКПрограмме +" -connect "+ СокрЛП(СтруктураНастройки.Адрес)+ ?(ЗначениеЗаполнено(СтруктураНастройки.Пароль)," -password " + СтруктураНастройки.Пароль,"");
	
	ПараметрыЗ = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗ.ДождатьсяЗавершения = Ложь;
	ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаЗапуска,ПараметрыЗ);
КонецПроцедуры

Процедура ВыполнитьПодключениеКЭлектроннойПочте(СтруктураНастройки) 
	
КонецПроцедуры

Процедура ВыполнитьПодключениеКИнтернетРесурсу(СтруктураНастройки)
	
	СтрокаЗапуска  = СокрЛП(СтруктураНастройки.Адрес)+?(ЗначениеЗаполнено(СтруктураНастройки.Порт),":"+Формат(СтруктураНастройки.Порт,"ЧГ=0"),"");
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СтрокаЗапуска);

КонецПроцедуры

Процедура ВыполнитьПодключениеЧерезТимВьювер(СтруктураНастройки) 
	
	//||teamviewer.exe -i <ID> --Password <Password>
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		//Файл=Новый Файл(СтруктураНастройки.ИмяФайлаПрограммы);
		//
		//Если НЕ Файл.Существует() Тогда
		//	ПоказатьПредупреждение(,"Не указан путь к файлу Team Viewer");
		//	Возврат;
		//КонецЕсли;
		
		ПутьКПрограмме = """"+СтруктураНастройки.ИмяФайлаПрограммы+"""";
	Иначе
		ПутьКПрограмме="/usr/bin/teamviewer";
	КонецЕсли;
	
	
	СтрокаЗапуска = ПутьКПрограмме +" -i """+ СокрЛП(СтруктураНастройки.Адрес)+""" --Password """+СтруктураНастройки.Пароль+"""";
	
	ПараметрыЗ = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗ.ДождатьсяЗавершения = Ложь;
	ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаЗапуска,ПараметрыЗ);
КонецПроцедуры

Процедура ПустойОбработчикЗавершенияЗапускаПриложения(Результат, ДополнительныеПараметры) Экспорт
	Сообщить(Результат)	
КонецПроцедуры

Процедура ВыполнитьПодключениеЧерезAnyDesk(СтруктураНастройки) 
	//	Connecting with Password (only works for Windows)
	//Example script that connects to alias@ad with password. Use command line or batch script:
	
	//echo password | "C:\Program Files (x86)\AnyDesk\AnyDesk.exe" alias@ad --with-password
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		//Файл=Новый Файл(СтруктураНастройки.ИмяФайлаПрограммы);
		//
		//Если НЕ Файл.Существует() Тогда
		//	ПоказатьПредупреждение(, "Не указан путь к файлу AnyDesk");
		//	Возврат;
		//КонецЕсли;
		
		ПутьКПрограмме = """"+СтруктураНастройки.ИмяФайлаПрограммы+"""";
		ПутьКПрограммеEcho = "echo";
		СтрокаЗапуска = "cmd /C """;
	Иначе
		ПутьКПрограмме="/usr/bin/anydesk";
		ПутьКПрограммеEcho="/usr/bin/echo";
		СтрокаЗапуска = "x-terminal-emulator -e """;
	КонецЕсли;
	
	
	СтрокаЗапуска = СтрокаЗапуска + ПутьКПрограммеEcho+" "+СтруктураНастройки.Пароль+" | "+ПутьКПрограмме+" "+СокрЛП(СтруктураНастройки.Адрес)+" --with-password""";

	ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаЗапуска);
КонецПроцедуры

Процедура ВыполнитьПодключениеЧерезVNCЗавершениеСозданияФайла(ДополнительныеПараметры)
	
	СтруктураНастройки = ДополнительныеПараметры.СтруктураНастройки;
	Если ДополнительныеПараметры.ЭтоWindowsКлиент Тогда
		ПутьКПрограмме = """"+СтруктураНастройки.ИмяФайлаПрограммы+"""";
		Если ДополнительныеПараметры.ЭтоUltraVNC Тогда
			СтрокаЗапуска = ПутьКПрограмме +" -connect "+СокрЛП(СтруктураНастройки.Адрес)+?(ЗначениеЗаполнено(СтруктураНастройки.Порт),":"+Формат(СтруктураНастройки.Порт,"ЧГ=0"),"")+" -password "+СтруктураНастройки.Пароль;
		Иначе
			СтрокаЗапуска = ПутьКПрограмме +" -host="+ СокрЛП(СтруктураНастройки.Адрес)+?(ЗначениеЗаполнено(СтруктураНастройки.Порт)," -port="+Формат(СтруктураНастройки.Порт,"ЧГ=0"),"")+" -password="+СтруктураНастройки.Пароль;
		КонецЕСли;
	иначе
		ПутьКПрограмме = "/usr/bin/java -jar "+СтруктураНастройки.ИмяФайлаПрограммы +" -showConnectionDialog=no";
		СтрокаЗапуска = ПутьКПрограмме +" -host="+ СокрЛП(СтруктураНастройки.Адрес)+?(ЗначениеЗаполнено(СтруктураНастройки.Порт)," -port="+Формат(СтруктураНастройки.Порт,"ЧГ=0"),"")+" -password="+СтруктураНастройки.Пароль;
		
	КонецЕсли;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения,СтрокаЗапуска);
	
КонецПроцедуры

Процедура ВыполнитьПодключениеЧерезVNCЗавершениеСохраненияФайлаПрограммы(Существует, ДополнительныеПараметры) Экспорт
	ВыполнитьПодключениеЧерезVNCЗавершениеСозданияФайла(ДополнительныеПараметры);
КонецПроцедуры

Процедура ВыполнитьПодключениеЧерезVNCЗавершениеПроверкиСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	Если Существует = Истина Тогда
		ВыполнитьПодключениеЧерезVNCЗавершениеСозданияФайла(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоWindowsКлиент Тогда
		Если ДополнительныеПараметры.ЭтоUltraVNC Тогда
			ИмяМакета="";
		Иначе
			ИмяМакета="TightVNCJava";
		КонецЕсли;
		
	Иначе
		ИмяМакета="TightVNCJava";
	КонецЕсли;

	
	АдресФайла = ПоместитьВоВременноеХранилище(ЦПР_ПодключенияСервер.ПолучитьДанныеОбщегоМакета(ИмяМакета));
	
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Интерактивно = Ложь;
	
	ФайловаяСистемаКлиент.СохранитьФайл(Новый ОписаниеОповещения("ВыполнитьПодключениеЧерезVNCЗавершениеСохраненияФайлаПрограммы",ЭтотОбъект,ДополнительныеПараметры),АдресФайла, ДополнительныеПараметры.СтруктураНастройки.ИмяФайлаПрограммы,);
КонецПроцедуры

Процедура ВыполнитьПодключениеЧерезVNCЗавершениеПолученияКаталогаВременныхФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Каталог", Результат);
	
	Если ДополнительныеПараметры.ЭтоWindowsКлиент Тогда
		ИмяФайла="TigthtVNC.exe";
	Иначе
		ИмяФайла="TigthtVNC.jar";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры.СтруктураНастройки.ИмяФайлаПрограммы) Тогда
		ДополнительныеПараметры.СтруктураНастройки.ИмяФайлаПрограммы=ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ДополнительныеПараметры.Каталог,ИмяФайла);
	КонецЕсли;
	
	Файл=Новый Файл(ДополнительныеПараметры.СтруктураНастройки.ИмяФайлаПрограммы);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ВыполнитьПодключениеЧерезVNCЗавершениеПроверкиСуществованияФайла",ЭтотОбъект,ДополнительныеПараметры));
КонецПроцедуры

Процедура ВыполнитьПодключениеЧерезVNCЗавершениеПодключенияРасширенияРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	Если Результат<> Истина Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ВыполнитьПодключениеЧерезVNCЗавершениеПолученияКаталогаВременныхФайлов",ЭтотОбъект,ДополнительныеПараметры));
КонецПроцедуры


Процедура ВыполнитьПодключениеЧерезVNC(СтруктураНастройки) 
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СтруктураНастройки", СтруктураНастройки);
	ДопПараметры.Вставить("ЭтоWindowsКлиент", ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент());
	ДопПараметры.Вставить("ЭтоUltraVNC", Ложь);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключениеЧерезVNCЗавершениеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДопПараметры);
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение);

КонецПроцедуры

Процедура ВыполнитьПодключениеЧерезUltraVNC(СтруктураНастройки) 
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СтруктураНастройки", СтруктураНастройки);
	ДопПараметры.Вставить("ЭтоWindowsКлиент", ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент());
	ДопПараметры.Вставить("ЭтоUltraVNC", Истина);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодключениеЧерезVNCЗавершениеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДопПараметры);
	
КонецПроцедуры

Процедура ВыполнитьПодключениеКVPN(СтруктураНастройки) 
	
КонецПроцедуры

Процедура ВыполнитьПодключениеКSSHЗавершениеПодключенияРасширенияДляРаботыСФайлами(Результат, СтруктураНастройки) Экспорт
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		ИмяФайлаПрограммы=ЦПР_ХранениеПодключенийКлиент.ПолучитьИмяВременногоФайлаСохраненияКлиентаPutty();

		СтрокаЗапуска = """"+ИмяФайлаПрограммы +""" -ssh "+СокрЛП(СтруктураНастройки.Адрес)+" -l "+СокрЛП(СтруктураНастройки.Логин)+ ?(ЗначениеЗаполнено(СтруктураНастройки.Порт)," -P "+Формат(СтруктураНастройки.Порт,"ЧГ=0"),"")+ " -pw """+СтруктураНастройки.Пароль+"""";
	Иначе
		
		Если ЦПР_ПодключенияСервер.ПодключатьсяПоSshВLinuxЧерезPutty() Тогда
			ИмяФайлаПрограммы="putty";
			СтрокаЗапуска = ИмяФайлаПрограммы +" -ssh "+СокрЛП(СтруктураНастройки.Адрес)+" -l "+СокрЛП(СтруктураНастройки.Логин)+ ?(ЗначениеЗаполнено(СтруктураНастройки.Порт)," -P "+Формат(СтруктураНастройки.Порт,"ЧГ=0"),"")+ " -pw """+СтруктураНастройки.Пароль+"""";
			
		Иначе
			СтрокаЗапуска= "/usr/bin/x-terminal-emulator -e ""/usr/bin/sshpass -p '" + СтруктураНастройки.Пароль
				+ "' /usr/bin/ssh -o StrictHostKeychecking=no" + ?(ЗначениеЗаполнено(СтруктураНастройки.Порт), " -p " + Формат(
				СтруктураНастройки.Порт, "ЧГ=0"), "") +" "+СокрЛП(СтруктураНастройки.Логин)+"@"+СокрЛП(СтруктураНастройки.Адрес)+ """";
		КонецЕсли;
	КонецЕсли;
	
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения(), СтрокаЗапуска);
	
	Попытка
		//УдалитьФайлы(ИмяФайлаСкрипта);
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ВыполнитьПодключениеКSSH(СтруктураНастройки) 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключениеКSSHЗавершениеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект, СтруктураНастройки);
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОписаниеОповещения,,Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеПодключенияВФайлы

Процедура ВыполнитьСохранение(Подключение,Логин,Пароль) Экспорт 
	СтруктураПараметровПодключения=ЦПР_ПодключенияСервер.ПолучитьСтруктуруНастройкиПодключения(Подключение,Логин,Пароль);
	
	Если СтруктураПараметровПодключения.ТипСтрокой<>"RDP" Тогда
		Сообщить("Для вида подключения "+ СтруктураПараметровПодключения.Вид+" не задана настройка сохранения");
		Возврат;
	КонецЕсли;
	
	ДД=ЦПР_ПодключенияСервер.ПолучитьДвоичныеДанныеФайлаПодключениеКУдаленнымРабочимСтолам(СтруктураПараметровПодключения);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДД, Новый УникальныйИдентификатор);
	
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Диалог.Заголовок				=	"Выберите файл:";
	ПараметрыСохранения.Диалог.МножественныйВыбор		=	Ложь;
	ПараметрыСохранения.Диалог.ПредварительныйПросмотр	=	Ложь;
	ПараметрыСохранения.Диалог.ИндексФильтра			=	0;
	ПараметрыСохранения.Диалог.ПроверятьСуществованиеФайла	=	Истина;
	ПараметрыСохранения.Диалог.Фильтр					=	"Файл удаленного рабочего стола (*.rdp)|*.rdp";
	ПараметрыСохранения.Диалог.Расширение				=	"rdp";
		
	ФайловаяСистемаКлиент.СохранитьФайл(Неопределено,АдресВоВременномХранилище,,ПараметрыСохранения);
КонецПроцедуры


#КонецОбласти