
////////////////////////////////////////////////////////////////////////////////
// УчетВремениКлиент
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

Процедура ПриНачалеРаботыСистемы() Экспорт

	ОбновитьПараметрВедетсяУчетВремени();

КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ, Предупреждения) Экспорт

	Если ПараметрыПриложения["ВедетсяУчетВремени"] = Истина Тогда

		Отказ = Истина;

		НовоеПредупреждение = СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершенииРаботы();
		НовоеПредупреждение.ТекстПредупреждения = "ЗАВЕРШИТЕ УЧЕТ ВРЕМЕНИ ПЕРЕД ЗАВЕРШЕНИЕМ РАБОТЫ!";
		НовоеПредупреждение.ТекстГиперссылки = "Открыть форму управления таймерами";
		НовоеПредупреждение.ДействиеПриНажатииГиперссылки.Форма = "Обработка.УправлениеТаймерамиУчетаВремени.Форма.Форма";
		НовоеПредупреждение.ДействиеПриНажатииГиперссылки.ПрикладнаяФормаПредупреждения = "Обработка.УправлениеТаймерамиУчетаВремени.Форма.Форма";

		Предупреждения.Добавить(НовоеПредупреждение);

	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьПараметрВедетсяУчетВремени() Экспорт

	ПараметрыПриложения.Вставить("ВедетсяУчетВремени", УчетВремениВызовСервера.ВедетсяУчетВремени());

КонецПроцедуры

Процедура ОткрытьПредметТаймера(Ид) Экспорт

	ДанныеТаймера=УчетВремениВызовСервера.ДанныеТаймера(Ид);
	Если ЗначениеЗаполнено(ДанныеТаймера.Предмет) Тогда
		ПоказатьЗначение( , ДанныеТаймера.Предмет);
	КонецЕсли;

КонецПроцедуры

Процедура РеквизитТаймераПриИзменении(Форма, Элемент) Экспорт

	ИмяЭлемента = Элемент.Имя;

	МассивИменаЭлемента=СтрРазделить(ИмяЭлемента, "_");
	МассивИменаЭлемента.Удалить(0);//Префикс

	ИмяРеквизита = МассивИменаЭлемента[0];
	МассивИменаЭлемента.Удалить(0);
	Идентификатор = СтрСоединить(МассивИменаЭлемента, "-");
	ЗначениеРеквизита = Форма[Элемент.Имя];

	ПараметрыУчетаВремени = Новый Структура(ИмяРеквизита, ЗначениеРеквизита);
	УчетВремениВызовСервера.ОтразитьИзменениеТаймераУчетаВремени(Идентификатор, ПараметрыУчетаВремени);

КонецПроцедуры

Процедура ОбработатьКомандуУчетаВремени(Форма, Команда) Экспорт

	ИмяКоманды = Команда.Имя;

	МассивИмениКоманды=СтрРазделить(ИмяКоманды, "_");

	Действие = МассивИмениКоманды[1];
	МассивИмениКоманды.Удалить(0);
	МассивИмениКоманды.Удалить(0);

	Ид = СтрСоединить(МассивИмениКоманды, "-");

	Если Действие = "Отмена" Тогда
		УдалитьТаймер(Форма, Ид);
	ИначеЕсли Действие = "ОткрытьПредмет" Тогда
		ОткрытьПредметТаймера(Ид);
	ИначеЕсли Действие = "Стоп" Тогда
		ОстановитьТаймер(Форма, Ид);
	ИначеЕсли Действие = "Старт" Тогда
		СтартоватьТаймер(Форма, Ид);
	ИначеЕсли Действие="Зафиксировать" Тогда 
		ЗафиксироватьТрудозатратыПоТаймеру(Форма, Ид);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьОтображениеВремениТаймеров(Форма, ГруппаТаймеров) Экспорт
	ПрефиксЭлементов=УчетВремениКлиентСервер.ПрефиксЭлементовФормы();
	Для Каждого Элемент Из ГруппаТаймеров.ПодчиненныеЭлементы Цикл
		ИдентификаторТаймера=УчетВремениКлиентСервер.ИдентификаторТаймераПоИмениГруппыТаймера(Элемент.Имя);
		Ид=СтрЗаменить(ИдентификаторТаймера, "-", "_");

		ДанныеТаймераФормы=УчетВремениКлиентСервер.ДанныеТаймераФормы(Форма, ИдентификаторТаймера);

		ЭлементКомментария=Форма.Элементы.Найти(ПрефиксЭлементов + "Комментарий_" + Ид);
		Если ЗначениеЗаполнено(ЭлементКомментария.ТекстРедактирования) И ЭлементКомментария.ТекстРедактирования
			<> Форма[ПрефиксЭлементов + "Комментарий_" + Ид] Тогда
//			ДанныеТаймераФормы.Комментарий=ЭлементКомментария.ТекстРедактирования;
//			Форма[ПрефиксЭлементов + "Комментарий_" + Ид]=ДанныеТаймераФормы.Комментарий;
//			
//			
//			ПараметрыУчетаВремени = Новый Структура("Комментарий", ДанныеТаймераФормы.Комментарий);
//			УчетВремениВызовСервера.ОтразитьИзменениеТаймераУчетаВремени(ИдентификаторТаймера, ПараметрыУчетаВремени);

			Продолжить;
		КонецЕсли;

		УчетВремениКлиентСервер.ОбновитьОтображениеВремениТаймера(Форма, ДанныеТаймераФормы, Ид);

	КонецЦикла;
КонецПроцедуры

Процедура ПодключитьОбработчикОжиданияОбновлениеОтображенияВремени(Форма) Экспорт
	Форма.ПодключитьОбработчикОжидания("Подключаемый_УчетВремени_ОбновитьПродолжительностьАвтоматически", 60);
КонецПроцедуры

Процедура СоздатьИСтартоватьТаймерПоПредмету(Предмет) Экспорт
	ИдентфикаторТаймера=УчетВремениВызовСервера.СоздатьИСтартоватьТаймер(Предмет);
	ВыполнитьДействияПослеИзмененияСтатусаТаймера(ИдентфикаторТаймера);
КонецПроцедуры

Процедура СоздатьИСтартоватьТаймерИзФормыПредмета(Форма) Экспорт
	Форма.ИдентификаторТаймера=УчетВремениВызовСервера.СоздатьИСтартоватьТаймер(Форма.Объект.Ссылка);
	ВыполнитьДействияПослеИзмененияСтатусаТаймера(Форма.ИдентификаторТаймера);
КонецПроцедуры

Процедура УдалитьТаймер(Форма, Идентификатор) Экспорт
	Если Идентификатор=Неопределено
		Или Не ЗначениеЗаполнено(Идентификатор) Тогда
			Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Ид, Форма", Идентификатор, Форма);
	Оповещение = Новый ОписаниеОповещения("УдалитьТаймерЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ПоказатьВопрос(Оповещение, "Удалить выбранный таймер безвозвратно?", РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

Процедура СтартоватьТаймер(Форма, Идентификатор) Экспорт
	Если Идентификатор=Неопределено
		Или Не ЗначениеЗаполнено(Идентификатор) Тогда
			Возврат;
	КонецЕсли;
	
	Попытка
		ДанныеТаймера=УчетВремениКлиентСервер.ДанныеТаймераФормы(Форма, Идентификатор);
	Исключение
		ДанныеТаймера=УчетВремениВызовСервера.ДанныеТаймера(Идентификатор);
	КонецПопытки;

	Если УчетВремениКлиентСервер.ТаймерАктивен(ДанныеТаймера) Тогда
		Возврат;
	КонецЕсли;

	УчетВремениВызовСервера.СтартоватьТаймер(Идентификатор);
	ВыполнитьДействияПослеИзмененияСтатусаТаймера(Идентификатор);
	
КонецПроцедуры

Процедура ОстановитьТаймер(Форма, Идентификатор) Экспорт
	Если Идентификатор=Неопределено
		Или Не ЗначениеЗаполнено(Идентификатор) Тогда
			Возврат;
	КонецЕсли;
	
	Попытка
		ДанныеТаймера=УчетВремениКлиентСервер.ДанныеТаймераФормы(Форма, Идентификатор);
	Исключение
		ДанныеТаймера=УчетВремениВызовСервера.ДанныеТаймера(Идентификатор);
	КонецПопытки;

	Если Не УчетВремениКлиентСервер.ТаймерАктивен(ДанныеТаймера) Тогда
		Возврат;
	КонецЕсли;

	УчетВремениВызовСервера.ОстановитьТаймер(Идентификатор);
	ВыполнитьДействияПослеИзмененияСтатусаТаймера(Идентификатор);
КонецПроцедуры

Процедура ЗафиксироватьТрудозатратыПоТаймеру(Форма, Идентификатор) Экспорт
	Если Идентификатор=Неопределено
		Или Не ЗначениеЗаполнено(Идентификатор) Тогда
			Возврат;
	КонецЕсли;
	
	Попытка
		ДанныеТаймера=УчетВремениКлиентСервер.ДанныеТаймераФормы(Форма, Идентификатор);
	Исключение
		ДанныеТаймера=УчетВремениВызовСервера.ДанныеТаймера(Идентификатор);
	КонецПопытки;

	Если УчетВремениКлиентСервер.ТаймерАктивен(ДанныеТаймера) Тогда
		УчетВремениВызовСервера.ОстановитьТаймер(Идентификатор);
	КонецЕсли;

	ДанныеТаймера=УчетВремениВызовСервера.ДанныеТаймера(Идентификатор);
	ЗначенияЗаполнения  = Новый Структура("Предмет,Часов,Комментарий,ВидДеятельности");
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, ДанныеТаймера);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения,Идентификатор", ЗначенияЗаполнения, Идентификатор);
	ОткрытьФорму("Документ.Трудозатраты.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
	ВыполнитьДействияПослеИзмененияСтатусаТаймера(Идентификатор);
	
КонецПроцедуры

Процедура ОбработкаОповещенияФормы(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	Если Не Форма.Открыта() Тогда
		Возврат;
	КонецЕсли;

	Если ИмяСобытия = "ЗафиксированыТрудозатратыПоТаймеру" Тогда
		УчетВремениВызовСервера.УдалитьТаймер(Параметр);
		Форма.Подключаемый_УчетВремени_ОбновитьЭлементыТаймеров(Параметр);
	ИначеЕсли ИмяСобытия = "ИзмененТаймер" Тогда
		Форма.Подключаемый_УчетВремени_ОбновитьЭлементыТаймеров(Параметр);
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьКомандуБыстройУстановкиЧасов(Форма, Команда, ПутьКДанным) Экспорт
	// Имя команды формируется по шаблону УстановитьЧасов_1_25 = установить 1.25 ч
	ЧастиИмени = СтрРазделить(Команда.Имя, "_");
	ЧастиИмени.Удалить(0);
	ЧастиИмени.Удалить(0);
	КоличествоЧасовСтрокой = СтрСоединить(ЧастиИмени, ".");
	Часов=СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КоличествоЧасовСтрокой);

	ЧастиПутьКДанным=СтрРазделить(ПутьКДанным, ".");

	Если ЧастиПутьКДанным.Количество() = 1 Тогда
		Форма[ПутьКДанным]=Часов;
	ИначеЕсли ЧастиПутьКДанным.Количество() = 2 Тогда
		Форма[ЧастиПутьКДанным[0]][ЧастиПутьКДанным[1]]=Часов;
	КонецЕсли;
КонецПроцедуры

Процедура ОповеститьОбИзмененииТрудозатрат(Предмет) Экспорт
	Оповестить("ИзменилисьТрудозатраты",Предмет);
КонецПроцедуры

Процедура ОповеститьОбФиксацииТрудозатратПоТаймеру(ИдентификаторТаймера) Экспорт
	Если ИдентификаторТаймера=Неопределено 
		Или Не ЗначениеЗаполнено(ИдентификаторТаймера) Тогда
			
		Возврат;
	КонецЕсли;
	Оповестить("ЗафиксированыТрудозатратыПоТаймеру",ИдентификаторТаймера);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьДействияПослеИзмененияСтатусаТаймера(ИдентификаторТаймера) Экспорт
	Оповестить("ИзмененТаймер",ИдентификаторТаймера);

//	УчетВремениКлиент.ОбновитьПараметрВедетсяУчетВремени();
КонецПроцедуры

Процедура УдалитьТаймерЗавершение(РезультатДиалога, ДополнительныеПараметры) Экспорт
	Если РезультатДиалога = Неопределено Или РезультатДиалога = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Идентификатор = ДополнительныеПараметры.Ид;

	УчетВремениВызовСервера.УдалитьТаймер(Идентификатор);
	ВыполнитьДействияПослеИзмененияСтатусаТаймера(Идентификатор);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти