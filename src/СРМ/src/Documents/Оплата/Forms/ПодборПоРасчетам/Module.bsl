
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Организация = Параметры.Организация;
	
	Контрагент = Параметры.Контрагент;
	Если Контрагент = Неопределено Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	СуммаДокумента = Параметры.СуммаДокумента;
	ДатаДокумента = Параметры.ДатаДокумента;
	АдресПлатежейВХранилище = Параметры.АдресПлатежейВХранилище;
	
	ЗаполнитьТаблицуПоРасчетам();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РассчитатьСуммуПлатежей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ЗаполнитьТаблицуПоРасчетам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковРасчетовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуПлатежей();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокументВыполнить()

	ПоместитьПлатежиВХранилище();
	Закрыть(КодВозвратаДиалога.OK);
	
	Структура = Новый Структура("АдресПлатежейВХранилище", АдресПлатежейВХранилище);
	ОповеститьОВыборе(Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПлатежиВыполнить()

	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		СтрокаТаблицы.Выбран = Истина;
	КонецЦикла;
	РассчитатьСуммуПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьПлатежиВыполнить()

	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		СтрокаТаблицы.Выбран = Ложь
	КонецЦикла;
	РассчитатьСуммуПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыделенныеПлатежи(Команда)
	
	МассивСтрок = Элементы.ТаблицаОстатковРасчетов.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = ТаблицаОстатковРасчетов.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
	РассчитатьСуммуПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВыделенныеПлатежи(Команда)
	
	МассивСтрок = Элементы.ТаблицаОстатковРасчетов.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = ТаблицаОстатковРасчетов.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
	РассчитатьСуммуПлатежей();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковРасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетов.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.RosyBrown);

КонецПроцедуры

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьВидимость()
	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПоместитьПлатежиВХранилище() 
	
	Платежи = ТаблицаОстатковРасчетов.Выгрузить(, "Выбран, Сумма, ДоговорКонтрагента, ТипВзаиморасчета, КБК");
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из Платежи Цикл
		Если Не СтрокаТаблицы.Выбран Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		Платежи.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Если Платежи.Итог("Сумма") < СуммаДокумента Тогда
		СтрокаТаблицы = Платежи.Добавить();
		СтрокаТаблицы.Сумма = СуммаДокумента - Платежи.Итог("Сумма");
	КонецЕсли; 
	
	АдресПлатежейВХранилище = ПоместитьВоВременноеХранилище(Платежи, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПоРасчетам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДоговораСрезПоследних.Договор,
	|	ВЫБОР
	|		КОГДА ДанныеДоговораСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДОговоров.Действующий)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Действующий,
	|	ТипыВзаиморасчетов.Ссылка КАК ТипВзаиморасчета
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрСведений.ДанныеДоговора.СрезПоследних(&Дата, ) КАК ДанныеДоговораСрезПоследних,
	|	Перечисление.ТипыВзаиморасчетов КАК ТипыВзаиморасчетов
	|ГДЕ
	|	ДанныеДоговораСрезПоследних.Организация = &Организация
	|	И ДанныеДоговораСрезПоследних.Контрагент = &Контрагент
	|	И ТипыВзаиморасчетов.Ссылка В(&ТипыВзаиморасчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Договор КАК ДоговорКонтрагента,
	|	ВТ.ТипВзаиморасчета КАК ТипВзаиморасчета,
	|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.КБК, ЗНАЧЕНИЕ(Справочник.КБК.пустаяСсылка)) КАК КБК,
	|	СУММА(ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаОстаток, 0)) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаОстаток > 0
	|				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДолгКонтрагента,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаОстаток < 0
	|				ТОГДА -ВзаиморасчетыСКонтрагентамиОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НашДолг
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|				&Дата,
	|				ДоговорКонтрагента В
	|					(ВЫБРАТЬ
	|						ВТ.Договор
	|					ИЗ
	|						ВТ КАК ВТ)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ПО ВТ.Договор = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
	|			И ВТ.ТипВзаиморасчета = ВзаиморасчетыСКонтрагентамиОстатки.ТипВзаиморасчета
	|ГДЕ
	|	(ВТ.Действующий
	|			ИЛИ ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Договор,
	|	ВТ.ТипВзаиморасчета,
	|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.КБК, ЗНАЧЕНИЕ(Справочник.КБК.пустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорКонтрагента,
	|	ТипВзаиморасчета,
	|	КБК
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Дата", Новый Граница(ДатаДокумента, ВидГраницы.Включая)); // документ должен быть не проведен
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ТипыВзаиморасчета = Новый Массив;
	ТипыВзаиморасчета.Добавить(Перечисления.ТипыВзаиморасчетов.ОсновнойДолг);
	ТипыВзаиморасчета.Добавить(Перечисления.ТипыВзаиморасчетов.Проценты);
	Запрос.УстановитьПараметр("ТипыВзаиморасчета", ТипыВзаиморасчета);
	
	ТаблицаОстатковРасчетов.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если ЗначениеЗаполнено(АдресПлатежейВХранилище) Тогда
		
		РасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище);
		
		ПоляТаблицы = "ДоговорКонтрагента, ТипВзаиморасчета, КБК";
		СтруктураПоиска = Новый Структура(ПоляТаблицы);
		РасшифровкаПлатежа.Свернуть(ПоляТаблицы, "Сумма");
		
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРасшифровки);
			СтрокиОстатков = ТаблицаОстатковРасчетов.НайтиСтроки(СтруктураПоиска);
			Если СтрокиОстатков.Количество() <> 0 Тогда
				 СтрокиОстатков[0].Сумма = СтрокаРасшифровки.Сумма;
				 СтрокиОстатков[0].Выбран = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуПлатежей()
	
	СуммаПлатежей = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		
		Если СтрокаТаблицы.Выбран Тогда
			СуммаПлатежей = СуммаПлатежей + СтрокаТаблицы.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
