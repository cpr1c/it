
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьВидимость();
	Если Объект.ГИСГМП_ВыгруженВГИСГМП Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Объект.ПериодРегистрации = Объект.Дата;
КонецПроцедуры

&НаКлиенте
Процедура ВидНачисленияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ТипДоговораПриИзменении(Элемент)
	УстановитьВидимость();
	УдалитьСтрокиНеСоответствующиеТипу();
КонецПроцедуры

&НаКлиенте
Процедура ГИСГМП_ВыгруженВГИСГМППриИзменении(Элемент)
	Если Объект.ГИСГМП_ВыгруженВГИСГМП Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияАренды

&НаКлиенте
Процедура НачисленияАрендыДоговорПриИзменении(Элемент)
	ТекСтрока = Элементы.НачисленияАренды.ТекущиеДанные;
	ДанныеДоговора = Аренда.ПолучитьСтруктуруДАнныхДоговора(КонецДня(Объект.Дата), ТекСтрока.Договор);
	ЗаполнитьЗначенияСвойств(ТекСтрока, ДанныеДоговора);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияАрендыСуммаПриИзменении(Элемент)
	ТекСтрока = Элементы.НачисленияАренды.ТекущиеДанные;
	ТекСтрока.Всего = Аренда.РассчитатьСуммуВсего(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС);
	ТекСтрока.ГИСГМП_ОсталосьОплатить = ТекСтрока.Всего;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияАрендыСтавкаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.НачисленияАренды.ТекущиеДанные;
	ТекСтрока.Всего = Аренда.РассчитатьСуммуВсего(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС);
	ТекСтрока.ГИСГМП_ОсталосьОплатить = ТекСтрока.Всего;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияАрендыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПередНачаломДобавленияСтрокиТабличнойЧасти("НачисленияАренды", Отказ, Копирование);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияРеализации

&НаКлиенте
Процедура НачисленияРеализацииДоговорПриИзменении(Элемент)
	ТекСтрока = Элементы.НачисленияРеализации.ТекущиеДанные;
	ДанныеДоговора = Аренда.ПолучитьСтруктуруДАнныхДоговора(КонецДня(Объект.Дата), ТекСтрока.Договор);
	ЗаполнитьЗначенияСвойств(ТекСтрока, ДанныеДоговора);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРеализацииСтавкаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.НачисленияРеализации.ТекущиеДанные;
	ТекСтрока.Всего = Аренда.РассчитатьСуммуВсего(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС);
	ТекСтрока.ГИСГМП_ОсталосьОплатить = ТекСтрока.Всего;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРеализацииСуммаПриИзменении(Элемент)
	ТекСтрока = Элементы.НачисленияРеализации.ТекущиеДанные;
	ТекСтрока.Всего = Аренда.РассчитатьСуммуВсего(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС);
	ТекСтрока.ГИСГМП_ОсталосьОплатить = ТекСтрока.Всего;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРеализацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПередНачаломДобавленияСтрокиТабличнойЧасти("НачисленияРеализации", Отказ, Копирование);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияПеней

&НаКлиенте
Процедура НачисленияПенейДоговорПриИзменении(Элемент)
	ТекСтрока = Элементы.НачисленияПеней.ТекущиеДанные;
	ДанныеДоговора = Аренда.ПолучитьСтруктуруДАнныхДоговора(КонецДня(Объект.Дата), ТекСтрока.Договор);
	ЗаполнитьЗначенияСвойств(ТекСтрока, ДанныеДоговора);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПенейСуммаПриИзменении(Элемент)
	ТекСтрока = Элементы.НачисленияПеней.ТекущиеДанные;
	ТекСтрока.Всего = Аренда.РассчитатьСуммуВсего(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС);
	ТекСтрока.ГИСГМП_ОсталосьОплатить = ТекСтрока.Всего;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПенейСтавкаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.НачисленияПеней.ТекущиеДанные;
	ТекСтрока.Всего = Аренда.РассчитатьСуммуВсего(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС);
	ТекСтрока.ГИСГМП_ОсталосьОплатить = ТекСтрока.Всего;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПенейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПередНачаломДобавленияСтрокиТабличнойЧасти("НачисленияПеней", Отказ, Копирование);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Рассчитать(Команда)
	РассчитатьНачисления("НачисленияАренды");
	РассчитатьНачисления("НачисленияРеализации");
	РассчитатьНачисления("НачисленияПеней");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАренду(Команда)
	ЗаполнитьПоДаннымДоговоров("НачисленияАренды",Объект.ТипДоговора);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьАренду(Команда)
	РассчитатьНачисления("НачисленияАренды");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеализацию(Команда)
	ЗаполнитьПоДаннымДоговоров("НачисленияРеализации",Объект.ТипДоговора);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРеализацию(Команда)
	РассчитатьНачисления("НачисленияРеализации");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПени(Команда)
	ЗаполнитьПоДаннымДоговоров("НачисленияПеней");
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПени(Команда)
	РассчитатьНачисления("НачисленияПеней");
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтроки(Команда)
	
	Модифицированность = Истина;
	
	УдалитьПустыеСтрокиТЧ("НачисленияАренды");
	УдалитьПустыеСтрокиТЧ("НачисленияРеализации");
	УдалитьПустыеСтрокиТЧ("НачисленияПеней");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВыделенныеСтроки(Команда)
	
	Если объект.ВидНачисления = ПредопределенноеЗначение("Перечисление.ТипыВзаиморасчетов.Пени") Тогда
		РассчитатьНачисления("НачисленияПеней", Элементы.НачисленияПеней.ВыделенныеСтроки);
	ИначеЕсли Объект.ТипДоговора=ПредопределенноеЗначение("Перечисление.ТипыДоговоров.Реализация") Тогда
		РассчитатьНачисления("НачисленияРеализации", Элементы.НачисленияРеализации.ВыделенныеСтроки);
	Иначе
		РассчитатьНачисления("НачисленияАренды", Элементы.НачисленияАренды.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмениьПринятиеВГИСГМП(Команда)
	
	Объект.ГИСГМП_ВыгруженВГИСГМП = Ложь;
	Объект.ГИСГМП_ПринятВГИСГМП = Ложь;
	ЭтаФорма.ТолькоПросмотр = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГИСГМП_ПринятВГИСГМП(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(,"Перед установкой признака ""Принят в ГИС ГМП"" документ нужно записать");
		Возврат;
	КонецЕсли;
	
	Если УстановитьПометкуПринятВГИСГМПНаСервере() Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусАренда(Команда)
	УстановитьСтатусПлательщикаПоУмолчанию("НачисленияАренды");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусРеализация(Команда)
	УстановитьСтатусПлательщикаПоУмолчанию("НачисленияРеализации");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПени(Команда)
	УстановитьСтатусПлательщикаПоУмолчанию("НачисленияПеней");
КонецПроцедуры



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимость()
	Если объект.ВидНачисления=Перечисления.ТипыВзаиморасчетов.Пени Тогда
		Элементы.ПанельНачисления.ТекущаяСтраница=Элементы.НачисленияПени;
	ИначеЕсли Объект.ТипДоговора=Перечисления.ТипыДоговоров.Реализация Тогда
		Элементы.ПанельНачисления.ТекущаяСтраница=Элементы.НачисленияРеализация;
	Иначе
		Элементы.ПанельНачисления.ТекущаяСтраница=Элементы.НачисленияАренда;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиНеСоответствующиеТипу()
	
	Если объект.ВидНачисления=Перечисления.ТипыВзаиморасчетов.Пени Тогда
		ИмяТЧ = "НачисленияПеней";
	ИначеЕсли Объект.ТипДоговора=Перечисления.ТипыДоговоров.Реализация Тогда
		ИмяТЧ = "НачисленияРеализации";
	Иначе
		ИмяТЧ = "НачисленияАренды";
	КонецЕсли;
	
	СтрокиНаУдаление = Новый Массив;
	
	СтруктураОтбора = Новый Структура("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтрокиСПустымДоговором = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Стр Из СтрокиСПустымДоговором Цикл
		Объект[ИмяТЧ].Удалить(Стр);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымДоговоров(ИмяТабличнойЧасти,ТипДоговора=Неопределено) Экспорт

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен И Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
		Сообщить("Не удалось отменить проведение документа. Расчет не выполнен.");
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	СписокДоговороПоДопФильтрам.Очистить();
	
	Если Объект.ИспользоватьДополнительныеФильтры Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВидДоговора", Объект.Вид);
		ПараметрыФормы.Вставить("ВидНачисления", Объект.ВидНачисления);
		ПараметрыФормы.Вставить("Периодичность", Объект.Периодичность);
		ПараметрыФормы.Вставить("ТипДоговора", Объект.ТипДоговора);
		ПараметрыФормы.Вставить("ДатаСреза", КонецМесяца(Объект.Дата));
		
		ПараметрыФормы.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
		ПараметрыФормы.Вставить("ТипДоговора", ТипДоговора);
		
		ДопПараметрыОповещения = Новый Структура("ИмяТабличнойЧасти, ТипДоговора", ИмяТабличнойЧасти, ТипДоговора);
		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьСписокДоговоровСДопФильтрамиЗавершение", ЭтотОбъект, ДопПараметрыОповещения);
		ОткрытьФорму("Обработка._ГК_ФормированиеСпискаДоговоров.Форма.Форма", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе	
		ЗаполнитьПоДаннымДоговоровНаСервере(ИмяТабличнойЧасти, ТипДоговора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымДоговоровНаСервере(ИмяТабличнойЧасти,ТипДоговора=Неопределено) Экспорт
	
	Если не ЗначениеЗаполнено(Объект.ВидНачисления) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидНачисления<>Перечисления.ТипыВзаиморасчетов.Пени и ВРег(ИмяТабличнойЧасти)="НАЧИСЛЕНИЯПЕНЕЙ" Тогда
		Возврат;
	КонецЕсли;
	
	ТЧ=Объект[ИмяТабличнойЧасти];
	ТЧ.Очистить();
		
	
	Запрос=Новый запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ДанныеДоговораСрезПоследних.Договор КАК Договор,
	|	ДанныеДоговораСрезПоследних.Вид,
	|	ДанныеДоговораСрезПоследних.Назначение,
	|	ДанныеДоговораСрезПоследних.ВидДеятельности,
	|	ДанныеДоговораСрезПоследних.ДатаНачала,
	|	ДанныеДоговораСрезПоследних.ДатаКонца,
	|	ДанныеДоговораСрезПоследних.Контрагент,
	|	ДанныеДоговораСрезПоследних.Организация,
	|	ДанныеДоговораСрезПоследних.Периодичность,
	|	ДанныеДоговораСрезПоследних.СтавкаНДС,
	|	ДанныеДоговораСрезПоследних.Льгота,
	|	ДанныеДоговораСрезПоследних.СрокЛьготы,
	|	ДанныеДоговораСрезПоследних.ДопПлатеж,
	|	ДанныеДоговораСрезПоследних.СрокДопПлатежа,
	|	ДанныеДоговораСрезПоследних.Район,
	|	ДанныеДоговораСрезПоследних.КБК,
	|	ДанныеДоговораСрезПоследних.Ставка,
	|	ДанныеДоговораСрезПоследних.Пени,
	|	ДанныеДоговораСрезПоследних.НомерДоговора,
	|	ДанныеДоговораСрезПоследних.Статус
	|ИЗ
	|	РегистрСведений.ДанныеДоговора.СрезПоследних(
	|			&Период,
	|			ВЫБОР
	|				КОГДА &ИспользоватьДопФильтры
	|					ТОГДА Договор В (&СписокДоговоров)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ) КАК ДанныеДоговораСрезПоследних
	|ГДЕ
	|	ДанныеДоговораСрезПоследних.ДатаНачала <= &ДатаСреза
	|	И ДанныеДоговораСрезПоследних.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыДоговоров.действующий)";

	Если ЗначениеЗаполнено(ТипДоговора) Тогда
		Запрос.Текст=Запрос.Текст+"
		|	И ДанныеДоговораСрезПоследних.Договор.ТипДоговора = &ТипДоговора";
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Периодичность) тогда
		запрос.Текст=Запрос.Текст+"
		|	И ДанныеДоговораСрезПоследних.Периодичность = &Периодичность";
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Вид) тогда
		запрос.Текст=Запрос.Текст+"
		|	И ДанныеДоговораСрезПоследних.Вид = &Вид";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|Договор
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаСреза",КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецМесяца(Объект.Дата), ВидГраницы.Включая));	
	Запрос.УстановитьПараметр("ТипДоговора",ТипДоговора);
	Запрос.УстановитьПараметр("Периодичность",Объект.Периодичность);
	Запрос.УстановитьПараметр("Вид",Объект.Вид);
	Запрос.УстановитьПараметр("ИспользоватьДопФильтры",Объект.ИспользоватьДополнительныеФильтры);
	Запрос.УстановитьПараметр("СписокДоговоров",СписокДоговороПоДопФильтрам);
		
	Выборка =Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// 06.08.2019 ****** ГК (12931) (начало)
		Если Объект.ВидНачисления = Перечисления.ТипыВзаиморасчетов.ОсновнойДолг
			И (Выборка.Договор.ТипДоговора = Перечисления.ТипыДоговоров.Реализация
				ИЛИ Выборка.Договор.ТипДоговора = Перечисления.ТипыДоговоров.РеализацияЗемли)
			И КонецДня(Выборка.ДатаКонца) < Объект.Дата Тогда
			
			Продолжить;
			
		КонецЕсли;		
		// 06.08.2019 ****** ГК (12931) (окончание)
		
		новаяСтрока =ТЧ.Добавить();
		НоваяСтрока.Периодичность=Выборка.Периодичность;
		НоваяСтрока.Контрагент=Выборка.Контрагент;
		//НоваяСтрока.Организация=Выборка.Организация;
		НоваяСтрока.Договор=Выборка.Договор;
		НоваяСтрока.КБК=Выборка.КБК;
		НоваяСтрока.СтавкаНДС=Выборка.СтавкаНДС;
		//НоваяСтрока.ВидРасчета=Выборка.ВидРасчета;
	КОнецЦикла;
	
	РассчитатьНачисления(ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНачисления(ТЧ, Знач ВыделенныеСтрокиТЧ = Неопределено) Экспорт
	
	Если Объект.Проведен И Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
		Сообщить("Не удалось отменить проведение документа. Расчет не выполнен.");
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ВыделенныеСтрокиТЧ <> Неопределено Тогда
		Для Каждого ИндексСтроки ИЗ ВыделенныеСтрокиТЧ Цикл
			Аренда.РассчитатьСтрокуНачисления(Объект[ТЧ].НайтиПоИдентификатору(ИндексСтроки),Объект);
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТЧ ИЗ Объект[ТЧ] Цикл
			Аренда.РассчитатьСтрокуНачисления(СтрокаТЧ,Объект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтрокиТЧ(ИмяТЧ)
	
	СтруктураОтбора = Новый Структура("Сумма", 0);
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
	Для Каждого Стр Из НайденныеСтроки Цикл
		Объект[ИмяТЧ].Удалить(Стр);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокДоговоровСДопФильтрамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Если Результат <> Неопределено Тогда
		СписокДоговороПоДопФильтрам = Результат;
		ЗаполнитьПоДаннымДоговоровНаСервере(ДополнительныеПараметры.ИмяТабличнойЧасти, ДополнительныеПараметры.ТипДоговора);
	КонецЕсли;
    
КонецПроцедуры

&НаСервере
Функция УстановитьПометкуПринятВГИСГМПНаСервере()
	Возврат РеквизитФормыВЗначение("Объект").УстановитьПометкуПринятВГИСГМП();		
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусПлательщикаПоУмолчанию(ИмяТабЧасти)
	
	СтатусПоУмолчанию = "01";
	
	Для Каждого Стр Из Объект[ИмяТабЧасти] Цикл
		Стр.СтатусПлательщика = СтатусПоУмолчанию;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломДобавленияСтрокиТабличнойЧасти(ИмяТабличнойЧасти, Отказ, Копирование)
	
	Если Копирование Тогда
		Отказ = Истина;
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элементы[ИмяТабличнойЧасти].ТекущиеДанные, ,"ГИСГМП_ИдентификаторСтроки");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти






