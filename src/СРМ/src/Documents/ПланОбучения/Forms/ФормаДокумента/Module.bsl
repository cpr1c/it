#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлан

&НаКлиенте
Процедура ПланПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Элементы.План.ТекущиеДанные.Задача) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПланЗадача" Тогда
		ПоказатьЗначение(,Элементы.План.ТекущиеДанные.Задача);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоКурсу(Команда)
	ЗаполнитьПоКурсуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗадачи(Команда)
	
	Если ЗадачиСформированы() Тогда
		ПоказатьПредупреждение(,"Задачи уже сформированы, повторное формирование не предусмотрено");
		Возврат;
	КонецЕсли;
	
	Если Модифицированность ИЛИ Не Объект.Проведен Тогда
		ПоказатьПредупреждение(,"Перед формированием задач нужно провести документ");
		Возврат;
	КонецЕсли;
	
	СформироватьЗадачиНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПоКурсуНаСервере()
	
	Объект.План.Очистить();
	
	Если Не ЗначениеЗаполнено(ПлановыеТрудозатратыВДень) Тогда
		ПлановыеТрудозатратыВДень = 2;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РабочихДнейВНеделе) Тогда
		РабочихДнейВНеделе = 5;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПроцентЭффективности) Тогда
		ПроцентЭффективности = 100;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыПлан.Тема КАК Тема,
	|	КурсыПлан.Длительность КАК Длительность
	|ИЗ
	|	Справочник.Курсы.План КАК КурсыПлан
	|ГДЕ
	|	КурсыПлан.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КурсыПлан.НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", Объект.Курс);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ДатаПлан = Объект.ДатаНачала;
	Иначе
		ДатаПлан = УчетВремениКлиентСервер.ДобавитьДень(НачалоДня(ТекущаяДатаСеанса()), 1);
	КонецЕсли;
	
	ПропуститьВыходные(ДатаПлан);
	
	ДоступноЧасов = ПлановыеТрудозатратыВДень;
	
	Пока Выборка.Следующий() Цикл
		
		ОсталосьРаспределить = Окр(Выборка.Длительность * 100 / ПроцентЭффективности, 2);
		
		Пока ОсталосьРаспределить > 0 Цикл
			
			Длительность = Мин(ОсталосьРаспределить, ДоступноЧасов);
			
			СтрокаПлана = Объект.План.Добавить();
		    СтрокаПлана.Дата = ДатаПлан;
			СтрокаПлана.Тема = Выборка.Тема;
			СтрокаПлана.Длительность = Длительность;
			
			ОсталосьРаспределить = ОсталосьРаспределить - Длительность;
			ДоступноЧасов = ДоступноЧасов - Длительность;
			
			Если ДоступноЧасов = 0 Тогда
				ДоступноЧасов = ПлановыеТрудозатратыВДень;
				ДатаПлан = УчетВремениКлиентСервер.ДобавитьДень(ДатаПлан, 1);
				ПропуститьВыходные(ДатаПлан);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПропуститьВыходные(ДатаПлан)
	
	ДеньНеделиДаты = ДеньНедели(ДатаПлан);
	Если ДеньНеделиДаты > РабочихДнейВНеделе Тогда
		ДобавитьДней = 8 - ДеньНеделиДаты;
		ДатаПлан = УчетВремениКлиентСервер.ДобавитьДень(ДатаПлан, ДобавитьДней);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗадачиСформированы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПланОбученияПлан.Задача.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Задача КАК ДокЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланОбучения.План КАК ПланОбученияПлан
	|		ПО (ПланОбученияПлан.Задача.Ссылка = ПланОбученияПлан.Задача)
	|ГДЕ
	|	НЕ ПланОбученияПлан.Задача.ПометкаУдаления
	|	И ПланОбученияПлан.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

&НаСервере
Функция СформироватьЗадачиНаСервере()
	
	СтруктураЗадачи = Новый Структура;
	СтруктураЗадачи.Вставить("Исполнитель", Объект.Пользователь);
	СтруктураЗадачи.Вставить("Проект", Объект.Проект);
	
	НачатьТранзакцию();
	
	Для Каждого Стр Из Объект.План Цикл
		
		РеквизитыУрока = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Стр.Урок, "Размещение,Описание");
		
		СтруктураЗадачи.Вставить("Основание", Стр.Урок);
		СтруктураЗадачи.Вставить("ОценкаТрудозатрат", Стр.Длительность);
		СтруктураЗадачи.Вставить("ОценкаТрудозатратИсполнителя", УправлениеЗадачамиКлиентСервер.ОценкаПоРядуФибоначчи(Стр.Длительность));
		СтруктураЗадачи.Вставить("СрокИсполнения", Стр.Дата);
		СтруктураЗадачи.Вставить("Тема", СтрШаблон("Изучить: %1 (Курс: %2)", Стр.Урок, Объект.Курс));
		
		СодержаниеЗадачи = "";
		Если ЗначениеЗаполнено(РеквизитыУрока.Описание) Тогда
			СодержаниеЗадачи = СодержаниеЗадачи + РеквизитыУрока.Описание + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыУрока.Размещение) Тогда
			СодержаниеЗадачи = СодержаниеЗадачи + СтрШаблон("Размещение: %1", РеквизитыУрока.Размещение);
		КонецЕсли;
		СтруктураЗадачи.Вставить("Содержание", СодержаниеЗадачи);
		
		НоваяЗадача = Документы.Задача.СоздатьДокумент();
		НоваяЗадача.Заполнить(СтруктураЗадачи);
		НоваяЗадача.Записать(РежимЗаписиДокумента.Проведение);
		
		Стр.Задача = НоваяЗадача.Ссылка;
		
	КонецЦикла;
	
	Записать();
	
	ЗафиксироватьТранзакцию();
	
	Прочитать();

КонецФункции

#КонецОбласти
