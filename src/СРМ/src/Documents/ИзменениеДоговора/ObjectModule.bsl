////////////////////////////////////////////////////////////////////////////////
//ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция РассчитатьСуммуДоговора() Экспорт
	возврат 0;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОбновитьРеквизитДоговор()
	
	НовыйЭл=Договор.ПолучитьОбъект();
	
	НовыйЭл.Наименование=СокрЛП(НомерДоговора);
	НовыйЭл.Комментарий=Комментарий;
	НовыйЭл.ТипДоговора=ТипДоговора;
	НовыйЭл.ВалютаРасчетов=Валюта;
	НовыйЭл.Долгосрочный = Долгосрочный;
	НовыйЭл.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая реквизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения,  Отказ);
	
	Движение=Движения.ДанныеДоговора.Добавить();
	Движение.Договор=Договор;
	Движение.Период=Дата;
	Движение.Вид=Вид;
	Движение.ВидДеятельности=ВидДеятельности;
	Движение.ДатаКонца=ДатаКонца;
	Движение.ДатаНачала=ДатаНачала;
	Движение.ДопПлатеж=ДопПлатеж;
	Движение.КБК=КБК;
	Движение.Контрагент=Контрагент;
	Движение.Льгота=Льгота;
	Движение.Назначение=Назначение;
	Движение.НомерДоговора=НомерДоговора;
	Движение.Организация=Организация;
	Движение.Пени=Пени;
	Движение.Периодичность=Периодичность;
	Движение.Район=Район;
	Движение.Площадь = Площадь;
	Движение.СрокДопПлатежа=СрокДопПлатежа;
	Движение.ДатаОбъявления=ДатаОбъявления;
	Движение.СрокЛьготы=СрокЛьготы;
	Движение.Ставка=Ставка;
	Движение.СтавкаНДС=СтавкаНДС;
	Движение.Статус= статус;
	Движение.Адрес			=Адрес;
	Движение.ДанныеАдреса			=ДанныеАдреса;
	Движение.Балансодержатель			=Балансодержатель;
	Движение.ДатаРегистрации			=ДатаРегистрации;
	Движение.ДатаПодписания				=ДатаПодписания;
	Движение.ОбъектАренды = ОбъектАренды;
	
	Если Долгосрочный Тогда
		
		ДнейВМесяце = Аренда.РазностьДатВДнях(НачалоМесяца(ДатаНачала), ДатаНачала);
		ДнейВМесяцеВсего = Аренда.РазностьДатВДнях(НачалоМесяца(ДатаНачала), КонецМесяца(ДатаНачала))+1;
		ДоляСтарогоГрафика = ДнейВМесяце / ДнейВМесяцеВсего;
		
		// обнулим остатки по прошлым графикам
		ОстаткиПредыдущегоГрафика = Аренда.ОстаткиПоПредыдущимГрафикамОплаты(Договор, МоментВремени(), ДатаНачала);
		
		Для Каждого Стр Из ОстаткиПредыдущегоГрафика Цикл
			
			НоваяЗапись = Движения.ГК_РасчетыПоГрафикуПлатежей.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Стр);
			
			НоваяЗапись.Период = Дата;
			НоваяЗапись.Сторно = Истина;
			НоваяЗапись.СуммаОсновнойДолг = - НоваяЗапись.СуммаОсновнойДолг;
			НоваяЗапись.СуммаПроценты = - НоваяЗапись.СуммаПроценты;
			НоваяЗапись.СуммаВсего = - НоваяЗапись.СуммаВсего;
			
			// сумму до изменения возьмен из старого графика
			Если ДоляСтарогоГрафика <> 0 И НачалоМесяца(ДатаНачала) = НоваяЗапись.Месяц Тогда
				
				НоваяЗапись = Движения.ГК_РасчетыПоГрафикуПлатежей.ДобавитьПриход();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Стр);
				
				НоваяЗапись.Период = Дата;
				НоваяЗапись.СуммаОсновнойДолг = ДоляСтарогоГрафика * НоваяЗапись.СуммаОсновнойДолг;
				НоваяЗапись.СуммаПроценты = ДоляСтарогоГрафика * НоваяЗапись.СуммаПроценты;
				НоваяЗапись.СуммаВсего = ДоляСтарогоГрафика * НоваяЗапись.СуммаВсего;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// создадим новые записи по текущему графику
		Для Каждого Стр Из График Цикл
			
			НоваяЗапись = Движения.ГК_РасчетыПоГрафикуПлатежей.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Стр);
			
			НоваяЗапись.Период = Дата;
			НоваяЗапись.Договор = Договор;
			НоваяЗапись.КБК = КБК;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)   
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	ОбновитьРеквизитДоговор();
	
	Если Долгосрочный Тогда
		Если График.Количество() = 0 Тогда
			Аренда.ЗаполнитьГрафикПлатежей(ЭтотОбъект);
		КонецЕсли;
	Иначе
		График.Очистить();
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Движения по документу
	Если Не Отказ Тогда
		
		Движения.ДанныеДоговора.Очистить();
		Движения.ДанныеДоговора.Записывать=Истина;
		
		Движения.ГК_РасчетыПоГрафикуПлатежей.Очистить();
		Движения.ГК_РасчетыПоГрафикуПлатежей.Записывать = Истина;
		
		ДвиженияПоРегистрам(РежимПроведения,  Отказ);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Договор") Тогда
		Договор = ДанныеЗаполнения.Договор;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	График.Очистить();
КонецПроцедуры

