#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

#Область ФормированиеОтчета

Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("Контрагент",     ПараметрыОтчета.Контрагент);
	ДанныеОтчета.Вставить("ОписаниеОшибки", "");
	ДанныеОтчета.Вставить("ОжиданиеОтвета", Ложь);
	
	ЭтоЮридическоеЛицо = СтрДлина(ПараметрыОтчета.ИНН) = 10;
	Если ЭтоЮридическоеЛицо Тогда
		ИнформацияОСвязях = ДанныеЕдиныхГосРеестров.ИнформацияОСвязяхЮридическогоЛицаПоИНН(ПараметрыОтчета.ИНН);
	Иначе
		ИнформацияОСвязях = ДанныеЕдиныхГосРеестров.ИнформацияОСвязяхПредпринимателяПоИНН(ПараметрыОтчета.ИНН);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ИнформацияОСвязях.ОписаниеОшибки) Тогда
		ДанныеОтчета.ОписаниеОшибки = ИнформацияОСвязях.ОписаниеОшибки;
		ПоместитьВоВременноеХранилище(ДанныеОтчета, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ИнформацияОПроверках = ДанныеЕдиныхГосРеестров.ИнформацияОПроверкахКонтролирующимиОрганамиПоИНН(
		ПараметрыОтчета.ИНН, Истина, Истина, Истина, Ложь);
	
	Если ЗначениеЗаполнено(ИнформацияОПроверках.ОписаниеОшибки) Тогда
		ДанныеОтчета.ОписаниеОшибки = ИнформацияОПроверках.ОписаниеОшибки;
		ПоместитьВоВременноеХранилище(ДанныеОтчета, АдресХранилища);
		Возврат;
	ИначеЕсли ИнформацияОСвязях.ОжиданиеОтвета ИЛИ ИнформацияОПроверках.ОжиданиеОтвета Тогда
		ДанныеОтчета.ОжиданиеОтвета = Истина;
		ПоместитьВоВременноеХранилище(ДанныеОтчета, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ДанныеОтчета.Вставить("ЭтоЮридическоеЛицо",      ЭтоЮридическоеЛицо);
	ДанныеОтчета.Вставить("НайденныйИНН",            ИнформацияОСвязях.ИНН);
	ДанныеОтчета.Вставить("НаименованиеКонтрагента", ИнформацияОСвязях.НаименованиеСокращенное);
	ДанныеОтчета.Вставить("ОбластиРасшифровки",      НоваяТаблицаОбластиРасшифровки());
	
	ИнформацияОПроверках.Вставить("НаименованиеСокращенное", ИнформацияОСвязях.НаименованиеСокращенное);
	
	// Подготовка данных
	
	ПолучитьСостояниеКонтрагентаПоДаннымЕГРН(ИнформацияОСвязях);
	
	Если ИнформацияОСвязях.Свойство("ВидыДеятельности") Тогда
		РаботаСКонтрагентамиПереопределяемый.ЗаполнитьНаименованияВидовДеятельностиКонтрагента(
			ИнформацияОСвязях.ВидыДеятельности);
	КонецЕсли;
	
	ОписаниеДанныхПрограммы = НоваяТаблицаОписаниеДанныхПрограммы();
	РаботаСКонтрагентамиПереопределяемый.ЗаполнитьОписаниеДанныхПрограммы(ОписаниеДанныхПрограммы);
	
	ИнформацияОСвязях.Вставить("ДанныеПрограммы", Новый Структура);
	РаботаСКонтрагентамиПереопределяемый.ДополнитьИнформациюДаннымиПрограммы(ИнформацияОСвязях, ДанныеОтчета.Контрагент);
	
	Если ЭтоЮридическоеЛицо Тогда
	
		ПодготовитьДанныеБухгалтерскойОтчетности(ИнформацияОСвязях);
		ПодготовитьДанныеАнализаОтчетности(ИнформацияОСвязях);
		ПодготовитьДанныеФинансовогоАнализа(ИнформацияОСвязях);
		
	КонецЕсли;
	
	// Вывод данных в отчет
	
	Если ЭтоЮридическоеЛицо Тогда
		СформироватьРезультатГлавное(ИнформацияОСвязях, ИнформацияОПроверках, ДанныеОтчета);
	КонецЕсли;
	
	СформироватьРезультатДанныеГосРеестров(ИнформацияОСвязях, ДанныеОтчета);
	
	СформироватьРезультатДанныеПрограммы(ИнформацияОСвязях, ДанныеОтчета, ОписаниеДанныхПрограммы);
	
	Если ЭтоЮридическоеЛицо Тогда
		
		СформироватьРезультатБухгалтерскаяОтчетность(ИнформацияОСвязях, ДанныеОтчета);
		СформироватьРезультатАнализОтчетности(ИнформацияОСвязях, ДанныеОтчета);
		СформироватьРезультатФинансовыйАнализ(ИнформацияОСвязях, ДанныеОтчета);
		
	КонецЕсли;
	
	СформироватьРезультатПроверкиКонтролирующимиОрганами(ИнформацияОПроверках, ДанныеОтчета);
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, АдресХранилища);
	
КонецПроцедуры 

#КонецОбласти

#Область Главное

Процедура СформироватьРезультатГлавное(ИнформацияОСвязях, ИнформацияОПроверках, ДанныеОтчета)

	Если НЕ ДанныеОтчета.ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	ОбластиРасшифровки = НоваяТаблицаОбластиРасшифровки();
	ОбластиМакета      = ВсеОбластиМакета("Главное");
	ТабличныйДокумент.Вывести(ОбластиМакета.Шапка);
	
	// ЕГРЮЛ
	
	// Реквизиты
	ОбластиМакета.ЕГРЮЛ.Параметры.НаименованиеСокращенное = ИнформацияОСвязях.НаименованиеСокращенное;
	ОбластиМакета.ЕГРЮЛ.Параметры.ИНН = ИнформацияОСвязях.ИНН;
	ОбластиМакета.ЕГРЮЛ.Параметры.КПП = ИнформацияОСвязях.КПП;
	ОбластиМакета.ЕГРЮЛ.Параметры.ДатаРегистрации = Формат(ИнформацияОСвязях.ДатаРегистрации, "ДЛФ=D");
	Если ИнформацияОСвязях.КодСтатуса <> Неопределено Тогда
		Если ИнформацияОСвязях.КодСтатуса = "001" Тогда
			ОбластиМакета.ЕГРЮЛ.Параметры.ДействующаяОрганизация = НСтр("ru='Действующая организация (по данным ЕГРЮЛ)'");
			ОбластиМакета.ЕГРЮЛ.Область(3, 3, 3, 3).ЦветТекста = ЦветаСтиля.ДосьеХорошаяОценкаЦвет;
		Иначе
			ОбластиМакета.ЕГРЮЛ.Параметры.ДействующаяОрганизация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 (по данным ЕГРЮЛ)'"),
				ИнформацияОСвязях.НаименованиеСтатуса);
			ОбластиМакета.ЕГРЮЛ.Область(3, 3, 3, 3).ЦветТекста = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
		КонецЕсли;
	КонецЕсли;
	
	// Адрес
	ОбластиМакета.ЕГРЮЛ.Параметры.ЮридическийАдрес = ИнформацияОСвязях.ЮридическийАдрес.Представление;
	КоличествоОрганизаций = ИнформацияОСвязях.ОрганизацииПоАдресу.Количество();
	Если КоличествоОрганизаций > 0 Тогда
		ОрганизацииПоЭтомуАдресу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='По этому адресу %1 еще %2'"),
			?(КоличествоОрганизаций % 10 = 1 И НЕ КоличествоОрганизаций % 100 = 11, 
				НСтр("ru='зарегистрирована'"),
				НСтр("ru='зарегистрированы'")),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоОрганизаций, "организация,организации,организаций"));
		ОбластиМакета.ЕГРЮЛ.Параметры.ОрганизацииПоЭтомуАдресу = ОрганизацииПоЭтомуАдресу;
	КонецЕсли;
	
	// Руководитель
	Если ЗначениеЗаполнено(ИнформацияОСвязях.Руководитель) Тогда
		Руководитель = ИнформацияОСвязях.Руководитель.Представление;
		Если ЗначениеЗаполнено(ИнформацияОСвязях.Руководитель.Должность) Тогда
			Если ЗначениеЗаполнено(ИнформацияОСвязях.Руководитель.ДатаЗаписи) Тогда
				Руководитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1, %2 с %3'"),
					Руководитель,
					ИнформацияОСвязях.Руководитель.Должность,
					Формат(ИнформацияОСвязях.Руководитель.ДатаЗаписи, "ДЛФ=D"));
			Иначе
				Руководитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1, %2'"),
					Руководитель,
					ИнформацияОСвязях.Руководитель.Должность);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Руководитель = "-";
	КонецЕсли;
	ОбластиМакета.ЕГРЮЛ.Параметры.Руководитель = Руководитель;
	КоличествоОрганизацийГдеРуководитель = ИнформацияОСвязях.ОрганизацииГдеРуководитель.Количество();
	КоличествоОрганизацийГдеУчредитель   = ИнформацияОСвязях.ОрганизацииГдеУчредитель.Количество();
	Если КоличествоОрганизацийГдеРуководитель > 0 Тогда
		ТекстРуководитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Руководитель еще в %1'"),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоОрганизацийГдеРуководитель, "организации,организациях,организациях"));
	Иначе
		ТекстРуководитель = "";
	КонецЕсли;
	Если КоличествоОрганизацийГдеУчредитель > 0 Тогда
		ВыводитьЕще = (ЗначениеЗаполнено(ИнформацияОСвязях.Руководитель.ИНН)
			И ИнформацияОСвязях.Учредители.Найти(ИнформацияОСвязях.Руководитель.ИНН, "ИНН") <> Неопределено)
			ИЛИ (НЕ ЗначениеЗаполнено(ИнформацияОСвязях.Руководитель.ИНН)
			И ИнформацияОСвязях.Учредители.Найти(ИнформацияОСвязях.Руководитель.Представление, "Учредитель") <> Неопределено);
		Если ВыводитьЕще Тогда
			СтрокаПодстановки = ?(ПустаяСтрока(ТекстРуководитель), 
				НСтр("ru='Учредитель еще в %1'"), 
				НСтр("ru=', учредитель еще в %1'"));
		Иначе
			СтрокаПодстановки = ?(ПустаяСтрока(ТекстРуководитель), 
				НСтр("ru='Учредитель в %1'"), 
				НСтр("ru=', учредитель в %1'"));
		КонецЕсли;
		ТекстУчредитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СтрокаПодстановки,
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоОрганизацийГдеУчредитель, "организации,организациях,организациях"));
	Иначе
		ТекстУчредитель = "";
	КонецЕсли;
	ИнформацияОРуководителе = ТекстРуководитель + ТекстУчредитель;
	Если НЕ ПустаяСтрока(ИнформацияОРуководителе) Тогда
		ИнформацияОРуководителе = ИнформацияОРуководителе 
			+ ?(ИнформацияОСвязях.ОрганизацииГдеРуководительПоФИО ИЛИ ИнформацияОСвязях.ОрганизацииГдеУчредительПоФИО,
				" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
				"");
	КонецЕсли;		
	ОбластиМакета.ЕГРЮЛ.Параметры.ИнформацияОРуководителе = ИнформацияОРуководителе;
	
	// Уставный капитал
	Если ИнформацияОСвязях.УставныйКапитал > 0 Тогда
		ОбластиМакета.ЕГРЮЛ.Параметры.УставныйКапитал = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 руб.'"),
			Формат(ИнформацияОСвязях.УставныйКапитал, "ЧДЦ="));
	Иначе
		ОбластиМакета.ЕГРЮЛ.Параметры.УставныйКапитал = "-";
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластиМакета.ЕГРЮЛ);
	
	// Бухгалтерская отчетность
	
	СтруктураГодов = ПериодыБухгалтерскойОтчетности();
	ГодыЕстьОтчетность = Новый Массив;
	ГодыНетОтчетности = Новый Массив;
	Для НомерГода = 1 По 3 Цикл
		Если ИнформацияОСвязях["ЕстьОтчетностьГод_" + НомерГода] Тогда
			ГодыЕстьОтчетность.Добавить(СтруктураГодов["Год_" + НомерГода]);
		Иначе
			ГодыНетОтчетности.Добавить(СтруктураГодов["Год_" + НомерГода]);
		КонецЕсли;
	КонецЦикла;
	Если ГодыЕстьОтчетность.Количество() = 3 Тогда
		НаличиеБухгалтерскойОтчетности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Есть в базе Росстата за %1, %2 и %3 годы'"),
			ГодыЕстьОтчетность[0],
			ГодыЕстьОтчетность[1],
			ГодыЕстьОтчетность[2]);
	ИначеЕсли ГодыЕстьОтчетность.Количество() = 2 Тогда
		НаличиеБухгалтерскойОтчетности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Есть в базе Росстата за %1 и %2 годы, отсутствует за %3 год'"),
			ГодыЕстьОтчетность[0],
			ГодыЕстьОтчетность[1],
			ГодыНетОтчетности[0]);
	ИначеЕсли ГодыЕстьОтчетность.Количество() = 1 Тогда
		НаличиеБухгалтерскойОтчетности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Есть в базе Росстата за %1 год, отсутствует за %2 и %3 годы'"),
			ГодыЕстьОтчетность[0],
			ГодыНетОтчетности[0],
			ГодыНетОтчетности[1]);
	Иначе
		НаличиеБухгалтерскойОтчетности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Отсутствует в базе Росстата за %1, %2 и %3 годы'"),
			ГодыНетОтчетности[0],
			ГодыНетОтчетности[1],
			ГодыНетОтчетности[2]);
	КонецЕсли;
	ОбластиМакета.БухгалтерскаяОтчетность.Параметры.НаличиеБухгалтерскойОтчетности = НаличиеБухгалтерскойОтчетности;
	ТабличныйДокумент.Вывести(ОбластиМакета.БухгалтерскаяОтчетность);
	
	// Анализ отчетности
	
	Если (ИнформацияОСвязях.ЕстьОтчетностьГод_1 
		ИЛИ ИнформацияОСвязях.ЕстьОтчетностьГод_2 
		ИЛИ ИнформацияОСвязях.ЕстьОтчетностьГод_3)
		И ИнформацияОСвязях.АнализОтчетности.Количество() > 0 Тогда
		
		АнализОтчетностиЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Показатели за %1 год'"),
			?(ИнформацияОСвязях.ЕстьОтчетностьГод_1, СтруктураГодов.Год_1, 
				?(ИнформацияОСвязях.ЕстьОтчетностьГод_2, СтруктураГодов.Год_2, СтруктураГодов.Год_3)));
		ДанныеОтчетности = ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности[0];
		ОбластиМакета.АнализОтчетности.Параметры.Заполнить(ДанныеОтчетности.Показатели);
		ОбластиМакета.АнализОтчетности.Параметры.АнализОтчетностиЗаголовок  = АнализОтчетностиЗаголовок;
		ОбластиМакета.АнализОтчетности.Параметры.АнализОтчетностиВалюта     = ДанныеОтчетности.ВалютаОтчетности;
		ЗначенияПоказателей = ИнформацияОСвязях.АнализОтчетности[0].Показатели;
		Если ИнформацияОСвязях.ЕстьОтчетностьГод_1 Тогда
			ОбластиМакета.АнализОтчетности.Параметры.Продажи = ЗначенияПоказателей.Продажи_1;
			ОбластиМакета.АнализОтчетности.Параметры.Прибыль = ЗначенияПоказателей.Прибыль_1;
			ОбластиМакета.АнализОтчетности.Параметры.ЧистыеАктивы = ЗначенияПоказателей.ЧистыеАктивы_1;
			ПоказателиДляКартинок = ЗначенияПоказателей;
		ИначеЕсли ИнформацияОСвязях.ЕстьОтчетностьГод_2 Тогда
			ОбластиМакета.АнализОтчетности.Параметры.Продажи = ЗначенияПоказателей.Продажи_2;
			ОбластиМакета.АнализОтчетности.Параметры.Прибыль = ЗначенияПоказателей.Прибыль_2;
			ОбластиМакета.АнализОтчетности.Параметры.ЧистыеАктивы = ЗначенияПоказателей.ЧистыеАктивы_2;
			ПоказателиДляКартинок = Новый Структура;
			ПоказателиДляКартинок.Вставить("Продажи_1", ЗначенияПоказателей.Продажи_2);
			ПоказателиДляКартинок.Вставить("Продажи_2", ЗначенияПоказателей.Продажи_3);
			ПоказателиДляКартинок.Вставить("Прибыль_1", ЗначенияПоказателей.Прибыль_2);
			ПоказателиДляКартинок.Вставить("Прибыль_2", ЗначенияПоказателей.Прибыль_3);
			ПоказателиДляКартинок.Вставить("ЧистыеАктивы_1", ЗначенияПоказателей.ЧистыеАктивы_2);
			ПоказателиДляКартинок.Вставить("ЧистыеАктивы_2", ЗначенияПоказателей.ЧистыеАктивы_3);
		Иначе
			ОбластиМакета.АнализОтчетности.Параметры.Продажи = ЗначенияПоказателей.Продажи_3;
			ОбластиМакета.АнализОтчетности.Параметры.Прибыль = ЗначенияПоказателей.Прибыль_3;
			ОбластиМакета.АнализОтчетности.Параметры.ЧистыеАктивы = ЗначенияПоказателей.ЧистыеАктивы_3;
			ПоказателиДляКартинок = Новый Структура;
		КонецЕсли;
		УстановитьКартинкиАнализаОтчетности(ОбластиМакета.АнализОтчетности, ПоказателиДляКартинок, 
			"Продажи;Прибыль;ЧистыеАктивы", "1", "2");
		ТабличныйДокумент.Вывести(ОбластиМакета.АнализОтчетности);
		
		// Финансовый анализ
		Если ИнформацияОСвязях.ФинансовыйАнализ.Количество() > 0 Тогда
			ДанныеАнализа = ИнформацияОСвязях.ФинансовыйАнализ[0];
			ПояснениеОценкиРискБанкротства = ДанныеАнализа.ПоказателиРискБанкротства.ПояснениеОценкиРискБанкротства;
			ОбластиМакета.ФинансовыйАнализ.Параметры.ПояснениеОценкиРискБанкротства = ПояснениеОценкиРискБанкротства;
			ПояснениеОценкиКредитоспособность = ДанныеАнализа.ПоказателиКредитоспособность.ПояснениеОценкиКредитоспособность;
			ОбластиМакета.ФинансовыйАнализ.Параметры.ПояснениеОценкиКредитоспособность = ПояснениеОценкиКредитоспособность;
			ТабличныйДокумент.Вывести(ОбластиМакета.ФинансовыйАнализ);
		КонецЕсли;	
		
	КонецЕсли;
	
	// Проверки гос. органами
	ВсегоПроверок = ИнформацияОПроверках.Проверки.Количество();
	Если ВсегоПроверок > 0 Тогда
		ПроверокСНарушениями = 0;
		Для каждого СтрокаПроверки Из ИнформацияОПроверках.Проверки Цикл
			Если СтрокаПроверки.Нарушения.Количество() > 0 Тогда
				ПроверокСНарушениями = ПроверокСНарушениями + 1;
			КонецЕсли;
		КонецЦикла;
		Если ПроверокСНарушениями = 0 Тогда
			РезультатыПроверок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Известны результаты %1, нарушений не выявлено'"), 
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
					ВсегоПроверок, НСтр("ru='проверки,проверок,проверок'")));
		Иначе
			ТекстПроверки = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				ВсегоПроверок, НСтр("ru='проверки,проверок,проверок'"));
			Если ВсегоПроверок = 1 Тогда
				ТекстНарушения = НСтр("ru='выявлены нарушения'");
			ИначеЕсли ВсегоПроверок = ПроверокСНарушениями Тогда
				ТекстНарушения = НСтр("ru='все проверки выявили нарушения'");
			Иначе
				ТекстНарушения = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
					ПроверокСНарушениями, 
					НСтр("ru='проверка выявила нарушения,проверки выявили нарушения,проверок выявили нарушения'"));
			КонецЕсли;
			РезультатыПроверок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Известны результаты %1, %2'"), ТекстПроверки, ТекстНарушения);
		КонецЕсли;
		ОбластиМакета.РезультатыПроверок.Параметры.РезультатыПроверок = РезультатыПроверок;
		ТабличныйДокумент.Вывести(ОбластиМакета.РезультатыПроверок);
	КонецЕсли;
	
	ОбластиРасшифровки.ЗаполнитьЗначения("РезультатГлавное", "ИмяДокумента");
	Для каждого СтрокаТаблицы Из ОбластиРасшифровки Цикл
		НоваяСтрока = ДанныеОтчета.ОбластиРасшифровки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	ДанныеОтчета.Вставить("РезультатГлавное", ТабличныйДокумент);
	ДанныеОтчета.Вставить("ИмяФайлаГлавное",
		СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Досье %1 - главное'"),
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
					ИнформацияОСвязях.НаименованиеСокращенное, ""))));

КонецПроцедуры

#КонецОбласти

#Область ДанныеГосРеестров

Процедура СформироватьРезультатДанныеГосРеестров(ИнформацияОСвязях, ДанныеОтчета)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПараметрыВывода   = Новый Структура;
	ПараметрыВывода.Вставить("ОбластиМакета",      ВсеОбластиМакета("ДанныеГосРеестров"));
	ПараметрыВывода.Вставить("ОбластиРасшифровки", НоваяТаблицаОбластиРасшифровки());
	ПараметрыВывода.Вставить("ЭтоЮридическоеЛицо", ДанныеОтчета.ЭтоЮридическоеЛицо);
	ПараметрыВывода.Вставить("ИмяДокумента",       "РезультатДанныеГосРеестров");
	
	ОбластьШапка = ?(ДанныеОтчета.ЭтоЮридическоеЛицо, 
		ПараметрыВывода.ОбластиМакета.ШапкаЮридическоеЛицо, 
		ПараметрыВывода.ОбластиМакета.ШапкаПредприниматель);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ВывестиРазделНаименование(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода);
	
	ВывестиРазделРегистрация(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода);
	
	ВывестиРазделРеквизиты(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода);
	
	ВывестиРазделВидыДеятельности(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода);
	
	ВывестиРазделЛицензии(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода);
	
	ВывестиРазделЮридическийАдрес(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода);
	
	ВывестиРазделРуководитель(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода);
	
	ВывестиРазделУчрежденныеФирмы(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода);
	
	ВывестиРазделУставныйКапитал(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода);
	
	ВывестиРазделУчредители(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода);
	
	ВывестиРазделПодразделения(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода);
	
	ВывестиРазделИзмененияВРеестре(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода);
	
	ПараметрыВывода.ОбластиРасшифровки.ЗаполнитьЗначения("РезультатДанныеГосРеестров", "ИмяДокумента");
	Для каждого СтрокаТаблицы Из ПараметрыВывода.ОбластиРасшифровки Цикл
		НоваяСтрока = ДанныеОтчета.ОбластиРасшифровки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	ДанныеОтчета.Вставить("РезультатДанныеГосРеестров", ТабличныйДокумент);
	ДанныеОтчета.Вставить("ИмяФайлаДанныеГосРеестров",  
		СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Досье %1 - данные реестра'"),
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
					ИнформацияОСвязях.НаименованиеСокращенное, ""))));
	
КонецПроцедуры

Процедура ВывестиРазделНаименование(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода)
	
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	
	ОбластиМакета.Наименование.Параметры.НаименованиеСокращенное = ИнформацияОСвязях.НаименованиеСокращенное;
	Если ИнформацияОСвязях.НаименованиеСокращенное <> ИнформацияОСвязях.НаименованиеПолное Тогда
		ОбластиМакета.Наименование.Параметры.НаименованиеПолное = ИнформацияОСвязях.НаименованиеПолное;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластиМакета.Наименование);
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);

КонецПроцедуры

Процедура ВывестиРазделРегистрация(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода)
	
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	ОбластиМакета.Регистрация.Параметры.ДатаРегистрации = Формат(ИнформацияОСвязях.ДатаРегистрации, "ДЛФ=D");
	ТабличныйДокумент.Вывести(ОбластиМакета.Регистрация);
	
	// Статус по ЕГРЮЛ
	Если ИнформацияОСвязях.КодСтатуса <> Неопределено Тогда
	
		Если ИнформацияОСвязях.КодСтатуса = "001" Тогда
			Если ЭтоЮридическоеЛицо Тогда
				ОбластиМакета.ДействующаяОрганизация.Параметры.ДействующаяОрганизация =
					НСтр("ru='Действующая организация (по данным ЕГРЮЛ)'");
			Иначе
				ОбластиМакета.ДействующаяОрганизация.Параметры.ДействующаяОрганизация =
					НСтр("ru='Действующий ИП (по данным ЕГРИП)'");
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластиМакета.ДействующаяОрганизация);
		Иначе
			Если ЭтоЮридическоеЛицо Тогда
				ОбластиМакета.НедействующаяОрганизация.Параметры.НедействующаяОрганизация =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (по данным ЕГРЮЛ)'"),
						ИнформацияОСвязях.НаименованиеСтатуса);
			Иначе
				ОбластиМакета.НедействующаяОрганизация.Параметры.НедействующаяОрганизация =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (по данным ЕГРИП)'"),
						ИнформацияОСвязях.НаименованиеСтатуса);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластиМакета.НедействующаяОрганизация);
		КонецЕсли;
	
	КонецЕсли;
	
	// Статус по ЕГРН
	Если ЗначениеЗаполнено(ИнформацияОСвязях.СостояниеПоДаннымЕГРН) Тогда
	
		Если ИнформацияОСвязях.СостояниеПоДаннымЕГРН = 
			Перечисления.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС Тогда
			Если ЭтоЮридическоеЛицо Тогда
				ОбластиМакета.ДействующаяОрганизация.Параметры.ДействующаяОрганизация =
					НСтр("ru='Организация есть в базе ЕГРН'");
			Иначе
				ОбластиМакета.ДействующаяОрганизация.Параметры.ДействующаяОрганизация =
					НСтр("ru='ИП есть в базе ЕГРН'");
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластиМакета.ДействующаяОрганизация);
		Иначе
			Если НЕ ЭтоЮридическоеЛицо 
				И ИнформацияОСвязях.СостояниеПоДаннымЕГРН = 
					Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП Тогда
				ОбластиМакета.НедействующаяОрганизация.Параметры.НедействующаяОрганизация = 
					НСтр("ru='Не действует (по данным ЕГРН)'");
			Иначе
				ОбластиМакета.НедействующаяОрганизация.Параметры.НедействующаяОрганизация =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (по данным ЕГРН)'"),
						ИнформацияОСвязях.СостояниеПоДаннымЕГРН);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластиМакета.НедействующаяОрганизация);
		КонецЕсли;
	
	КонецЕсли;
	
	// Регистрация в ФНС, ПФР, ФСС
	Если ИнформацияОСвязях.РегистрацияВНалоговомОргане <> Неопределено 
		ИЛИ ИнформацияОСвязях.РегистрацияВПенсионномФонде <> Неопределено
		ИЛИ ИнформацияОСвязях.РегистрацияВФСС <> Неопределено Тогда
		
			// Свернуто
			ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, "Регистрация", 0);
		
			// Развернуто
			СтрокаОбласти = ОбластиРасшифровки.Добавить();
			СтрокаОбласти.ИмяОбласти   = "Регистрация";
			СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
			Если ИнформацияОСвязях.РегистрацияВНалоговомОргане <> Неопределено Тогда
				ДатаРегистрации = Формат(ИнформацияОСвязях.РегистрацияВНалоговомОргане.ДатаРегистрации, "ДЛФ=D");
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.ДатаРегистрации = ДатаРегистрации;
				ГосударственныйОрган = ИнформацияОСвязях.РегистрацияВНалоговомОргане.Наименование;
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.ГосударственныйОрган = ГосударственныйОрган;
				ТабличныйДокумент.Вывести(ОбластиМакета.РегистрацияВГосОрганах);
			КонецЕсли;
			Если ИнформацияОСвязях.РегистрацияВПенсионномФонде <> Неопределено Тогда
				ДатаРегистрации = Формат(ИнформацияОСвязях.РегистрацияВПенсионномФонде.ДатаРегистрации, "ДЛФ=D");
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.ДатаРегистрации = ДатаРегистрации;
				ГосударственныйОрган = ИнформацияОСвязях.РегистрацияВПенсионномФонде.НаименованиеОрганаПФР;
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.ГосударственныйОрган = ГосударственныйОрган;
				РегистрационныйНомер = ИнформацияОСвязях.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.РегистрационныйНомер = РегистрационныйНомер;
				ТабличныйДокумент.Вывести(ОбластиМакета.РегистрацияВГосОрганах);
			КонецЕсли;
			Если ИнформацияОСвязях.РегистрацияВФСС <> Неопределено Тогда
				ДатаРегистрации = Формат(ИнформацияОСвязях.РегистрацияВФСС.ДатаРегистрации, "ДЛФ=D");
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.ДатаРегистрации = ДатаРегистрации;
				ГосударственныйОрган = ИнформацияОСвязях.РегистрацияВФСС.НаименованиеОрганаФСС;
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.ГосударственныйОрган = ГосударственныйОрган;
				РегистрационныйНомер = ИнформацияОСвязях.РегистрацияВФСС.РегистрационныйНомерФСС;
				ОбластиМакета.РегистрацияВГосОрганах.Параметры.РегистрационныйНомер = РегистрационныйНомер;
				ТабличныйДокумент.Вывести(ОбластиМакета.РегистрацияВГосОрганах);
			КонецЕсли;
			Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
				"Свернуть", ПараметрыВывода.ИмяДокумента, "Регистрация");
			ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
			ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
			СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
			ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	КонецЕсли;
		
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);

КонецПроцедуры

Процедура ВывестиРазделРеквизиты(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода)

	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	Если ЭтоЮридическоеЛицо Тогда
		ОбластиМакета.РеквизитыЮридическоеЛицо.Параметры.Заполнить(ИнформацияОСвязях);
		ТабличныйДокумент.Вывести(ОбластиМакета.РеквизитыЮридическоеЛицо);
	Иначе
		ОбластиМакета.РеквизитыПредприниматель.Параметры.Заполнить(ИнформацияОСвязях);
		ТабличныйДокумент.Вывести(ОбластиМакета.РеквизитыПредприниматель);
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
	
КонецПроцедуры

Процедура ВывестиРазделВидыДеятельности(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода)

	КоличествоВидовДеятельности = ИнформацияОСвязях.ВидыДеятельности.Количество();
	Если КоличествоВидовДеятельности = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	// Вид деятельности 1
	СтрокаВидаДеятельности = ИнформацияОСвязях.ВидыДеятельности[0];
	ОбластиМакета.ВидыДеятельности.Параметры.Заполнить(СтрокаВидаДеятельности);
	ТабличныйДокумент.Вывести(ОбластиМакета.ВидыДеятельности);
	
	// Еще виды деятельности
	
	Если КоличествоВидовДеятельности = 2 Тогда
		
		// Вид деятельности 2
		СтрокаВидаДеятельности = ИнформацияОСвязях.ВидыДеятельности[1];
		ОбластиМакета.ЕщеВидыДеятельности.Параметры.Заполнить(СтрокаВидаДеятельности);
		ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеВидыДеятельности);
		
	ИначеЕсли КоличествоВидовДеятельности > 2 Тогда
		
		// Свернуто
		ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
			"ВидыДеятельности", КоличествоВидовДеятельности);
		
		// Развернуто
		СтрокаОбласти = ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "ВидыДеятельности";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
		Для НомерСтроки = 2 По КоличествоВидовДеятельности Цикл
			// Виды деятельности 2 - N
			СтрокаВидаДеятельности = ИнформацияОСвязях.ВидыДеятельности[НомерСтроки - 1];
			ОбластиМакета.ЕщеВидыДеятельности.Параметры.Заполнить(СтрокаВидаДеятельности);
			ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеВидыДеятельности);
		КонецЦикла;
		Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
			"Свернуть", ПараметрыВывода.ИмяДокумента, "ВидыДеятельности");
		ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
		СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель); 
	
КонецПроцедуры

Процедура ВывестиРазделЛицензии(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода)

	КоличествоЛицензий = ИнформацияОСвязях.Лицензии.Количество();
	Если КоличествоЛицензий = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	// Лицензия 1
	СтрокаЛицензии  = ИнформацияОСвязях.Лицензии[0];
	ОбластиМакета.Лицензии.Параметры.Лицензия = СтрокаЛицензии.Лицензия;
	ТабличныйДокумент.Вывести(ОбластиМакета.Лицензии);
	Если НЕ ПустаяСтрока(СтрокаЛицензии.ОписаниеЛицензии) Тогда
		ОбластиМакета.ЛицензииОписание.Параметры.ОписаниеЛицензии = СтрокаЛицензии.ОписаниеЛицензии;
		ТабличныйДокумент.Вывести(ОбластиМакета.ЛицензииОписание);
	КонецЕсли;
	
	// Еще лицензии
	
	Если КоличествоЛицензий = 2 Тогда
		
		// Лицензия 2
		СтрокаЛицензии = ИнформацияОСвязях.Лицензии[1];
		ОбластиМакета.ЕщеЛицензии.Параметры.Лицензия = СтрокаЛицензии.Лицензия;
		ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеЛицензии);
		Если НЕ ПустаяСтрока(СтрокаЛицензии.ОписаниеЛицензии) Тогда
			ОбластиМакета.ЛицензииОписание.Параметры.ОписаниеЛицензии = СтрокаЛицензии.ОписаниеЛицензии;
			ТабличныйДокумент.Вывести(ОбластиМакета.ЛицензииОписание);
		КонецЕсли;
		
	ИначеЕсли КоличествоЛицензий > 2 Тогда
		
		// Свернуто
		ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
			"Лицензии", КоличествоЛицензий);
	
		// Развернуто
		СтрокаОбласти = ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "Лицензии";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
		Для НомерСтроки = 2 По КоличествоЛицензий Цикл
			// Лицензии 2 - N
			СтрокаЛицензии = ИнформацияОСвязях.Лицензии[НомерСтроки-1];
			ОбластиМакета.ЕщеЛицензии.Параметры.Лицензия = СтрокаЛицензии.Лицензия;
			ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеЛицензии);
			Если НЕ ПустаяСтрока(СтрокаЛицензии.ОписаниеЛицензии) Тогда
				ОбластиМакета.ЛицензииОписание.Параметры.ОписаниеЛицензии = СтрокаЛицензии.ОписаниеЛицензии;
				ТабличныйДокумент.Вывести(ОбластиМакета.ЛицензииОписание);
			КонецЕсли;
		КонецЦикла;
		Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
			"Свернуть", ПараметрыВывода.ИмяДокумента, "Лицензии");
		ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
		СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель); 
	
КонецПроцедуры

Процедура ВывестиРазделЮридическийАдрес(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода)

	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	Если НЕ ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
			
	ОбластиМакета.ЮридическийАдрес.Параметры.ЮридическийАдрес = ИнформацияОСвязях.ЮридическийАдрес.Представление;
	ТабличныйДокумент.Вывести(ОбластиМакета.ЮридическийАдрес);
	
	// Еще организации, зарегистрированные по этому юридическому адресу
	
	КоличествоОрганизаций = ИнформацияОСвязях.ОрганизацииПоАдресу.Количество();
	Если КоличествоОрганизаций > 0 Тогда
		
		// Сколько всего
		ИнформацияОСвязях.ОрганизацииПоАдресу.Сортировать("НаименованиеОрганизации");
		СколькоЕщеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='По этому адресу %1 еще %2:'"),
			?(КоличествоОрганизаций % 10 = 1 И НЕ КоличествоОрганизаций % 100 = 11, 
				НСтр("ru='зарегистрирована'"),
				НСтр("ru='зарегистрированы'")),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоОрганизаций, "организация,организации,организаций"));
		ОбластиМакета.СколькоЕщеОрганизаций.Параметры.СколькоЕщеОрганизаций = СколькоЕщеОрганизаций;
		ТабличныйДокумент.Вывести(ОбластиМакета.СколькоЕщеОрганизаций);
		
		// Организация 1
		ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
			ИнформацияОСвязях.ОрганизацииПоАдресу[0]);
		
		Если КоличествоОрганизаций = 2 Тогда
			
			// Организация 2
			ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
				ИнформацияОСвязях.ОрганизацииПоАдресу[1]);
			
		ИначеЕсли КоличествоОрганизаций > 2 Тогда
			
			// Свернуто
			ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
				"ОрганизацииПоАдресу", КоличествоОрганизаций);
		
			// Развернуто
			СтрокаОбласти = ОбластиРасшифровки.Добавить();
			СтрокаОбласти.ИмяОбласти   = "ОрганизацииПоАдресу";
			СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
			Для НомерСтроки = 2 По КоличествоОрганизаций Цикл
				// Организации 2 - N
				ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
					ИнформацияОСвязях.ОрганизацииПоАдресу[НомерСтроки-1]);
			КонецЦикла;
			Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
				"Свернуть", ПараметрыВывода.ИмяДокумента, "ОрганизацииПоАдресу");
			ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
			ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
			СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
			ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
	
КонецПроцедуры

Процедура ВывестиРазделУставныйКапитал(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода)

	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	Если ЭтоЮридическоеЛицо
		И ИнформацияОСвязях.УставныйКапитал > 0 Тогда
		
		ОбластиМакета.УставныйКапитал.Параметры.УставныйКапитал = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 руб.'"),
			Формат(ИнформацияОСвязях.УставныйКапитал, "ЧДЦ="));
		ТабличныйДокумент.Вывести(ОбластиМакета.УставныйКапитал);
		
		ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРазделРуководитель(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода)

	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	Если ЭтоЮридическоеЛицо Тогда
		ВыводитьСекциюРуководитель = ЗначениеЗаполнено(ИнформацияОСвязях.Руководитель);
	Иначе
		ВыводитьСекциюРуководитель = ИнформацияОСвязях.ОрганизацииГдеРуководитель.Количество() > 0
			ИЛИ ИнформацияОСвязях.ОрганизацииГдеУчредитель.Количество() > 0;
	КонецЕсли;
		
	Если НЕ ВыводитьСекциюРуководитель Тогда
		Возврат;
	КонецЕсли;
			
	Если ЭтоЮридическоеЛицо Тогда
		Руководитель = ИнформацияОСвязях.Руководитель.Представление;
		Если ЗначениеЗаполнено(ИнформацияОСвязях.Телефон) Тогда
			Руководитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1, тел. %2'"),
				Руководитель,
				ИнформацияОСвязях.Телефон.Представление);
		КонецЕсли;
		ДолжностьРуководителя = ИнформацияОСвязях.Руководитель.Должность;
		Если ЗначениеЗаполнено(ИнформацияОСвязях.Руководитель.ДатаЗаписи) Тогда
			ДолжностьРуководителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 с %2'"),
				ДолжностьРуководителя,
				Формат(ИнформацияОСвязях.Руководитель.ДатаЗаписи, "ДЛФ=D"));
		КонецЕсли;
		ОбластиМакета.Руководитель.Параметры.Руководитель          = Руководитель;
		ОбластиМакета.Руководитель.Параметры.ДолжностьРуководителя = ДолжностьРуководителя;
		ТабличныйДокумент.Вывести(ОбластиМакета.Руководитель);
	Иначе
		ОбластиМакета.Предприниматель.Параметры.Предприниматель = ИнформацияОСвязях.Наименование;
		ТабличныйДокумент.Вывести(ОбластиМакета.Предприниматель);
	КонецЕсли;

	// Организации, где еще этот руководитель (предприниматель) является руководителем
	
	КоличествоОрганизаций = ИнформацияОСвязях.ОрганизацииГдеРуководитель.Количество();
	Если КоличествоОрганизаций > 0 Тогда
		
		// Сколько всего
		ИнформацияОСвязях.ОрганизацииГдеРуководитель.Сортировать("НаименованиеОрганизации");
		СколькоЕщеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ЭтоЮридическоеЛицо, 
				НСтр("ru='Является руководителем еще в %1%2:'"), 
				НСтр("ru='Является руководителем в %1%2:'")),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоОрганизаций, "организации,организациях, организациях"),
			?(ИнформацияОСвязях.ОрганизацииГдеРуководительПоФИО,
				" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
				""));
		ОбластиМакета.СколькоЕщеОрганизаций.Параметры.СколькоЕщеОрганизаций = СколькоЕщеОрганизаций;
		ТабличныйДокумент.Вывести(ОбластиМакета.СколькоЕщеОрганизаций);
		
		// Организация 1
		ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
			ИнформацияОСвязях.ОрганизацииГдеРуководитель[0]);
		
		Если КоличествоОрганизаций = 2 Тогда
			
			// Организация 2
			ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
				ИнформацияОСвязях.ОрганизацииГдеРуководитель[1]);
			
		ИначеЕсли КоличествоОрганизаций > 2 Тогда
			
			// Свернуто
			ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
				"ОрганизацииГдеРуководитель", КоличествоОрганизаций);
		
			// Развернуто
			СтрокаОбласти = ОбластиРасшифровки.Добавить();
			СтрокаОбласти.ИмяОбласти   = "ОрганизацииГдеРуководитель";
			СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
			Для НомерСтроки = 2 По КоличествоОрганизаций Цикл
				// Организации 2 - N
				ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
					ИнформацияОСвязях.ОрганизацииГдеРуководитель[НомерСтроки-1]);
			КонецЦикла;
			Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
				"Свернуть", ПараметрыВывода.ИмяДокумента, "ОрганизацииГдеРуководитель");
			ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
			ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
			СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
			ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Организации, где еще этот руководитель (предприниматель) является учредителем
	
	КоличествоОрганизаций = ИнформацияОСвязях.ОрганизацииГдеУчредитель.Количество();
	Если КоличествоОрганизаций > 0 Тогда
		
		// Сколько всего
		ИнформацияОСвязях.ОрганизацииГдеУчредитель.Сортировать("НаименованиеОрганизации");
		ВыводитьЕще = ЭтоЮридическоеЛицо 
			И ((ЗначениеЗаполнено(ИнформацияОСвязях.Руководитель.ИНН)
			И ИнформацияОСвязях.Учредители.Найти(ИнформацияОСвязях.Руководитель.ИНН, "ИНН") <> Неопределено)
			ИЛИ (НЕ ЗначениеЗаполнено(ИнформацияОСвязях.Руководитель.ИНН)
			И ИнформацияОСвязях.Учредители.Найти(ИнформацияОСвязях.Руководитель.Представление, "Учредитель") <> Неопределено));
		СколькоЕщеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ВыводитьЕще, 
				НСтр("ru='Является учредителем еще в %1%2:'"), 
				НСтр("ru='Является учредителем в %1%2:'")),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				КоличествоОрганизаций, "организации,организациях, организациях"),
			?(ИнформацияОСвязях.ОрганизацииГдеУчредительПоФИО,
				" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
				""));
		ОбластиМакета.СколькоЕщеОрганизаций.Параметры.СколькоЕщеОрганизаций = СколькоЕщеОрганизаций;
		ТабличныйДокумент.Вывести(ОбластиМакета.СколькоЕщеОрганизаций);
		
		// Организация 1
		ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
			ИнформацияОСвязях.ОрганизацииГдеУчредитель[0]);
		
		Если КоличествоОрганизаций = 2 Тогда
			
			// Организация 2
			ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
				ИнформацияОСвязях.ОрганизацииГдеУчредитель[1]);
			
		ИначеЕсли КоличествоОрганизаций > 2 Тогда
			
			// Свернуто
			ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
				"ОрганизацииГдеУчредитель", КоличествоОрганизаций);
			
			// Развернуто
			СтрокаОбласти = ОбластиРасшифровки.Добавить();
			СтрокаОбласти.ИмяОбласти   = "ОрганизацииГдеУчредитель";
			СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
			Для НомерСтроки = 2 По КоличествоОрганизаций Цикл
				// Организации 2 - N
				ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
					ИнформацияОСвязях.ОрганизацииГдеУчредитель[НомерСтроки - 1]);
			КонецЦикла;
			Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
				"Свернуть", ПараметрыВывода.ИмяДокумента, "ОрганизацииГдеУчредитель");
			ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
			ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
			СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
			ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);

КонецПроцедуры

Процедура ВывестиРазделУчрежденныеФирмы(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода)

	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	Если НЕ ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОрганизаций = ИнформацияОСвязях.УчрежденныеФирмы.Количество();
	Если КоличествоОрганизаций = 0 Тогда
		Возврат;
	КонецЕсли;
			
	ОбластиМакета      = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	
	ИнформацияОСвязях.УчрежденныеФирмы.Сортировать("НаименованиеОрганизации");
	
	// Организация 1
	ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, "УчрежденныеФирмы", 
		ИнформацияОСвязях.УчрежденныеФирмы[0]);
	
	Если КоличествоОрганизаций = 2 Тогда
		
		// Организация 2
		ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, "ЕщеУчрежденныеФирмы", 
			ИнформацияОСвязях.УчрежденныеФирмы[1]);
		
	ИначеЕсли КоличествоОрганизаций > 2 Тогда
		
		// Свернуто
		ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
			"УчрежденныеФирмы", КоличествоОрганизаций);
		
		// Развернуто
		СтрокаОбласти = ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "УчрежденныеФирмы";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
		Для НомерСтроки = 2 По КоличествоОрганизаций Цикл
			// Организации 2 - N
			ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, "ЕщеУчрежденныеФирмы", 
				ИнформацияОСвязях.УчрежденныеФирмы[НомерСтроки - 1]);
		КонецЦикла;
		Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
			"Свернуть", ПараметрыВывода.ИмяДокумента, "УчрежденныеФирмы");
		ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
		СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
	
КонецПроцедуры

Процедура ВывестиРазделУчредители(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода)

	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	Если НЕ ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоУчредителей = ИнформацияОСвязях.Учредители.Количество();
	Если КоличествоУчредителей = 0 Тогда
		Возврат;
	КонецЕсли;
				
	ОбластиМакета      = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	
	Для НомерУчредителя = 1 По КоличествоУчредителей Цикл
		
		// Учредитель
		
		ПрефиксОбластиРасшифровки = "Учредитель" + Формат(НомерУчредителя, "ЧГ=");
		
		СтрокаУчредителя = ИнформацияОСвязях.Учредители[НомерУчредителя - 1];
		Если НомерУчредителя > 1 Тогда
			ТабличныйДокумент.Вывести(ОбластиМакета.РазделительСтрокСписка);
		КонецЕсли;
		ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, ?(НомерУчредителя = 1, "Учредители", "ЕщеУчредители"), 
			СтрокаУчредителя);
		
		// Организации, где еще этот учредитель является руководителем
	
		КоличествоОрганизаций = СтрокаУчредителя.ОрганизацииГдеРуководитель.Количество();
		Если КоличествоОрганизаций > 0 Тогда
			
			// Сколько всего
			СтрокаУчредителя.ОрганизацииГдеРуководитель.Сортировать("НаименованиеОрганизации");
			ИмяОбластиРасшифровки = ПрефиксОбластиРасшифровки + "ОрганизацииГдеРуководитель";
			ВыводитьЕще = ИнформацияОСвязях.Руководитель <> Неопределено
				И ((ЗначениеЗаполнено(ИнформацияОСвязях.Руководитель.ИНН)
				И СтрокаУчредителя.ИНН = ИнформацияОСвязях.Руководитель.ИНН)
				ИЛИ (НЕ ЗначениеЗаполнено(ИнформацияОСвязях.Руководитель.ИНН)
				И СтрокаУчредителя.Учредитель = ИнформацияОСвязях.Руководитель.Представление));
			СколькоЕщеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				?(ВыводитьЕще,
					НСтр("ru='Является руководителем еще в %1%2:'"),
					НСтр("ru='Является руководителем в %1%2:'")),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
					КоличествоОрганизаций, "организации,организациях, организациях"),
				?(СтрокаУчредителя.ОрганизацииГдеРуководительПоФИО,
					" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
					""));
			ОбластиМакета.СколькоЕщеОрганизаций.Параметры.СколькоЕщеОрганизаций = СколькоЕщеОрганизаций;
			ТабличныйДокумент.Вывести(ОбластиМакета.СколькоЕщеОрганизаций);
			
			// Организация 1
			ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
				СтрокаУчредителя.ОрганизацииГдеРуководитель[0]);
			
			Если КоличествоОрганизаций = 2 Тогда
				
				// Организация 2
				ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
					СтрокаУчредителя.ОрганизацииГдеРуководитель[1]);
				
			ИначеЕсли КоличествоОрганизаций > 2 Тогда
				
				// Свернуто
				ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
					ИмяОбластиРасшифровки, КоличествоОрганизаций);
			
				// Развернуто
				СтрокаОбласти = ОбластиРасшифровки.Добавить();
				СтрокаОбласти.ИмяОбласти   = ИмяОбластиРасшифровки;
				СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
				Для НомерСтроки = 2 По КоличествоОрганизаций Цикл
					// Организации 2 - N
					ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
						СтрокаУчредителя.ОрганизацииГдеРуководитель[НомерСтроки-1]);
				КонецЦикла;
				Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
					"Свернуть", ПараметрыВывода.ИмяДокумента, ИмяОбластиРасшифровки);
				ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
				ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
				СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
				ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Организации, где еще этот учредитель является учредителем
	
		КоличествоОрганизаций = СтрокаУчредителя.ОрганизацииГдеУчредитель.Количество();
		Если КоличествоОрганизаций > 0 Тогда
			
			// Сколько всего
			СтрокаУчредителя.ОрганизацииГдеУчредитель.Сортировать("НаименованиеОрганизации");
			ИмяОбластиРасшифровки = ПрефиксОбластиРасшифровки + "ОрганизацииГдеУчредитель";
			СколькоЕщеОрганизаций = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Является учредителем еще в %1%2:'"),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
					КоличествоОрганизаций, "организации,организациях, организациях"),
				?(СтрокаУчредителя.ОрганизацииГдеУчредительПоФИО,
					" (" + НСтр("ru='поиск проведен по ФИО и может быть неточным'") + ")",
					""));
			ОбластиМакета.СколькоЕщеОрганизаций.Параметры.СколькоЕщеОрганизаций = СколькоЕщеОрганизаций;
			ТабличныйДокумент.Вывести(ОбластиМакета.СколькоЕщеОрганизаций);
			
			// Организация 1
			ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
				СтрокаУчредителя.ОрганизацииГдеУчредитель[0]);
			
			Если КоличествоОрганизаций = 2 Тогда
				
				// Организация 2
				ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
					СтрокаУчредителя.ОрганизацииГдеУчредитель[1]);
				
			ИначеЕсли КоличествоОрганизаций > 2 Тогда
				
				// Свернуто
				ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
					ИмяОбластиРасшифровки, КоличествоОрганизаций);
			
				// Развернуто
				СтрокаОбласти = ОбластиРасшифровки.Добавить();
				СтрокаОбласти.ИмяОбласти   = ИмяОбластиРасшифровки;
				СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
				Для НомерСтроки = 2 По КоличествоОрганизаций Цикл
					// Организации 2 - N
					ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, "ЕщеОрганизации", 
						СтрокаУчредителя.ОрганизацииГдеУчредитель[НомерСтроки - 1]);
				КонецЦикла;
				Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
					"Свернуть", ПараметрыВывода.ИмяДокумента, ИмяОбластиРасшифровки);
				ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
				ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
				СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
				ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель); 
	
КонецПроцедуры

Процедура ВывестиРазделПодразделения(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода)

	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	Если НЕ ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПодразделений = ИнформацияОСвязях.Подразделения.Количество();
	Если КоличествоПодразделений = 0 Тогда
		Возврат;
	КонецЕсли;
					
	ОбластиМакета      = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
			
	// Подразделение 1
	СтрокаПодразделения = ИнформацияОСвязях.Подразделения[0];
	ОбластиМакета.Подразделения.Параметры.ОписаниеПодразделения = СтрокаПодразделения.ОписаниеПодразделения;
	ТабличныйДокумент.Вывести(ОбластиМакета.Подразделения);
	
	// Еще подразделения
	
	Если КоличествоПодразделений = 2 Тогда
		
		// Подразделение 2
		СтрокаПодразделения = ИнформацияОСвязях.Подразделения[1];
		ОбластиМакета.ЕщеПодразделения.Параметры.ОписаниеПодразделения = СтрокаПодразделения.ОписаниеПодразделения;
		ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеПодразделения);
		
	ИначеЕсли КоличествоПодразделений > 2 Тогда
		
		// Свернуто
		ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
			"Подразделения", КоличествоПодразделений);
	
		// Развернуто
		СтрокаОбласти = ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "Подразделения";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
		Для НомерСтроки = 2 По КоличествоПодразделений Цикл
			// Подразделения 2 - N
			СтрокаПодразделения = ИнформацияОСвязях.Подразделения[НомерСтроки-1];
			ОбластиМакета.ЕщеПодразделения.Параметры.ОписаниеПодразделения = СтрокаПодразделения.ОписаниеПодразделения;
			ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеПодразделения);
		КонецЦикла;
		Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
			"Свернуть", ПараметрыВывода.ИмяДокумента, "Подразделения");
		ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
		СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель); 
	
КонецПроцедуры

Процедура ВывестиРазделИзмененияВРеестре(ТабличныйДокумент, ИнформацияОСвязях, ПараметрыВывода)

	КоличествоИзменений = ИнформацияОСвязях.ИзмененияВРеестре.Количество();
	Если КоличествоИзменений = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	ЭтоЮридическоеЛицо = ПараметрыВывода.ЭтоЮридическоеЛицо;
	
	// Изменение 1
	СтрокаИзменения  = ИнформацияОСвязях.ИзмененияВРеестре[0];
	ОбластьИзменения = ?(ЭтоЮридическоеЛицо, 
		ОбластиМакета.ИзмененияВРеестре, 
		ОбластиМакета.ИзмененияВРеестреПредприниматель);
	ОбластьИзменения.Параметры.ДатаИзменения = Формат(СтрокаИзменения.ДатаИзменения, "ДЛФ=D");
	ОбластьИзменения.Параметры.ГосударственныйОрган = СтрокаИзменения.ГосударственныйОрган;
	ТабличныйДокумент.Вывести(ОбластьИзменения);
	Если НЕ ПустаяСтрока(СтрокаИзменения.ОписаниеИзменения) Тогда
		ОбластиМакета.ИзмененияВРеестреОписание.Параметры.ОписаниеИзменения = СтрокаИзменения.ОписаниеИзменения;
		ТабличныйДокумент.Вывести(ОбластиМакета.ИзмененияВРеестреОписание);
	КонецЕсли;
	
	// Еще изменения
	
	Если КоличествоИзменений = 2 Тогда
		
		// Изменение 2
		СтрокаИзменения = ИнформацияОСвязях.ИзмененияВРеестре[1];
		ОбластиМакета.ЕщеИзмененияВРеестре.Параметры.ДатаИзменения = Формат(СтрокаИзменения.ДатаИзменения, "ДЛФ=D");
		ОбластиМакета.ЕщеИзмененияВРеестре.Параметры.ГосударственныйОрган = СтрокаИзменения.ГосударственныйОрган;
		ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеИзмененияВРеестре);
		Если НЕ ПустаяСтрока(СтрокаИзменения.ОписаниеИзменения) Тогда
			ОбластиМакета.ИзмененияВРеестреОписание.Параметры.ОписаниеИзменения = СтрокаИзменения.ОписаниеИзменения;
			ТабличныйДокумент.Вывести(ОбластиМакета.ИзмененияВРеестреОписание);
		КонецЕсли;
		
	ИначеЕсли КоличествоИзменений > 2 Тогда
		
		// Свернуто
		ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
			"ИзмененияВРеестре", КоличествоИзменений);
	
		// Развернуто
		СтрокаОбласти = ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = "ИзмененияВРеестре";
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
		Для НомерСтроки = 2 По КоличествоИзменений Цикл
			// Изменения 2 - N
			СтрокаИзменения = ИнформацияОСвязях.ИзмененияВРеестре[НомерСтроки-1];
			ОбластиМакета.ЕщеИзмененияВРеестре.Параметры.ДатаИзменения = Формат(СтрокаИзменения.ДатаИзменения, "ДЛФ=D");
			ОбластиМакета.ЕщеИзмененияВРеестре.Параметры.ГосударственныйОрган = СтрокаИзменения.ГосударственныйОрган;
			ТабличныйДокумент.Вывести(ОбластиМакета.ЕщеИзмененияВРеестре);
			Если НЕ ПустаяСтрока(СтрокаИзменения.ОписаниеИзменения) Тогда
				ОбластиМакета.ИзмененияВРеестреОписание.Параметры.ОписаниеИзменения = СтрокаИзменения.ОписаниеИзменения;
				ТабличныйДокумент.Вывести(ОбластиМакета.ИзмененияВРеестреОписание);
			КонецЕсли;
		КонецЦикла;
		Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
			"Свернуть", ПараметрыВывода.ИмяДокумента, "ИзмененияВРеестре");
		ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
		СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель); 
	
КонецПроцедуры

Процедура ВывестиСтрокуОбОрганизации(ТабличныйДокумент, ОбластиМакета, ИмяОбласти, СтрокаДанных)
	
	СтруктураДанных = НовыеРеквизитыОрганизации();
	// Наименование
	ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаДанных);
	Если ЗначениеЗаполнено(СтруктураДанных.ИНН) Тогда
		ОбластиМакета[ИмяОбласти].Параметры.Заполнить(СтруктураДанных);
		Расшифровка = Новый Структура("Действие,ИНН", "Открыть", СтруктураДанных.ИНН);
		ОбластиМакета[ИмяОбласти].Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета[ИмяОбласти]);
	Иначе
		ОбластиМакета[ИмяОбласти + "БезРасшифровки"].Параметры.Заполнить(СтруктураДанных);
		ТабличныйДокумент.Вывести(ОбластиМакета[ИмяОбласти + "БезРасшифровки"]);
	КонецЕсли;
	// Статус для недействующих
	Если ЗначениеЗаполнено(СтруктураДанных.КодСтатуса) И СтруктураДанных.КодСтатуса <> "001" Тогда
		ОбластиМакета.СтатусОрганизации.Параметры.НаименованиеСтатуса = СтруктураДанных.НаименованиеСтатуса;
		ТабличныйДокумент.Вывести(ОбластиМакета.СтатусОрганизации);
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиСтрокуОбУчредителе(ТабличныйДокумент, ОбластиМакета, ИмяОбласти, СтрокаДанных)
	
	СтруктураДанных = НовыеРеквизитыУчредителя();
	// Наименование, процент и сумма доли
	ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаДанных);
	Если ЗначениеЗаполнено(СтруктураДанных.ПроцентКапитала) Тогда
		СтруктураДанных.ПроцентКапитала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 %'"),
			СтруктураДанных.ПроцентКапитала);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДанных.СуммаКапитала) Тогда
		СтруктураДанных.СуммаКапитала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 руб.'"),
			СтруктураДанных.СуммаКапитала);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДанных.ИНН) Тогда
		ОбластиМакета[ИмяОбласти].Параметры.Заполнить(СтруктураДанных);
		Расшифровка = Новый Структура("Действие,ИНН", "Открыть", СтруктураДанных.ИНН);
		ОбластиМакета[ИмяОбласти].Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета[ИмяОбласти]);
	Иначе
		ОбластиМакета[ИмяОбласти + "БезРасшифровки"].Параметры.Заполнить(СтруктураДанных);
		ТабличныйДокумент.Вывести(ОбластиМакета[ИмяОбласти + "БезРасшифровки"]);
	КонецЕсли;
	// Статус для недействующих
	Если ЗначениеЗаполнено(СтруктураДанных.КодСтатуса) И СтруктураДанных.КодСтатуса <> "001" Тогда
		ОбластиМакета.СтатусОрганизации.Параметры.НаименованиеСтатуса = СтруктураДанных.НаименованиеСтатуса;
		ТабличныйДокумент.Вывести(ОбластиМакета.СтатусОрганизации);
	КонецЕсли;

КонецПроцедуры

Функция НовыеРеквизитыОрганизации()
	
	Результат = Новый Структура;
	Результат.Вставить("НаименованиеОрганизации");
	Результат.Вставить("ИНН");
	Результат.Вставить("КодСтатуса");
	Результат.Вставить("НаименованиеСтатуса");
	Возврат Результат;

КонецФункции 

Функция НовыеРеквизитыУчредителя()
	
	Результат = Новый Структура;
	Результат.Вставить("Учредитель");
	Результат.Вставить("НаименованиеОрганизации");
	Результат.Вставить("ИНН");
	Результат.Вставить("КодСтатуса");
	Результат.Вставить("НаименованиеСтатуса");
	Результат.Вставить("ПроцентКапитала");
	Результат.Вставить("СуммаКапитала");
	Возврат Результат;

КонецФункции 

Процедура ПолучитьСостояниеКонтрагентаПоДаннымЕГРН(ИнформацияОСвязях)

	ИнформацияОСвязях.Вставить("СостояниеПоДаннымЕГРН");
	
	Если НЕ ПроверкаКонтрагентов.ЕстьДоступКВебСервисуФНС() Тогда
		Возврат;
	КонецЕсли;
	
	КПП = ?(ИнформацияОСвязях.Свойство("КПП"), ИнформацияОСвязях.КПП, "");
	
	СвойстваКонтрагентов = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	ПустаяСсылкаКонтрагента = ?(ЗначениеЗаполнено(СвойстваКонтрагентов.Имя),
		Справочники[СвойстваКонтрагентов.Имя].ПустаяСсылка(),
		Неопределено);
		
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИНН",        ИнформацияОСвязях.ИНН);
	ДополнительныеПараметры.Вставить("КПП",        КПП);
	ДополнительныеПараметры.Вставить("Дата",       ТекущаяДатаСеанса());
	ДополнительныеПараметры.Вставить("Ссылка",     ПустаяСсылкаКонтрагента);
	ДополнительныеПараметры.Вставить("Контрагент", ПустаяСсылкаКонтрагента);
	ДополнительныеПараметры.Вставить("СохранятьРезультатСразуПослеПроверки", Ложь);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПроверкаКонтрагентов.ПроверитьКонтрагента(ДополнительныеПараметры, АдресХранилища);
	
	Состояние = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ИнформацияОСвязях.СостояниеПоДаннымЕГРН = Состояние;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеПрограммы

Процедура СформироватьРезультатДанныеПрограммы(ИнформацияОСвязях, ДанныеОтчета, ОписаниеДанныхПрограммы)
	
	Если ОписаниеДанныхПрограммы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПараметрыВывода   = Новый Структура;
	ОбластиМакета     = ВсеОбластиМакета("ДанныеПрограммы");
	ПараметрыВывода.Вставить("ОбластиМакета",      ОбластиМакета);
	ПараметрыВывода.Вставить("ОбластиРасшифровки", НоваяТаблицаОбластиРасшифровки());
	ПараметрыВывода.Вставить("ЭтоЮридическоеЛицо", ДанныеОтчета.ЭтоЮридическоеЛицо);
	ПараметрыВывода.Вставить("ИмяДокумента",       "РезультатДанныеПрограммы");
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Шапка);
	
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.Контрагент) Тогда
		ТабличныйДокумент.Вывести(ОбластиМакета.ШапкаНетДанных);
	Иначе
		ТабличныйДокумент.Вывести(ОбластиМакета.ШапкаКомментарий);
		ВывестиДанныеПрограммы(ТабличныйДокумент, ИнформацияОСвязях, ОписаниеДанныхПрограммы, ПараметрыВывода);
	КонецЕсли;
	
	ПараметрыВывода.ОбластиРасшифровки.ЗаполнитьЗначения("РезультатДанныеПрограммы", "ИмяДокумента");
	Для каждого СтрокаТаблицы Из ПараметрыВывода.ОбластиРасшифровки Цикл
		НоваяСтрока = ДанныеОтчета.ОбластиРасшифровки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	ДанныеОтчета.Вставить("РезультатДанныеПрограммы", ТабличныйДокумент);
	ДанныеОтчета.Вставить("ИмяФайлаДанныеПрограммы",  
		СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Досье %1 - данные программы'"),
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
					ИнформацияОСвязях.НаименованиеСокращенное, ""))));

КонецПроцедуры

Процедура ВывестиДанныеПрограммы(ТабличныйДокумент, ИнформацияОСвязях, ОписаниеДанныхПрограммы, ПараметрыВывода)

	Для каждого СтрокаОписания Из ОписаниеДанныхПрограммы Цикл
	
		Если СтрокаОписания.ЭтоТаблица Тогда
			ВывестиТаблицуДанныхПрограммы(ТабличныйДокумент, ИнформацияОСвязях, СтрокаОписания, ПараметрыВывода);
		Иначе
			ВывестиРеквизитДанныхПрограммы(ТабличныйДокумент, ИнформацияОСвязях, СтрокаОписания, ПараметрыВывода);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ВывестиТаблицуДанныхПрограммы(ТабличныйДокумент, ИнформацияОСвязях, СтрокаОписания, ПараметрыВывода)
	
	ТаблицаДанных   = ИнформацияОСвязях.ДанныеПрограммы[СтрокаОписания.ИмяДанных];
	КоличествоСтрок = ТаблицаДанных.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиМакета      = ПараметрыВывода.ОбластиМакета;
	ОбластиРасшифровки = ПараметрыВывода.ОбластиРасшифровки;
	ОбластьОписание    = ОбластиМакета.РеквизитОписание;
	
	// Строка 1
	СтрокаДанных    = ТаблицаДанных[0];
	ЕстьРасшифровка = ЗначениеЗаполнено(СтрокаДанных.Ссылка);
	ОбластьСтроки   = ?(ЕстьРасшифровка, ОбластиМакета.Реквизит, ОбластиМакета.РеквизитБезРасшифровки);
	ОбластьСтроки.Параметры.Заполнить(СтрокаОписания);
	ОбластьСтроки.Параметры.Заполнить(СтрокаДанных);
	ТабличныйДокумент.Вывести(ОбластьСтроки);
	Если ЗначениеЗаполнено(СтрокаДанных.Описание) Тогда
		ОбластьОписание.Параметры.Заполнить(СтрокаДанных);
		ТабличныйДокумент.Вывести(ОбластьОписание);
	КонецЕсли;
	
	// Еще данные
	
	Если КоличествоСтрок = 2 Тогда
		
		// Строка 2
		СтрокаДанных    = ТаблицаДанных[1];
		ЕстьРасшифровка = ЗначениеЗаполнено(СтрокаДанных.Ссылка);
		ОбластьСтроки   = ?(ЕстьРасшифровка, ОбластиМакета.ЕщеРеквизит, ОбластиМакета.ЕщеРеквизитБезРасшифровки);
		ОбластьСтроки.Параметры.Заполнить(СтрокаОписания);
		ОбластьСтроки.Параметры.Заполнить(СтрокаДанных);
		ТабличныйДокумент.Вывести(ОбластьСтроки);
		Если ЗначениеЗаполнено(СтрокаДанных.Описание) Тогда
			ОбластьОписание.Параметры.Заполнить(СтрокаДанных);
			ТабличныйДокумент.Вывести(ОбластьОписание);
		КонецЕсли;
		
	ИначеЕсли КоличествоСтрок > 2 Тогда
		
		// Свернуто
		ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ПараметрыВывода.ИмяДокумента, 
			СтрокаОписания.ИмяДанных, КоличествоСтрок);
	
		// Развернуто
		СтрокаОбласти = ОбластиРасшифровки.Добавить();
		СтрокаОбласти.ИмяОбласти   = СтрокаОписания.ИмяДанных;
		СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
		Для НомерСтроки = 2 По КоличествоСтрок Цикл
			// Строки 2 - N
			СтрокаДанных    = ТаблицаДанных[НомерСтроки - 1];
			ЕстьРасшифровка = ЗначениеЗаполнено(СтрокаДанных.Ссылка);
			ОбластьСтроки   = ?(ЕстьРасшифровка, ОбластиМакета.ЕщеРеквизит, ОбластиМакета.ЕщеРеквизитБезРасшифровки);
			ОбластьСтроки.Параметры.Заполнить(СтрокаОписания);
			ОбластьСтроки.Параметры.Заполнить(СтрокаДанных);
			ТабличныйДокумент.Вывести(ОбластьСтроки);
			Если ЗначениеЗаполнено(СтрокаДанных.Описание) Тогда
				ОбластьОписание.Параметры.Заполнить(СтрокаДанных);
				ТабличныйДокумент.Вывести(ОбластьОписание);
			КонецЕсли;
		КонецЦикла;
		
		Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
			"Свернуть", ПараметрыВывода.ИмяДокумента, СтрокаОписания.ИмяДанных);
		ОбластиМакета.Свернуть.Параметры.Расшифровка = Расшифровка;
		ТабличныйДокумент.Вывести(ОбластиМакета.Свернуть);
		СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель); 
	
КонецПроцедуры

Процедура ВывестиРеквизитДанныхПрограммы(ТабличныйДокумент, ИнформацияОСвязях, СтрокаОписания, ПараметрыВывода)
	
	ЗначениеРеквизита = ИнформацияОСвязях.ДанныеПрограммы[СтрокаОписания.ИмяДанных];
	Если ТипЗнч(ЗначениеРеквизита) = Тип("Структура") 
		И (НЕ ЗначениеРеквизита.Свойство("Представление") 
		ИЛИ НЕ ЗначениеЗаполнено(ЗначениеРеквизита.Представление)) Тогда
	    Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
	    Возврат;
	КонецЕсли;
	
	ОбластиМакета   = ПараметрыВывода.ОбластиМакета;
	ЕстьРасшифровка = ТипЗнч(ЗначениеРеквизита) = Тип("Структура") 
		И ЗначениеРеквизита.Свойство("Ссылка") 
		И ЗначениеЗаполнено(ЗначениеРеквизита.Ссылка);
	ОбластьСтроки     = ?(ЕстьРасшифровка, ОбластиМакета.Реквизит, ОбластиМакета.РеквизитБезРасшифровки);
	ОбластьОписание   = ОбластиМакета.РеквизитОписание;
	ОбластьПримечание = ОбластиМакета.РеквизитПримечание;
	
	ОбластьСтроки.Параметры.Заполнить(СтрокаОписания);
	Если ТипЗнч(ЗначениеРеквизита) = Тип("Структура") Тогда
		ОбластьСтроки.Параметры.Заполнить(ЗначениеРеквизита);
		ТабличныйДокумент.Вывести(ОбластьСтроки);
		Если ЗначениеРеквизита.Свойство("ПримечаниеПредставление")
			И ЗначениеЗаполнено(ЗначениеРеквизита.ПримечаниеПредставление) Тогда
			ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, 3, ТабличныйДокумент.ВысотаТаблицы, 3).ЦветФона =
				ЦветаСтиля.ЦветФонаНекорректногоКонтрагентаВДокументе;
			ОбластьПримечание.Параметры.Примечание = ЗначениеРеквизита.ПримечаниеПредставление;
			ТабличныйДокумент.Вывести(ОбластьПримечание);
		КонецЕсли;
		Если ЗначениеРеквизита.Свойство("Описание") 
			И ЗначениеЗаполнено(ЗначениеРеквизита.Описание) Тогда
			ОбластьОписание.Параметры.Заполнить(ЗначениеРеквизита);
			ТабличныйДокумент.Вывести(ОбластьОписание);
			Если ЗначениеРеквизита.Свойство("ПримечаниеОписание")
				И ЗначениеЗаполнено(ЗначениеРеквизита.ПримечаниеОписание) Тогда
				ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, 3, ТабличныйДокумент.ВысотаТаблицы, 3).ЦветФона =
					ЦветаСтиля.ЦветФонаНекорректногоКонтрагентаВДокументе;
				ОбластьПримечание.Параметры.Примечание = ЗначениеРеквизита.ПримечаниеОписание;
				ТабличныйДокумент.Вывести(ОбластьПримечание);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбластьСтроки.Параметры.Представление = ЗначениеРеквизита;
		ТабличныйДокумент.Вывести(ОбластьСтроки);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель); 
	
КонецПроцедуры

Функция НоваяТаблицаОписаниеДанныхПрограммы() Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИмяДанных",    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЭтоТаблица",   Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Заголовок",    Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаДанныеПрограммы() Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка",        Справочники.ТипВсеСсылки());
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Описание",      Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции

Функция НовыеДанныеПрограммы() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Ссылка");
	Результат.Вставить("Представление");
	Результат.Вставить("Описание");
	Результат.Вставить("ПримечаниеПредставление");
	Результат.Вставить("ПримечаниеОписание");
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область БухгалтерскаяОтчетность

Процедура СформироватьРезультатБухгалтерскаяОтчетность(ИнформацияОСвязях, ДанныеОтчета)

	Если НЕ ДанныеОтчета.ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПараметрыВывода   = Новый Структура;
	ПараметрыВывода.Вставить("ОбластиМакета",      ВсеОбластиМакета("БухгалтерскаяОтчетность"));
	ПараметрыВывода.Вставить("ОбластиРасшифровки", НоваяТаблицаОбластиРасшифровки());
	ПараметрыВывода.Вставить("ЭтоЮридическоеЛицо", ДанныеОтчета.ЭтоЮридическоеЛицо);
	
	ОбластиМакета  = ПараметрыВывода.ОбластиМакета;
	
	Если ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
		
		ТабличныйДокумент.Вывести(ОбластиМакета.Шапка);
		ТабличныйДокумент.Вывести(ОбластиМакета.ШапкаНетОтчетности);
		
	Иначе
		
		СтруктураГодов = ПериодыБухгалтерскойОтчетности();
		ТипОтчетности  = "";
		Для каждого СтрокаТаблицы Из ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности Цикл
			
			Если НЕ ПустаяСтрока(ТипОтчетности) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			Если СтрокаТаблицы.ТипОтчетности <> ТипОтчетности Тогда
				ТипОтчетности = СтрокаТаблицы.ТипОтчетности;
				Если ТипОтчетности = "2" Тогда
					ОбластьШапка = ОбластиМакета.Шапка;
					ОбластьБалансШапка = ОбластиМакета.БалансШапка;
					ОбластьБаланс      = ОбластиМакета.Баланс;
					ОбластьПрибылиУбыткиШапка = ОбластиМакета.ПрибылиУбыткиШапка;
					ОбластьПрибылиУбытки      = ОбластиМакета.ПрибылиУбытки;
					ОбластьИспользованиеСредствШапка = ОбластиМакета.ИспользованиеСредствШапка;
					ОбластьИспользованиеСредств      = ОбластиМакета.ИспользованиеСредств;
				ИначеЕсли ТипОтчетности = "1" Тогда
					ОбластьШапка = ОбластиМакета.ШапкаМП;
					ОбластьБалансШапка = ОбластиМакета.БалансМПШапка;
					ОбластьБаланс      = ОбластиМакета.БалансМП;
					ОбластьПрибылиУбыткиШапка = ОбластиМакета.ПрибылиУбыткиМПШапка;
					ОбластьПрибылиУбытки      = ОбластиМакета.ПрибылиУбыткиМП;
				Иначе //"0"
					ОбластьШапка = ОбластиМакета.ШапкаНКО;
					ОбластьБалансШапка = ОбластиМакета.БалансНКОШапка;
					ОбластьБаланс      = ОбластиМакета.БалансНКО;
					ОбластьИспользованиеСредствШапка = ОбластиМакета.ИспользованиеСредствНКОШапка;
					ОбластьИспользованиеСредств      = ОбластиМакета.ИспользованиеСредствНКО;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьШапка);
				ТабличныйДокумент.Вывести(ОбластиМакета.ШапкаКомментарий);
			КонецЕсли;
			
			// Баланс
			ОбластьБалансШапка.Параметры.Заполнить(СтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьБалансШапка);
			ТабличныйДокумент.НачатьГруппуСтрок(, Истина);
			ОбластьБаланс.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьБаланс.Параметры.Заполнить(СтруктураГодов);
			ОбластьБаланс.Параметры.Заполнить(СтрокаТаблицы.Показатели);
			ТабличныйДокумент.Вывести(ОбластьБаланс);
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
			// Отчет о прибылях и убытках
			Если СтрокаТаблицы.ЕстьПрибылиУбытки Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьПрибылиУбыткиШапка.Параметры.Заполнить(СтрокаТаблицы);
				ТабличныйДокумент.Вывести(ОбластьПрибылиУбыткиШапка);
				ТабличныйДокумент.НачатьГруппуСтрок(, Истина);
				ОбластьПрибылиУбытки.Параметры.Заполнить(СтрокаТаблицы);
				ОбластьПрибылиУбытки.Параметры.Заполнить(СтруктураГодов);
				ОбластьПрибылиУбытки.Параметры.Заполнить(СтрокаТаблицы.Показатели);
				ТабличныйДокумент.Вывести(ОбластьПрибылиУбытки);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			// Отчет об изменении капитала
			Если СтрокаТаблицы.ЕстьИзменениеКапитала Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластиМакета.ИзменениеКапиталаШапка.Параметры.Заполнить(СтрокаТаблицы);
				ТабличныйДокумент.Вывести(ОбластиМакета.ИзменениеКапиталаШапка);
				ТабличныйДокумент.НачатьГруппуСтрок(, Истина);
				ОбластиМакета.ИзменениеКапитала.Параметры.Заполнить(СтрокаТаблицы);
				ОбластиМакета.ИзменениеКапитала.Параметры.Заполнить(СтруктураГодов);
				ОбластиМакета.ИзменениеКапитала.Параметры.Заполнить(СтрокаТаблицы.Показатели);
				ТабличныйДокумент.Вывести(ОбластиМакета.ИзменениеКапитала);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			// Отчет о движении денежных средств
			Если СтрокаТаблицы.ЕстьДвижениеДенег Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластиМакета.ДвижениеДенегШапка.Параметры.Заполнить(СтрокаТаблицы);
				ТабличныйДокумент.Вывести(ОбластиМакета.ДвижениеДенегШапка);
				ТабличныйДокумент.НачатьГруппуСтрок(, Истина);
				ОбластиМакета.ДвижениеДенег.Параметры.Заполнить(СтрокаТаблицы);
				ОбластиМакета.ДвижениеДенег.Параметры.Заполнить(СтруктураГодов);
				ОбластиМакета.ДвижениеДенег.Параметры.Заполнить(СтрокаТаблицы.Показатели);
				ТабличныйДокумент.Вывести(ОбластиМакета.ДвижениеДенег);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			// Отчет о целевом использовании средств
			Если СтрокаТаблицы.ЕстьИспользованиеСредств Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьИспользованиеСредствШапка.Параметры.Заполнить(СтрокаТаблицы);
				ТабличныйДокумент.Вывести(ОбластьИспользованиеСредствШапка);
				ТабличныйДокумент.НачатьГруппуСтрок(, Истина);
				ОбластьИспользованиеСредств.Параметры.Заполнить(СтрокаТаблицы);
				ОбластьИспользованиеСредств.Параметры.Заполнить(СтруктураГодов);
				ОбластьИспользованиеСредств.Параметры.Заполнить(СтрокаТаблицы.Показатели);
				ТабличныйДокумент.Вывести(ОбластьИспользованиеСредств);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			// Расчет чистых активов
			Если СтрокаТаблицы.ЕстьРасчетЧистыхАктивов Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластиМакета.ЧистыеАктивыШапка.Параметры.Заполнить(СтрокаТаблицы);
				ТабличныйДокумент.Вывести(ОбластиМакета.ЧистыеАктивыШапка);
				ТабличныйДокумент.НачатьГруппуСтрок(, Истина);
				ОбластиМакета.ЧистыеАктивы.Параметры.Заполнить(СтрокаТаблицы);
				ОбластиМакета.ЧистыеАктивы.Параметры.Заполнить(СтруктураГодов);
				ОбластиМакета.ЧистыеАктивы.Параметры.Заполнить(СтрокаТаблицы.Показатели);
				ТабличныйДокумент.Вывести(ОбластиМакета.ЧистыеАктивы);
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыВывода.ОбластиРасшифровки.ЗаполнитьЗначения("РезультатБухгалтерскаяОтчетность", "ИмяДокумента");
		Для каждого СтрокаТаблицы Из ПараметрыВывода.ОбластиРасшифровки Цикл
			НоваяСтрока = ДанныеОтчета.ОбластиРасшифровки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеОтчета.Вставить("РезультатБухгалтерскаяОтчетность", ТабличныйДокумент);
	ДанныеОтчета.Вставить("ИмяФайлаБухгалтерскаяОтчетность", 
		СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Досье %1 - бухгалтерская отчетность'"),
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
					ИнформацияОСвязях.НаименованиеСокращенное, ""))));

КонецПроцедуры

Функция НоваяТаблицаДанныеБухгалтерскойОтчетности()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ТипОтчетности",    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВалютаОтчетности", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Показатели");      // Структура
	Результат.Колонки.Добавить("ЕстьПрибылиУбытки",        Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьИзменениеКапитала",    Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьДвижениеДенег",        Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьИспользованиеСредств", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьРасчетЧистыхАктивов",  Новый ОписаниеТипов("Булево"));
	Возврат Результат;

КонецФункции 

Процедура ПодготовитьДанныеБухгалтерскойОтчетности(ИнформацияОСвязях)

	ИнформацияОСвязях.Вставить("ДанныеБухгалтерскойОтчетности", НоваяТаблицаДанныеБухгалтерскойОтчетности());
	ИнформацияОСвязях.Вставить("ЕстьОтчетностьГод_1", Ложь);
	ИнформацияОСвязях.Вставить("ЕстьОтчетностьГод_2", Ложь);
	ИнформацияОСвязях.Вставить("ЕстьОтчетностьГод_3", Ложь);
	Если ИнформацияОСвязях.БухгалтерскаяОтчетность.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Данные за 3 года
	СтруктураГодов  = ПериодыБухгалтерскойОтчетности();
	ОтчетностьГод_1 = ИнформацияОСвязях.БухгалтерскаяОтчетность.Найти(Число(СтруктураГодов.Год_1), "Год");
	ИнформацияОСвязях.ЕстьОтчетностьГод_1 = ОтчетностьГод_1 <> Неопределено;
	ОтчетностьГод_2 = ИнформацияОСвязях.БухгалтерскаяОтчетность.Найти(Число(СтруктураГодов.Год_2), "Год");
	ИнформацияОСвязях.ЕстьОтчетностьГод_2 = ОтчетностьГод_2 <> Неопределено;
	ОтчетностьГод_3 = ИнформацияОСвязях.БухгалтерскаяОтчетность.Найти(Число(СтруктураГодов.Год_3), "Год");
	ИнформацияОСвязях.ЕстьОтчетностьГод_3 = ОтчетностьГод_3 <> Неопределено;
	
	Если ИнформацияОСвязях.ЕстьОтчетностьГод_1 Тогда
	
		НоваяСтрока = ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности.Добавить();
		НоваяСтрока.ТипОтчетности    = ОтчетностьГод_1.ТипОтчетности;
		НоваяСтрока.ВалютаОтчетности = ВалютаБухгалтерскойОтчетности(ОтчетностьГод_1.КодВалютыОтчетности);
		Показатели = Новый Структура;
		Для каждого СтрокаТаблицы Из ОтчетностьГод_1.Показатели Цикл
			Если Лев(СтрокаТаблицы.Код, 1) = "3" Тогда 
				// Для отчета об изменении капитала используем специальный формат имен показателей.
				ИмяПоказателя = "П" + СтрокаТаблицы.Код + "_1";
			Иначе
				ИмяПоказателя = "П" + Лев(СтрокаТаблицы.Код, 4) + ?(Прав(СтрокаТаблицы.Код, 1) = "3", "_1", "_2");
			КонецЕсли;
			Показатели.Вставить(ИмяПоказателя, СтрокаТаблицы.Значение);
		КонецЦикла;
		НоваяСтрока.Показатели = Показатели;
	КонецЕсли;

	Если ИнформацияОСвязях.ЕстьОтчетностьГод_2 Тогда
		
		Если НЕ ИнформацияОСвязях.ЕстьОтчетностьГод_1 
			ИЛИ ОтчетностьГод_2.ТипОтчетности <> ОтчетностьГод_1.ТипОтчетности 
			ИЛИ ОтчетностьГод_2.КодВалютыОтчетности <> ОтчетностьГод_2.КодВалютыОтчетности Тогда
			НоваяСтрока = ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности.Добавить();
			НоваяСтрока.ТипОтчетности    = ОтчетностьГод_2.ТипОтчетности;
			НоваяСтрока.ВалютаОтчетности = ВалютаБухгалтерскойОтчетности(ОтчетностьГод_2.КодВалютыОтчетности);
			Показатели = Новый Структура;
			ЗаполнятьПоказатели_2 = Истина;
		Иначе
			ЗаполнятьПоказатели_2 = Ложь;
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ОтчетностьГод_2.Показатели Цикл
			Если ИнформацияОСвязях.ЕстьОтчетностьГод_1
				И НЕ ЗаполнятьПоказатели_2
				И Лев(СтрокаТаблицы.Код, 1) <> "3" // ОИК из Росстата содержит данные только за текущий год.
				И Лев(СтрокаТаблицы.Код, 1) <> "4" // ОДДС из Росстата содержит данные только за текущий год.
				И Прав(СтрокаТаблицы.Код, 1) = "3" Тогда
				Продолжить;
			Иначе
				Если Лев(СтрокаТаблицы.Код, 1) = "3" Тогда 
					// Для отчета об изменении капитала используем специальный формат имен показателей.
					ИмяПоказателя = "П" + СтрокаТаблицы.Код + "_2";
				Иначе
					ИмяПоказателя = "П" + Лев(СтрокаТаблицы.Код, 4) + ?(Прав(СтрокаТаблицы.Код, 1) = "3", "_2", "_3");
				КонецЕсли;
				Показатели.Вставить(ИмяПоказателя, СтрокаТаблицы.Значение);
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока.Показатели = Показатели;
	
	КонецЕсли;
	
	Если ИнформацияОСвязях.ЕстьОтчетностьГод_3 Тогда
		
		Если НЕ ИнформацияОСвязях.ЕстьОтчетностьГод_2 
			ИЛИ ОтчетностьГод_3.ТипОтчетности <> ОтчетностьГод_2.ТипОтчетности 
			ИЛИ ОтчетностьГод_3.КодВалютыОтчетности <> ОтчетностьГод_2.КодВалютыОтчетности Тогда
			НоваяСтрока = ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности.Добавить();
			НоваяСтрока.ТипОтчетности    = ОтчетностьГод_3.ТипОтчетности;
			НоваяСтрока.ВалютаОтчетности = ВалютаБухгалтерскойОтчетности(ОтчетностьГод_3.КодВалютыОтчетности);
			Показатели = Новый Структура;
			ЗаполнятьПоказатели_3 = Истина;
		Иначе
			ЗаполнятьПоказатели_3 = Ложь;
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ОтчетностьГод_3.Показатели Цикл
			Если ИнформацияОСвязях.ЕстьОтчетностьГод_2
				И НЕ ЗаполнятьПоказатели_3
				И Лев(СтрокаТаблицы.Код, 1) <> "3"       // ОИК из Росстата содержит данные только за текущий год.
				И Лев(СтрокаТаблицы.Код, 1) <> "4" Тогда // ОДДС из Росстата содержит данные только за текущий год.
				Продолжить;
			Иначе
				Если Лев(СтрокаТаблицы.Код, 1) = "3" Тогда 
					// Для отчета об изменении капитала используем специальный формат имен показателей.
					ИмяПоказателя = "П" + СтрокаТаблицы.Код + "_3";
				Иначе
					ИмяПоказателя = "П" + Лев(СтрокаТаблицы.Код, 4) + "_3";
				КонецЕсли;
				Показатели.Вставить(ИмяПоказателя, СтрокаТаблицы.Значение);
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока.Показатели = Показатели;
	
	КонецЕсли;
	
	// Запоминаем наличие различных форм отчетности.
	Для каждого СтрокаТаблицы Из ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности Цикл
		СтрокаТаблицы.ЕстьПрибылиУбытки = СтрокаТаблицы.ТипОтчетности <> "0";
		СтрокаТаблицы.ЕстьИзменениеКапитала = СтрокаТаблицы.ТипОтчетности = "2"
			И ЕстьДанныеДляФормыОтчетности(СтрокаТаблицы.Показатели, "3");
		СтрокаТаблицы.ЕстьДвижениеДенег = СтрокаТаблицы.ТипОтчетности = "2"
			И ЕстьДанныеДляФормыОтчетности(СтрокаТаблицы.Показатели, "4");
		СтрокаТаблицы.ЕстьИспользованиеСредств = СтрокаТаблицы.ТипОтчетности = "0"
			ИЛИ (СтрокаТаблицы.ТипОтчетности = "2"
			И ЕстьДанныеДляФормыОтчетности(СтрокаТаблицы.Показатели, "6"));
		СтрокаТаблицы.ЕстьРасчетЧистыхАктивов = СтрокаТаблицы.ТипОтчетности = "2";
	КонецЦикла;
	
	ДобавитьДанныеОбычнойОтчетности(ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности);

	ДобавитьДанныеОтчетностиМП(ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности);
	
	ДобавитьДанныеОтчетностиНКО(ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности);
	
КонецПроцедуры

Функция ЕстьДанныеДляФормыОтчетности(Показатели, КодФормы)

	Для каждого Показатель Из Показатели Цикл
		Если Сред(Показатель.Ключ, 2, 1) = КодФормы 
			И Показатель.Значение <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;

КонецФункции

Процедура ДобавитьДанныеОбычнойОтчетности(ДанныеБухгалтерскойОтчетности)
	
	// Ключ - код для вывода в отчет, значение - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	КодыОтчетности = Новый Соответствие;
	КодыОтчетности.Вставить("91", "1110;1120;1130;1140;1150;1160;1170;1180;1190;1210;1220;1230;1240;1250;1260;");
	КодыОтчетности.Вставить("92", "1410;1420;1430;1450;1510;1520;1540;1550");
	КодыОтчетности.Вставить("93", "1110;1120;1130;1140;1150;1160;1170;1180;1190;1210;1220;1230;1240;1250;1260;"
		+ "-1410;-1420;-1430;-1450;-1510;-1520;-1540;-1550");
	Для каждого КодОтчетности Из КодыОтчетности Цикл
		КодыОтчетности[КодОтчетности.Ключ] = СтрРазделить(КодОтчетности.Значение, ";", Ложь);
	КонецЦикла;
	НомераГодов = СтрРазделить("1;2;3",";", Ложь);
	
	Для каждого СтрокаТаблицы Из ДанныеБухгалтерскойОтчетности Цикл
		
		Если СтрокаТаблицы.ТипОтчетности <> "2" Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого КодОтчетности Из КодыОтчетности Цикл
			ЗначениеПоказателяКод = "";
			Для каждого НомерГода Из НомераГодов Цикл
				ЕстьДанные = СтрокаТаблицы.Показатели.Свойство("П1110_" + НомерГода);
				Если НЕ ЕстьДанные Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПоказателя = 0;
				Для каждого КодСтроки Из КодОтчетности.Значение Цикл
					Множитель = ?(Лев(КодСтроки, 1) = "-", -1, 1);
					ИмяПоказателя = "П" + СтрЗаменить(КодСтроки, "-", "") + "_" + НомерГода;
					ЗначениеПоказателя = ЗначениеПоказателя + Множитель * СтрокаТаблицы.Показатели[ИмяПоказателя];
				КонецЦикла;
				СтрокаТаблицы.Показатели.Вставить("П" + КодОтчетности.Ключ + "_" + НомерГода, ЗначениеПоказателя);
			КонецЦикла;
			Если ПустаяСтрока(ЗначениеПоказателяКод) Тогда
				ЗначениеПоказателяКод = КодОтчетности.Значение[0];
			КонецЕсли;
			СтрокаТаблицы.Показатели.Вставить("Код" + КодОтчетности.Ключ, ЗначениеПоказателяКод);
		КонецЦикла;
		
		Если СтрокаТаблицы.ЕстьДвижениеДенег Тогда
			// Сальдо на начало и конец года для отчета о движении денег берем из баланса.
			Если СтрокаТаблицы.Показатели.Свойство("П4100_1") Тогда
				Если СтрокаТаблицы.Показатели.Свойство("П1250_1") Тогда
					СтрокаТаблицы.Показатели.Вставить("П4500_1", СтрокаТаблицы.Показатели.П1250_1);
				КонецЕсли;
				Если СтрокаТаблицы.Показатели.Свойство("П1250_2") Тогда
					СтрокаТаблицы.Показатели.Вставить("П4450_1", СтрокаТаблицы.Показатели.П1250_2);
				КонецЕсли;
			КонецЕсли;
			Если СтрокаТаблицы.Показатели.Свойство("П4100_2") Тогда
				Если СтрокаТаблицы.Показатели.Свойство("П1250_2") Тогда
					СтрокаТаблицы.Показатели.Вставить("П4500_2", СтрокаТаблицы.Показатели.П1250_2);
				КонецЕсли;
				Если СтрокаТаблицы.Показатели.Свойство("П1250_3") Тогда
					СтрокаТаблицы.Показатели.Вставить("П4450_2", СтрокаТаблицы.Показатели.П1250_3);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеОтчетностиМП(ДанныеБухгалтерскойОтчетности)

	// Ключ - код для вывода в отчет, значение - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	КодыМП = Новый Соответствие;
	КодыМП.Вставить("11", "1140;1150;1160");
	КодыМП.Вставить("12", "1110;1120;1130;1170;1180;1190");
	КодыМП.Вставить("13", "1220;1230;1240;1260");
	КодыМП.Вставить("14", "1300;1310;1320;1340;1350;1360;1370");
	КодыМП.Вставить("15", "1420;1430;1450");
	КодыМП.Вставить("16", "1530;1540;1550");
	КодыМП.Вставить("21", "2120;2210;2220");
	КодыМП.Вставить("22", "2310;2320;2340");
	КодыМП.Вставить("23", "2410;2421;2430;2450;2460");
	Для каждого КодМП Из КодыМП Цикл
		КодыМП[КодМП.Ключ] = СтрРазделить(КодМП.Значение, ";", Ложь);
	КонецЦикла;
	НомераГодов = СтрРазделить("1;2;3",";", Ложь);
	
	Для каждого СтрокаТаблицы Из ДанныеБухгалтерскойОтчетности Цикл
		
		Если СтрокаТаблицы.ТипОтчетности <> "1" Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого КодМП Из КодыМП Цикл
			ЗначениеПоказателяКод = "";
			Для каждого НомерГода Из НомераГодов Цикл
				ЕстьДанные = СтрокаТаблицы.Показатели.Свойство("П1110_" + НомерГода);
				Если НЕ ЕстьДанные Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПоказателя = 0;
				Для каждого КодСтроки Из КодМП.Значение Цикл
					Если ЗначениеПоказателя < СтрокаТаблицы.Показатели["П" + КодСтроки + "_" + НомерГода] Тогда
						ЗначениеПоказателя    = СтрокаТаблицы.Показатели["П" + КодСтроки + "_" + НомерГода];
						ЗначениеПоказателяКод = КодСтроки;
					КонецЕсли;
				КонецЦикла;
				СтрокаТаблицы.Показатели.Вставить("П" + КодМП.Ключ + "_" + НомерГода, ЗначениеПоказателя);
			КонецЦикла;
			Если ПустаяСтрока(ЗначениеПоказателяКод) Тогда
				ЗначениеПоказателяКод = КодМП.Значение[0];
			КонецЕсли;
			СтрокаТаблицы.Показатели.Вставить("Код" + КодМП.Ключ, ЗначениеПоказателяКод);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеОтчетностиНКО(ДанныеБухгалтерскойОтчетности)

	// Ключ - код для вывода в отчет, значение - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	КодыНКО = Новый Соответствие;
	КодыНКО.Вставить("11", "1140;1150;1160");
	КодыНКО.Вставить("12", "1110;1120;1130;1170;1180;1190");
	КодыНКО.Вставить("13", "1210;1220;1230;1240;1260");
	КодыНКО.Вставить("14", "1310;1320;1350");
	КодыНКО.Вставить("15", "1360;1370");
	КодыНКО.Вставить("16", "1410;1420;1430;1450");
	КодыНКО.Вставить("17", "1510;1530;1540;1550");
	КодыНКО.Вставить("61", "6210;6215;6220;6230");
	Для каждого КодНКО Из КодыНКО Цикл
		КодыНКО[КодНКО.Ключ] = СтрРазделить(КодНКО.Значение, ";", Ложь);
	КонецЦикла;
	НомераГодов = СтрРазделить("1;2;3", ";", Ложь);
	
	Для каждого СтрокаТаблицы Из ДанныеБухгалтерскойОтчетности Цикл
		
		Если СтрокаТаблицы.ТипОтчетности <> "0" Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого КодНКО Из КодыНКО Цикл
			ЗначениеПоказателяКод = "";
			Для каждого НомерГода Из НомераГодов Цикл
				ЕстьДанные = СтрокаТаблицы.Показатели.Свойство("П1110_" + НомерГода);
				Если НЕ ЕстьДанные Тогда
					Продолжить;
				ИначеЕсли КодНКО.Ключ = "61" 
					И (НомерГода = "2" ИЛИ НомерГода = "3") Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПоказателя = 0;
				Для каждого КодСтроки Из КодНКО.Значение Цикл
					Если ЗначениеПоказателя < СтрокаТаблицы.Показатели["П" + КодСтроки + "_" + НомерГода] Тогда
						ЗначениеПоказателя    = СтрокаТаблицы.Показатели["П" + КодСтроки + "_" + НомерГода];
						ЗначениеПоказателяКод = КодСтроки;
					КонецЕсли;
				КонецЦикла;
				СтрокаТаблицы.Показатели.Вставить("П" + КодНКО.Ключ + "_" + НомерГода, ЗначениеПоказателя);
			КонецЦикла;
			Если ПустаяСтрока(ЗначениеПоказателяКод) Тогда
				ЗначениеПоказателяКод = КодНКО.Значение[0];
			КонецЕсли;
			СтрокаТаблицы.Показатели.Вставить("Код" + КодНКО.Ключ, ЗначениеПоказателяКод);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВалютаБухгалтерскойОтчетности(КодВалютыОтчетности)

	Если КодВалютыОтчетности = "383" Тогда
		Возврат НСтр("ru='В рублях'");
	ИначеЕсли КодВалютыОтчетности = "384" Тогда
		Возврат НСтр("ru='В тысячах рублей'");
	Иначе // "385"
		Возврат НСтр("ru='В миллионах рублей'");
	КонецЕсли;

КонецФункции 
 
#КонецОбласти

#Область АнализОтчетности

Процедура СформироватьРезультатАнализОтчетности(ИнформацияОСвязях, ДанныеОтчета)

	Если НЕ ДанныеОтчета.ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПараметрыВывода   = Новый Структура;
	ПараметрыВывода.Вставить("ОбластиМакета",      ВсеОбластиМакета("АнализОтчетности"));
	ПараметрыВывода.Вставить("ОбластиРасшифровки", НоваяТаблицаОбластиРасшифровки());
	ПараметрыВывода.Вставить("ЭтоЮридическоеЛицо", ДанныеОтчета.ЭтоЮридическоеЛицо);
	
	ОбластиМакета  = ПараметрыВывода.ОбластиМакета;
	ТабличныйДокумент.Вывести(ОбластиМакета.Шапка);
	
	Если ИнформацияОСвязях.АнализОтчетности.Количество() = 0 Тогда
		
		Если ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
			ТабличныйДокумент.Вывести(ОбластиМакета.АнализНеПроведенНетОтчетности);
		ИначеЕсли ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности[0].ТипОтчетности = "0" Тогда
			ТабличныйДокумент.Вывести(ОбластиМакета.АнализНеПроведенОтчетностьНКО);
		Иначе
			ТабличныйДокумент.Вывести(ОбластиМакета.АнализНеПроведенПрочее);
		КонецЕсли;
		
	Иначе
		
		СтруктураГодов = ПериодыБухгалтерскойОтчетности();
		ИменаПоказателейСКартинками = "Продажи;Прибыль;Деньги;Запасы;ОС;Дебиторы;Кредиторы;Кредиты;ЧистыеАктивы";
		Для каждого СтрокаТаблицы Из ИнформацияОСвязях.АнализОтчетности Цикл
			ОбластиМакета.Показатели.Параметры.Заполнить(СтрокаТаблицы);
			ОбластиМакета.Показатели.Параметры.Заполнить(СтруктураГодов);
			ОбластиМакета.Показатели.Параметры.Заполнить(СтрокаТаблицы.Показатели);
			УстановитьКартинкиАнализаОтчетности(
				ОбластиМакета.Показатели, СтрокаТаблицы.Показатели, ИменаПоказателейСКартинками, "1", "2");
			УстановитьКартинкиАнализаОтчетности(
				ОбластиМакета.Показатели, СтрокаТаблицы.Показатели, ИменаПоказателейСКартинками, "2", "3");
			ТабличныйДокумент.Вывести(ОбластиМакета.Показатели);
		КонецЦикла;
		
		ПараметрыВывода.ОбластиРасшифровки.ЗаполнитьЗначения("РезультатПоказатели", "ИмяДокумента");
		Для каждого СтрокаТаблицы Из ПараметрыВывода.ОбластиРасшифровки Цикл
			НоваяСтрока = ДанныеОтчета.ОбластиРасшифровки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;

	ДанныеОтчета.Вставить("РезультатАнализОтчетности", ТабличныйДокумент);
	ДанныеОтчета.Вставить("ИмяФайлаАнализОтчетности", 
		СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Досье %1 - анализ отчетности'"),
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
					ИнформацияОСвязях.НаименованиеСокращенное, ""))));

КонецПроцедуры

Процедура УстановитьКартинкиАнализаОтчетности(ОбластьМакета, Показатели, ИменаПоказателейСКартинками, Номер1, Номер2)
	
	ЕстьДанные = Показатели.Свойство("Продажи_" + Номер1)
		И Показатели["Продажи_" + Номер1] <> Неопределено
		И Показатели.Свойство("Продажи_" + Номер2)
		И Показатели["Продажи_" + Номер2] <> Неопределено;
	
	ВсеКартинки = ВсеКартинкиТабличногоДокумента(ОбластьМакета);
	ИменаПоказателей = СтрРазделить(ИменаПоказателейСКартинками, ";", Ложь);
	Для каждого ИмяПоказателя Из ИменаПоказателей Цикл
		
		Если ЕстьДанные Тогда
			ЗначениеПоказателя1 = Показатели[ИмяПоказателя + "_" + Номер1];
			ЗначениеПоказателя2 = Показатели[ИмяПоказателя + "_" + Номер2];
			Если ЗначениеПоказателя1 > ЗначениеПоказателя2 Тогда
				ВыбраннаяКартинка = БиблиотекаКартинок.ДосьеУвеличениеПоказателя;
			ИначеЕсли ЗначениеПоказателя1 < ЗначениеПоказателя2 Тогда
				ВыбраннаяКартинка = БиблиотекаКартинок.ДосьеУменьшениеПоказателя;
			Иначе
				ВыбраннаяКартинка = Новый Картинка;
			КонецЕсли;
		Иначе
			ВыбраннаяКартинка = Новый Картинка;
		КонецЕсли;
		
		ВсеКартинки["Картинка" + ИмяПоказателя + "_" + Номер1].Картинка = ВыбраннаяКартинка;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НоваяТаблицаАнализОтчетности()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВалютаОтчетности", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Показатели");      // Структура
	Возврат Результат;

КонецФункции 

Процедура ПодготовитьДанныеАнализаОтчетности(ИнформацияОСвязях)

	ИнформацияОСвязях.Вставить("АнализОтчетности", НоваяТаблицаАнализОтчетности());
	Если НЕ ИнформацияОСвязях.Свойство("ДанныеБухгалтерскойОтчетности")
		ИЛИ ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтчетности = ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности[0];
	Если СтрокаОтчетности.ТипОтчетности = "0" Тогда
		Возврат;
	КонецЕсли;
	
	// Ключ - код для вывода в отчет, значение - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	
	РасчетПоказателейТипа2 = Новый Структура;
	РасчетПоказателейТипа2.Вставить("Продажи", "2110");
	РасчетПоказателейТипа2.Вставить("Прибыль", "2400");
	РасчетПоказателейТипа2.Вставить("Деньги", "1250");
	РасчетПоказателейТипа2.Вставить("Запасы", "1210");
	РасчетПоказателейТипа2.Вставить("ОС", "1150");
	РасчетПоказателейТипа2.Вставить("Дебиторы", "1220;1230;1240;1260");
	РасчетПоказателейТипа2.Вставить("Кредиторы", "1520");
	РасчетПоказателейТипа2.Вставить("Кредиты", "1410;1510");
	РасчетПоказателейТипа2.Вставить("ЧистыеАктивы", 
		"1110;1120;1130;1140;1150;1160;1170;1180;1190;1210;1220;1230;1240;1250;1260;"
		+ "-1410;-1420;-1430;-1450;-1510;-1520;-1540;-1550");
	Для каждого РасчетПоказателя Из РасчетПоказателейТипа2 Цикл
		РасчетПоказателейТипа2[РасчетПоказателя.Ключ] = СтрРазделить(РасчетПоказателя.Значение, ";", Ложь);
	КонецЦикла;
	
	РасчетПоказателейТипа1 = Новый Структура;
	РасчетПоказателейТипа1.Вставить("Продажи", "2110");
	РасчетПоказателейТипа1.Вставить("Прибыль", "2400");
	РасчетПоказателейТипа1.Вставить("Деньги", "1250");
	РасчетПоказателейТипа1.Вставить("Запасы", "1210");
	РасчетПоказателейТипа1.Вставить("ОС", "1150;1140;1160");
	РасчетПоказателейТипа1.Вставить("Дебиторы", "1220;1230;1240;1260");
	РасчетПоказателейТипа1.Вставить("Кредиторы", "1520");
	РасчетПоказателейТипа1.Вставить("Кредиты", "1410;1510");
	РасчетПоказателейТипа1.Вставить("ЧистыеАктивы", 
		"1110;1120;1130;1140;1150;1160;1170;1180;1190;1210;1220;1230;1240;1250;1260;"
		+ "-1410;-1420;-1430;-1450;-1510;-1520");
	Для каждого РасчетПоказателя Из РасчетПоказателейТипа1 Цикл
		РасчетПоказателейТипа1[РасчетПоказателя.Ключ] = СтрРазделить(РасчетПоказателя.Значение, ";", Ложь);
	КонецЦикла;
	
	ВалютаОтчетности = "";
	ЗаполненныеПоказателиПоГодам = Новый Структура("Год1,Год2,Год3", Ложь, Ложь, Ложь);
	Для каждого СтрокаТаблицы Из ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности Цикл
		
		Если СтрокаТаблицы.ТипОтчетности = "0" Тогда // Показатели для отчетности НКО не рассчитываем.
			Продолжить;
		КонецЕсли;
		ДанныеОтчетности = СтрокаТаблицы.Показатели;
		ДанныеПоГодам    = Новый Соответствие;
		ДанныеПоГодам.Вставить("1", ДанныеОтчетности.Свойство("П1110_1"));
		ДанныеПоГодам.Вставить("2", ДанныеОтчетности.Свойство("П1110_2"));
		ДанныеПоГодам.Вставить("3", ДанныеОтчетности.Свойство("П1110_3"));
		Если НЕ (ДанныеПоГодам["1"] ИЛИ ДанныеПоГодам["2"] ИЛИ ДанныеПоГодам["3"]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВалютаОтчетности <> СтрокаТаблицы.ВалютаОтчетности Тогда
			НоваяСтрока = ИнформацияОСвязях.АнализОтчетности.Добавить();
			НоваяСтрока.ВалютаОтчетности = СтрокаТаблицы.ВалютаОтчетности;
			НоваяСтрока.Показатели       = Новый Структура;
			ВалютаОтчетности             = СтрокаТаблицы.ВалютаОтчетности;
		КонецЕсли;
		
		РасчетПоказателей = ?(СтрокаТаблицы.ТипОтчетности = "2", РасчетПоказателейТипа2, РасчетПоказателейТипа1);
		Для каждого ДанныеГода Из ДанныеПоГодам Цикл
			Если НЕ ДанныеГода.Значение 
				ИЛИ ЗаполненныеПоказателиПоГодам["Год" + ДанныеГода.Ключ] Тогда
				Продолжить;
			КонецЕсли;
			ЗаполненныеПоказателиПоГодам["Год" + ДанныеГода.Ключ] = Истина;
			Для каждого РасчетПоказателя Из РасчетПоказателей Цикл
				ИмяПоказателя = РасчетПоказателя.Ключ + "_" + ДанныеГода.Ключ;
				ЗначениеПоказателя = 0;
				Для каждого ЭлементРасчета Из РасчетПоказателя.Значение Цикл
					Множитель = ?(Лев(ЭлементРасчета, 1) = "-", -1, 1);
					ИмяДанных = "П" + СтрЗаменить(ЭлементРасчета, "-", "") + "_" + ДанныеГода.Ключ;
					ЗначениеПоказателя = ЗначениеПоказателя + Множитель * ДанныеОтчетности[ИмяДанных];
				КонецЦикла;
				НоваяСтрока.Показатели.Вставить(ИмяПоказателя, ЗначениеПоказателя);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФинансовыйАнализ

Процедура СформироватьРезультатФинансовыйАнализ(ИнформацияОСвязях, ДанныеОтчета)

	Если НЕ ДанныеОтчета.ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПараметрыВывода   = Новый Структура;
	ПараметрыВывода.Вставить("ОбластиМакета",      ВсеОбластиМакета("ФинансовыйАнализ"));
	ПараметрыВывода.Вставить("ОбластиРасшифровки", НоваяТаблицаОбластиРасшифровки());
	ПараметрыВывода.Вставить("СтруктураГодов",     ПериодыБухгалтерскойОтчетности());
	
	ОбластьШапка = ПараметрыВывода.ОбластиМакета.Шапка;
	
	Если ИнформацияОСвязях.ФинансовыйАнализ.Количество() = 0 Тогда
		
		ОбластьШапка.Параметры.ТекстЗаголовка = НСтр("ru='Финансовый анализ'");
		ТабличныйДокумент.Вывести(ОбластьШапка);
	
		Если ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
			ТабличныйДокумент.Вывести(ПараметрыВывода.ОбластиМакета.АнализНеПроведенНетОтчетности);
		ИначеЕсли ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности[0].ТипОтчетности = "0" Тогда
			ТабличныйДокумент.Вывести(ПараметрыВывода.ОбластиМакета.АнализНеПроведенОтчетностьНКО);
		Иначе
			ТабличныйДокумент.Вывести(ПараметрыВывода.ОбластиМакета.АнализНеПроведенПрочее);
		КонецЕсли;
		
	Иначе
		
		СтрокаТаблицы  = ИнформацияОСвязях.ФинансовыйАнализ[0];
		
		ОбластьШапка.Параметры.ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Финансовый анализ за %1 год'"),
			СтрокаТаблицы.ГодОтчетности);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ВывестиРазделРискБанкротства(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода);
		
		ВывестиРазделКредитоспособность(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода);
		
		ВывестиРазделРентабельностьАктивов(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода);
		
		ВывестиРазделРентабельностьПродаж(ТабличныйДокумент, СтрокаТаблицы, ПараметрыВывода);
		
		ПараметрыВывода.ОбластиРасшифровки.ЗаполнитьЗначения("РезультатФинансовыйАнализ", "ИмяДокумента");
		Для каждого СтрокаТаблицы Из ПараметрыВывода.ОбластиРасшифровки Цикл
			НоваяСтрока = ДанныеОтчета.ОбластиРасшифровки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеОтчета.Вставить("РезультатФинансовыйАнализ", ТабличныйДокумент);
	ДанныеОтчета.Вставить("ИмяФайлаФинансовыйАнализ", 
		СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Досье %1 - финансовый анализ'"),
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
					ИнформацияОСвязях.НаименованиеСокращенное, ""))));

КонецПроцедуры

Процедура ВывестиРазделРискБанкротства(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода)
	
	Показатели    = СтрокаДанных.ПоказателиРискБанкротства;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	
	// Диаграмма
	Диаграмма = ОбластиМакета.РискБанкротства.Рисунки.ДиаграммаРискБанкротства.Объект;
	Если НЕ Показатели.ПятиФакторнаяМодель Тогда
		Полоса1 = Диаграмма.ПолосыИзмерительнойДиаграммы[0];
		Полоса1.Конец = 110;
		Полоса2 = Диаграмма.ПолосыИзмерительнойДиаграммы[1];
		Полоса2.Начало = 110;
		Полоса2.Конец  = 260;
		Полоса3 = Диаграмма.ПолосыИзмерительнойДиаграммы[2];
		Полоса3.Начало = 260;
	КонецЕсли;
	ИндексАльтмана = ?(Показатели.Свойство("ИндексАльтмана_1"), Показатели.ИндексАльтмана_1, 0);
	ЗначениеТочкиДиаграммы = ?(ИндексАльтмана < 0, 0, ?(ИндексАльтмана > 5, 500, ИндексАльтмана * 100));
	ТекстТочкиДиаграммы    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Индекс Альтмана Z = %1'"),
		ИндексАльтмана);
	Диаграмма.УстановитьЗначение(0, 0, ЗначениеТочкиДиаграммы, , ТекстТочкиДиаграммы);
	// Комментарии к диаграмме
	ОбластиМакета.РискБанкротства.Параметры.Заполнить(Показатели);
	ОбластиМакета.РискБанкротства.Параметры.ИндексАльтмана = ИндексАльтмана;
	ОбластиМакета.РискБанкротства.Параметры.ПояснениеОценкиРискБанкротства = Показатели.ПояснениеОценкиРискБанкротства;
	Если Показатели.ОценкаРискБанкротства = "ПлохаяОценка" Тогда
		ОбластиМакета.РискБанкротства.Области.ПояснениеОценкиРискБанкротства.ЦветТекста = 
			ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
	ИначеЕсли Показатели.ОценкаРискБанкротства = "ХорошаяОценка" Тогда
		ОбластиМакета.РискБанкротства.Области.ПояснениеОценкиРискБанкротства.ЦветТекста = 
			ЦветаСтиля.ДосьеХорошаяОценкаЦвет;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.РискБанкротства);
	// Формат шкалы не переносится из макета.
	ТабличныйДокумент.Рисунки.ДиаграммаРискБанкротства.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧС=2;ЧН=";

	// Свернуто
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Показать", "РезультатФинансовыйАнализ", "РискБанкротства");
	ОбластиМакета.ПоказатьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.ПоказатьРасчет);

	// Развернуто
	
	СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
	СтрокаОбласти.ИмяОбласти   = "РискБанкротства";
	СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	// Порядок расчета
	ОбластьРасчет = ?(Показатели.ПятиФакторнаяМодель, 
		ОбластиМакета.РискБанкротстваРасчетПроизводство, 
		ОбластиМакета.РискБанкротстваРасчет);
	ТабличныйДокумент.Вывести(ОбластьРасчет);
	// Показатели для расчета
	ОбластьПоказатели = ?(Показатели.ПятиФакторнаяМодель, 
		ОбластиМакета.РискБанкротстваПоказателиПроизводство, 
		ОбластиМакета.РискБанкротстваПоказатели);
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	// Скрыть расчет
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Свернуть", "РезультатФинансовыйАнализ", "РискБанкротства");
	ОбластиМакета.СкрытьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.СкрытьРасчет);
	СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	
КонецПроцедуры

Процедура ВывестиРазделКредитоспособность(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода)
	
	Показатели    = СтрокаДанных.ПоказателиКредитоспособность;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	
	// Диаграмма
	Диаграмма = ОбластиМакета.Кредитоспособность.Рисунки.ДиаграммаКредитоспособность.Объект;
	Кредитоспособность = ?(Показатели.Свойство("Кредитоспособность_1"), Показатели.Кредитоспособность_1, 0);
	ЗначениеТочкиДиаграммы = ?(Кредитоспособность < 1, 50, ?(Кредитоспособность > 3, 300, Кредитоспособность * 100));
	ТекстТочкиДиаграммы    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Оценка кредитоспособности S = %1'"),
		Кредитоспособность);
	Диаграмма.УстановитьЗначение(0, 0, ЗначениеТочкиДиаграммы, , ТекстТочкиДиаграммы);
	// Комментарии к диаграмме
	ОбластиМакета.Кредитоспособность.Параметры.Заполнить(Показатели);
	ОбластиМакета.Кредитоспособность.Параметры.Кредитоспособность = Кредитоспособность;
	Если Показатели.ОценкаКредитоспособность = "ПлохаяОценка" Тогда
		ОбластиМакета.Кредитоспособность.Области.ПояснениеОценкиКредитоспособность.ЦветТекста = 
			ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
	ИначеЕсли Показатели.ОценкаКредитоспособность = "ХорошаяОценка" Тогда
		ОбластиМакета.Кредитоспособность.Области.ПояснениеОценкиКредитоспособность.ЦветТекста = 
			ЦветаСтиля.ДосьеХорошаяОценкаЦвет;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Кредитоспособность);
	// Формат шкалы не переносится из макета.
	ТабличныйДокумент.Рисунки.ДиаграммаКредитоспособность.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧС=2;ЧН=";

	// Свернуто
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Показать", "РезультатФинансовыйАнализ", "Кредитоспособность");
	ОбластиМакета.ПоказатьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.ПоказатьРасчет);

	// Развернуто
	
	СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
	СтрокаОбласти.ИмяОбласти   = "Кредитоспособность";
	СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	// Порядок расчета
	ОбластьРасчет = ОбластиМакета.КредитоспособностьРасчет;
	ТабличныйДокумент.Вывести(ОбластьРасчет);
	// Показатели для расчета
	ОбластьПоказатели = ОбластиМакета.КредитоспособностьПоказатели;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	// Скрыть расчет
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Свернуть", "РезультатФинансовыйАнализ", "Кредитоспособность");
	ОбластиМакета.СкрытьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.СкрытьРасчет);
	СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	
КонецПроцедуры

Процедура ВывестиРазделРентабельностьАктивов(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода)
	
	Показатели    = СтрокаДанных.ПоказателиРентабельностьАктивов;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	
	// Диаграмма
	РентабельностьАктивов = ?(Показатели.Свойство("РентабельностьАктивов_1"), Показатели.РентабельностьАктивов_1, 0);
	СредняяРентабельность = ?(Показатели.Свойство("РентабельностьАктивов3_1"), Показатели.РентабельностьАктивов3_1, 0);
	ПредельнаяРентабельность = ?(Показатели.Свойство("РентабельностьАктивов4_1"), Показатели.РентабельностьАктивов4_1, 0);
	ОбластьРентабельностьАктивов = ?(СредняяРентабельность = 0,
		ОбластиМакета.РентабельностьАктивов0,
		ОбластиМакета.РентабельностьАктивов);
	Если СредняяРентабельность = 0 Тогда
		Диаграмма = ОбластьРентабельностьАктивов.Рисунки.ДиаграммаРентабельностьАктивов0.Объект;
	Иначе
		Диаграмма = ОбластьРентабельностьАктивов.Рисунки.ДиаграммаРентабельностьАктивов.Объект;
		Диаграмма.МинимальноеЗначение = 0;
		МаксимальноеЗначение = СредняяРентабельность * 2 * 100;
		МаксимальноеЗначение = ?(МаксимальноеЗначение > 100, МаксимальноеЗначение - МаксимальноеЗначение % 100,
			?(МаксимальноеЗначение > 10, МаксимальноеЗначение - МаксимальноеЗначение % 10,
			?(МаксимальноеЗначение > 1, Окр(МаксимальноеЗначение, 0),
			МаксимальноеЗначение)));
		Диаграмма.МаксимальноеЗначение = МаксимальноеЗначение;
		Полоса1 = Диаграмма.ПолосыИзмерительнойДиаграммы[0];
		Полоса1.Конец = ПредельнаяРентабельность * 100;
		Полоса2 = Диаграмма.ПолосыИзмерительнойДиаграммы[1];
		Полоса2.Начало = ПредельнаяРентабельность * 100;
		Полоса2.Конец  = СредняяРентабельность * 100;
		Полоса3 = Диаграмма.ПолосыИзмерительнойДиаграммы[2];
		Полоса3.Начало = СредняяРентабельность * 100;
	КонецЕсли;
	ЗначениеТочкиДиаграммы = ?(РентабельностьАктивов * 100 < Диаграмма.МинимальноеЗначение, 
		Диаграмма.МинимальноеЗначение,
		?(РентабельностьАктивов * 100 > Диаграмма.МаксимальноеЗначение, 
			Диаграмма.МаксимальноеЗначение, 
			РентабельностьАктивов * 100));
	ТекстТочкиДиаграммы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Рентабельность активов %1'"),
		РентабельностьАктивов) + " %";
	Диаграмма.УстановитьЗначение(0, 0, ЗначениеТочкиДиаграммы, , ТекстТочкиДиаграммы);
	// Комментарии к диаграмме
	ОбластьРентабельностьАктивов.Параметры.Заполнить(Показатели);
	ОбластьРентабельностьАктивов.Параметры.РентабельностьАктивов = РентабельностьАктивов;
	ОбластьПояснениеОценки = ?(СредняяРентабельность = 0,
		ОбластьРентабельностьАктивов.Области.ПояснениеОценкиРентабельностьАктивов0,
		ОбластьРентабельностьАктивов.Области.ПояснениеОценкиРентабельностьАктивов);
	Если Показатели.ОценкаРентабельностьАктивов = "ПлохаяОценка" Тогда
		ОбластьПояснениеОценки.ЦветТекста = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
	ИначеЕсли Показатели.ОценкаРентабельностьАктивов = "ХорошаяОценка" Тогда
		ОбластьПояснениеОценки.ЦветТекста = ЦветаСтиля.ДосьеХорошаяОценкаЦвет;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьРентабельностьАктивов);
	// Формат шкалы не переносится из макета.
	Если СредняяРентабельность = 0 Тогда
		ТабличныйДокумент.Рисунки.ДиаграммаРентабельностьАктивов0.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧС=2;ЧН=";
	Иначе
		ТабличныйДокумент.Рисунки.ДиаграммаРентабельностьАктивов.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧС=2;ЧН=";
	КонецЕсли;

	// Свернуто
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Показать", "РезультатФинансовыйАнализ", "РентабельностьАктивов");
	ОбластиМакета.ПоказатьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.ПоказатьРасчет);

	// Развернуто
	
	СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
	СтрокаОбласти.ИмяОбласти   = "РентабельностьАктивов";
	СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	// Порядок расчета
	ОбластьРасчет = ОбластиМакета.РентабельностьАктивовРасчет;
	ТабличныйДокумент.Вывести(ОбластьРасчет);
	// Показатели для расчета
	ОбластьПоказатели = ОбластиМакета.РентабельностьАктивовПоказатели;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	Если ЗначениеЗаполнено(Показатели.ВидДеятельности) Тогда
		ПояснениеРасчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Средняя рентабельность приведена по данным Росстата для вида деятельности ""%1""'"),
			Показатели.ВидДеятельности);
		ОбластьПоказатели.Параметры.ПояснениеРасчета = ПояснениеРасчета;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	// Скрыть расчет
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Свернуть", "РезультатФинансовыйАнализ", "РентабельностьАктивов");
	ОбластиМакета.СкрытьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.СкрытьРасчет);
	СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	
КонецПроцедуры

Процедура ВывестиРазделРентабельностьПродаж(ТабличныйДокумент, СтрокаДанных, ПараметрыВывода)
	
	Показатели    = СтрокаДанных.ПоказателиРентабельностьПродаж;
	ОбластиМакета = ПараметрыВывода.ОбластиМакета;
	
	// Диаграмма
	РентабельностьПродаж  = ?(Показатели.Свойство("РентабельностьПродаж_1"), Показатели.РентабельностьПродаж_1, 0);
	СредняяРентабельность = ?(Показатели.Свойство("РентабельностьПродаж3_1"), Показатели.РентабельностьПродаж3_1, 0);
	ПредельнаяРентабельность = ?(Показатели.Свойство("РентабельностьПродаж4_1"), Показатели.РентабельностьПродаж4_1, 0);
	ОбластьРентабельностьПродаж = ?(СредняяРентабельность = 0,
		ОбластиМакета.РентабельностьПродаж0,
		ОбластиМакета.РентабельностьПродаж);
	Если СредняяРентабельность = 0 Тогда
		Диаграмма = ОбластьРентабельностьПродаж.Рисунки.ДиаграммаРентабельностьПродаж0.Объект;
	Иначе
		Диаграмма = ОбластьРентабельностьПродаж.Рисунки.ДиаграммаРентабельностьПродаж.Объект;
		Диаграмма.МинимальноеЗначение = 0;
		МаксимальноеЗначение = СредняяРентабельность * 2 * 100;
		МаксимальноеЗначение = ?(МаксимальноеЗначение > 100, МаксимальноеЗначение - МаксимальноеЗначение % 100,
			?(МаксимальноеЗначение > 10, МаксимальноеЗначение - МаксимальноеЗначение % 10,
			?(МаксимальноеЗначение > 1, Окр(МаксимальноеЗначение, 0),
			МаксимальноеЗначение)));
		Диаграмма.МаксимальноеЗначение = МаксимальноеЗначение;
		Полоса1 = Диаграмма.ПолосыИзмерительнойДиаграммы[0];
		Полоса1.Конец = ПредельнаяРентабельность * 100;
		Полоса2 = Диаграмма.ПолосыИзмерительнойДиаграммы[1];
		Полоса2.Начало = ПредельнаяРентабельность * 100;
		Полоса2.Конец  = СредняяРентабельность * 100;
		Полоса3 = Диаграмма.ПолосыИзмерительнойДиаграммы[2];
		Полоса3.Начало = СредняяРентабельность * 100;
	КонецЕсли;
	ЗначениеТочкиДиаграммы = ?(РентабельностьПродаж * 100 < Диаграмма.МинимальноеЗначение, 
		Диаграмма.МинимальноеЗначение,
		?(РентабельностьПродаж * 100 > Диаграмма.МаксимальноеЗначение, 
			Диаграмма.МаксимальноеЗначение, 
			РентабельностьПродаж * 100));
	ТекстТочкиДиаграммы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Рентабельность продаж %1'"),
		РентабельностьПродаж) + " %";
	Диаграмма.УстановитьЗначение(0, 0, ЗначениеТочкиДиаграммы, , ТекстТочкиДиаграммы);
	// Комментарии к диаграмме
	ОбластьРентабельностьПродаж.Параметры.Заполнить(Показатели);
	ОбластьРентабельностьПродаж.Параметры.РентабельностьПродаж = РентабельностьПродаж;
	ОбластьПояснениеОценки = ?(СредняяРентабельность = 0,
		ОбластьРентабельностьПродаж.Области.ПояснениеОценкиРентабельностьПродаж0,
		ОбластьРентабельностьПродаж.Области.ПояснениеОценкиРентабельностьПродаж);
	Если Показатели.ОценкаРентабельностьПродаж = "ПлохаяОценка" Тогда
		ОбластьПояснениеОценки.ЦветТекста = ЦветаСтиля.ДосьеПлохаяОценкаЦвет;
	ИначеЕсли Показатели.ОценкаРентабельностьПродаж = "ХорошаяОценка" Тогда
		ОбластьПояснениеОценки.ЦветТекста = ЦветаСтиля.ДосьеХорошаяОценкаЦвет;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьРентабельностьПродаж);
	// Формат шкалы не переносится из макета.
	Если СредняяРентабельность = 0 Тогда
		ТабличныйДокумент.Рисунки.ДиаграммаРентабельностьПродаж0.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧС=2;ЧН=";
	Иначе
		ТабличныйДокумент.Рисунки.ДиаграммаРентабельностьПродаж.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧС=2;ЧН=";
	КонецЕсли;

	// Свернуто
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Показать", "РезультатФинансовыйАнализ", "РентабельностьПродаж");
	ОбластиМакета.ПоказатьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.ПоказатьРасчет);

	// Развернуто
	
	СтрокаОбласти = ПараметрыВывода.ОбластиРасшифровки.Добавить();
	СтрокаОбласти.ИмяОбласти   = "РентабельностьПродаж";
	СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
	// Порядок расчета
	ОбластьРасчет = ОбластиМакета.РентабельностьПродажРасчет;
	ТабличныйДокумент.Вывести(ОбластьРасчет);
	// Показатели для расчета
	ОбластьПоказатели = ОбластиМакета.РентабельностьПродажПоказатели;
	ОбластьПоказатели.Параметры.Заполнить(СтрокаДанных);
	ОбластьПоказатели.Параметры.Заполнить(ПараметрыВывода.СтруктураГодов);
	ОбластьПоказатели.Параметры.Заполнить(Показатели);
	Если ЗначениеЗаполнено(Показатели.ВидДеятельности) Тогда
		ПояснениеРасчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Средняя рентабельность приведена по данным Росстата для вида деятельности ""%1""'"),
			Показатели.ВидДеятельности);
		ОбластьПоказатели.Параметры.ПояснениеРасчета = ПояснениеРасчета;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьПоказатели);
	// Скрыть расчет
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Свернуть", "РезультатФинансовыйАнализ", "РентабельностьПродаж");
	ОбластиМакета.СкрытьРасчет.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.СкрытьРасчет);
	СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
	
КонецПроцедуры

Функция НоваяТаблицаФинансовыйАнализ()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ГодОтчетности",    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВалютаОтчетности", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПоказателиРискБанкротства");         // Структура
	Результат.Колонки.Добавить("ПоказателиКредитоспособность");      // Структура
	Результат.Колонки.Добавить("ПоказателиРентабельностьАктивов");   // Структура
	Результат.Колонки.Добавить("ПоказателиРентабельностьПродаж");    // Структура
	Возврат Результат;

КонецФункции 

Процедура ПодготовитьДанныеФинансовогоАнализа(ИнформацияОСвязях)

	ИнформацияОСвязях.Вставить("ФинансовыйАнализ", НоваяТаблицаФинансовыйАнализ());
	Если НЕ ИнформацияОСвязях.Свойство("ДанныеБухгалтерскойОтчетности")
		ИЛИ ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтчетности = ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности[0];
	Если СтрокаОтчетности.ТипОтчетности = "0" Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураГодов = ПериодыБухгалтерскойОтчетности();
	
	ДанныеПоГодам = Новый ТаблицаЗначений;
	ДанныеПоГодам.Колонки.Добавить("НомерГода");
	ДанныеПоГодам.Колонки.Добавить("Год");
	Если СтрокаОтчетности.Показатели.Свойство("П1110_1") Тогда
	    НоваяСтрока = ДанныеПоГодам.Добавить();
		НоваяСтрока.НомерГода = "1";
		НоваяСтрока.Год       = СтруктураГодов.Год_1;
	Иначе
		Возврат;
	КонецЕсли;
	Если СтрокаОтчетности.Показатели.Свойство("П1110_2") Тогда
	    НоваяСтрока = ДанныеПоГодам.Добавить();
		НоваяСтрока.НомерГода = "2";
		НоваяСтрока.Год       = СтруктураГодов.Год_2;
	КонецЕсли;
	Если СтрокаОтчетности.Показатели.Свойство("П1110_3") Тогда
	    НоваяСтрока = ДанныеПоГодам.Добавить();
		НоваяСтрока.НомерГода = "3";
		НоваяСтрока.Год       = СтруктураГодов.Год_3;
	КонецЕсли;
	
	НоваяСтрока = ИнформацияОСвязях.ФинансовыйАнализ.Добавить();
	НоваяСтрока.ГодОтчетности    = ДанныеПоГодам[0].Год;
	НоваяСтрока.ВалютаОтчетности = СтрокаОтчетности.ВалютаОтчетности;
	
	// Риск банкротства
	НоваяСтрока.ПоказателиРискБанкротства = Новый Структура;
	ДобавитьПоказателиРискБанкротства(НоваяСтрока.ПоказателиРискБанкротства, 
		СтрокаОтчетности, ДанныеПоГодам, ИнформацияОСвязях);
	
	// Кредитоспособность
	НоваяСтрока.ПоказателиКредитоспособность = Новый Структура;
	ДобавитьПоказателиКредитоспособность(НоваяСтрока.ПоказателиКредитоспособность,
		СтрокаОтчетности, ДанныеПоГодам, ИнформацияОСвязях);
	
	// Рентабельность активов
	НоваяСтрока.ПоказателиРентабельностьАктивов = Новый Структура;
	ДобавитьПоказателиРентабельностьАктивов(НоваяСтрока.ПоказателиРентабельностьАктивов, 
		СтрокаОтчетности, ДанныеПоГодам, ИнформацияОСвязях);
		
	// Рентабельность продаж
	НоваяСтрока.ПоказателиРентабельностьПродаж = Новый Структура;
	ДобавитьПоказателиРентабельностьПродаж(НоваяСтрока.ПоказателиРентабельностьПродаж, 
		СтрокаОтчетности, ДанныеПоГодам, ИнформацияОСвязях);
		
КонецПроцедуры

Процедура ДобавитьПоказателиРискБанкротства(Показатели, СтрокаОтчетности, ДанныеПоГодам, ИнформацияОСвязях)
	
	Показатели.Вставить("ОценкаРискБанкротства", "");
	Показатели.Вставить("ПояснениеОценкиРискБанкротства", "");
	
	// Ключ - код для вывода в отчет, значение - числитель и знаменатель, 
	// каждый из которых - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	РасчетПоказателей = Новый Структура;
	Если СтрокаОтчетности.ТипОтчетности = "2" Тогда
		РасчетПоказателей.Вставить("РискБанкротства1", Новый Структура("Числитель,Знаменатель", 
			"1300;1400;-1100", 
			"1600"));
		РасчетПоказателей.Вставить("РискБанкротства2", Новый Структура("Числитель,Знаменатель", 
			"1370", 
			"1600"));
		РасчетПоказателей.Вставить("РискБанкротства3", Новый Структура("Числитель,Знаменатель", 
			"2300;2330", 
			"1600"));
		РасчетПоказателей.Вставить("РискБанкротства4", Новый Структура("Числитель,Знаменатель", 
			"1300", 
			"1400;1500"));
		РасчетПоказателей.Вставить("РискБанкротства5", Новый Структура("Числитель,Знаменатель", 
			"2110", 
			"1600"));
	Иначе
		РасчетПоказателей.Вставить("РискБанкротства1", Новый Структура("Числитель,Знаменатель", 
			"1300;1410;1420;1430;1450;-1140;-1150;-1160;-1110;-1120;-1130;-1170;-1180;-1190", 
			"1600"));
		РасчетПоказателей.Вставить("РискБанкротства2", Новый Структура("Числитель,Знаменатель", 
			"1300", 
			"1600"));
		РасчетПоказателей.Вставить("РискБанкротства3", Новый Структура("Числитель,Знаменатель", 
			"2110;-2120;-2210;-2220;2310;2320;2340;-2350", 
			"1600"));
		РасчетПоказателей.Вставить("РискБанкротства4", Новый Структура("Числитель,Знаменатель", 
			"1300", 
			"1410;1420;1430;1450;1510;1520;1530;1540;1550"));
		РасчетПоказателей.Вставить("РискБанкротства5", Новый Структура("Числитель,Знаменатель", 
			"2110", 
			"1600"));
	КонецЕсли;
	Для каждого РасчетПоказателя Из РасчетПоказателей Цикл
		РасчетПоказателя.Значение.Числитель = СтрРазделить(РасчетПоказателя.Значение.Числитель, ";", Ложь);
		РасчетПоказателя.Значение.Знаменатель = СтрРазделить(РасчетПоказателя.Значение.Знаменатель, ";", Ложь);
	КонецЦикла;	
		
	Показатели.Вставить("ПятиФакторнаяМодель", ЭтоПроизводственноеПредприятие(ИнформацияОСвязях.ВидыДеятельности));
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	Для каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		Для каждого РасчетПоказателя Из РасчетПоказателей Цикл
			ИмяПоказателя = РасчетПоказателя.Ключ + "_" + НомерГода;
			ЗначениеЧислителя = 0;
			Для каждого ЭлементРасчета Из РасчетПоказателя.Значение.Числитель Цикл
				Множитель = ?(Лев(ЭлементРасчета, 1) = "-", -1, 1);
				ИмяДанных = "П" + СтрЗаменить(ЭлементРасчета, "-", "") + "_" + НомерГода;
				ЗначениеЧислителя = ЗначениеЧислителя + Множитель * ДанныеОтчетности[ИмяДанных];
			КонецЦикла;
			ЗначениеЗнаменателя = 0;
			Для каждого ЭлементРасчета Из РасчетПоказателя.Значение.Знаменатель Цикл
				Множитель = ?(Лев(ЭлементРасчета, 1) = "-", -1, 1);
				ИмяДанных = "П" + СтрЗаменить(ЭлементРасчета, "-", "") + "_" + НомерГода;
				ЗначениеЗнаменателя = ЗначениеЗнаменателя + Множитель * ДанныеОтчетности[ИмяДанных];
			КонецЦикла;
			ЗначениеПоказателя = ?(ЗначениеЗнаменателя = 0, 0, Окр(ЗначениеЧислителя / ЗначениеЗнаменателя, 3));
			Показатели.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		КонецЦикла;
		Если Показатели.ПятиФакторнаяМодель Тогда
			ИндексАльтмана = Окр(0.717 * Показатели["РискБанкротства1_"  + НомерГода]
				+ 0.847 * Показатели["РискБанкротства2_" + НомерГода]
				+ 3.107 * Показатели["РискБанкротства3_" + НомерГода]
				+ 0.42 * Показатели["РискБанкротства4_"  + НомерГода]
				+ 0.995 * Показатели["РискБанкротства5_" + НомерГода], 3);
		Иначе
			ИндексАльтмана = Окр(6.56 * Показатели["РискБанкротства1_" + НомерГода]
				+ 3.26 * Показатели["РискБанкротства2_" + НомерГода]
				+ 6.72 * Показатели["РискБанкротства3_" + НомерГода]
				+ 1.05 * Показатели["РискБанкротства4_" + НомерГода], 3);
		КонецЕсли;
		Показатели.Вставить("ИндексАльтмана_" + НомерГода, ИндексАльтмана);
		Если НомерГода = "1" Тогда
			Если Показатели.ПятиФакторнаяМодель Тогда
				ОценкаРискБанкротства = ?(ИндексАльтмана >= 2.9, "ХорошаяОценка",
					?(ИндексАльтмана > 1.23, "СредняяОценка", "ПлохаяОценка"));
			Иначе
				ОценкаРискБанкротства = ?(ИндексАльтмана >= 2.6, "ХорошаяОценка",
					?(ИндексАльтмана > 1.1, "СредняяОценка", "ПлохаяОценка"));
			КонецЕсли;
			Показатели.ОценкаРискБанкротства = ОценкаРискБанкротства;
			Если ОценкаРискБанкротства = "ПлохаяОценка" Тогда
				Показатели.ПояснениеОценкиРискБанкротства = НСтр("ru='Высокий риск банкротства'");
			ИначеЕсли ОценкаРискБанкротства = "СредняяОценка" Тогда
				Показатели.ПояснениеОценкиРискБанкротства = НСтр("ru='Вероятность банкротства невысока'");
			Иначе // "ХорошаяОценка"
				Показатели.ПояснениеОценкиРискБанкротства = НСтр("ru='Устойчивое финансовое состояние'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказателиКредитоспособность(Показатели, СтрокаОтчетности, ДанныеПоГодам, ИнформацияОСвязях)
	
	Показатели.Вставить("ОценкаКредитоспособность", "");
	Показатели.Вставить("ПояснениеОценкиКредитоспособность", "");
	
	// Ключ - код для вывода в отчет, значение - числитель и знаменатель, 
	// каждый из которых - суммируемые (с минусом - вычитаемые) показатели бухгалтерской отчетности.
	РасчетПоказателей = Новый Структура;
	Если СтрокаОтчетности.ТипОтчетности = "2" Тогда
		РасчетПоказателей.Вставить("Кредитоспособность1", Новый Структура("Числитель,Знаменатель", 
			"1250", 
			"1510;1520;1550"));
		РасчетПоказателей.Вставить("Кредитоспособность2", Новый Структура("Числитель,Знаменатель", 
			"1230;1240;1250", 
			"1510;1520;1550"));
		РасчетПоказателей.Вставить("Кредитоспособность3", Новый Структура("Числитель,Знаменатель", 
			"1200", 
			"1510;1520;1550"));
		РасчетПоказателей.Вставить("Кредитоспособность4", Новый Структура("Числитель,Знаменатель", 
			"1300;1530;1540", 
			"1700"));
		РасчетПоказателей.Вставить("Кредитоспособность5", Новый Структура("Числитель,Знаменатель", 
			"2200", 
			"2110"));
		РасчетПоказателей.Вставить("Кредитоспособность6", Новый Структура("Числитель,Знаменатель", 
			"2400", 
			"2110"));
	Иначе
		РасчетПоказателей.Вставить("Кредитоспособность1", Новый Структура("Числитель,Знаменатель", 
			"1250", 
			"1510;1520"));
		РасчетПоказателей.Вставить("Кредитоспособность2", Новый Структура("Числитель,Знаменатель", 
			"1250;1220;1230;1240;1260", 
			"1510;1520"));
		РасчетПоказателей.Вставить("Кредитоспособность3", Новый Структура("Числитель,Знаменатель", 
			"1210;1250;1220;1230;1240;1260", 
			"1510;1520"));
		РасчетПоказателей.Вставить("Кредитоспособность4", Новый Структура("Числитель,Знаменатель", 
			"1300;1530;1540;1550", 
			"1700"));
		РасчетПоказателей.Вставить("Кредитоспособность5", Новый Структура("Числитель,Знаменатель", 
			"2110;-2120;-2210;-2220", 
			"2110"));
		РасчетПоказателей.Вставить("Кредитоспособность6", Новый Структура("Числитель,Знаменатель", 
			"2400", 
			"2110"));
	КонецЕсли;
	Для каждого РасчетПоказателя Из РасчетПоказателей Цикл
		РасчетПоказателя.Значение.Числитель = СтрРазделить(РасчетПоказателя.Значение.Числитель, ";", Ложь);
		РасчетПоказателя.Значение.Знаменатель = СтрРазделить(РасчетПоказателя.Значение.Знаменатель, ";", Ложь);
	КонецЦикла;	
		
	Показатели.Вставить("КредитоспособностьВесКатегории1", 0.05);
	Показатели.Вставить("КредитоспособностьВесКатегории2", 0.1);
	Показатели.Вставить("КредитоспособностьВесКатегории3", 0.4);
	Показатели.Вставить("КредитоспособностьВесКатегории4", 0.2);
	Показатели.Вставить("КредитоспособностьВесКатегории5", 0.15);
	Показатели.Вставить("КредитоспособностьВесКатегории6", 0.1);
	
	ЭтоТорговля = ЭтоТорговоеПредприятие(ИнформацияОСвязях.ВидыДеятельности);
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	Для каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		Для каждого РасчетПоказателя Из РасчетПоказателей Цикл
			ИмяПоказателя = РасчетПоказателя.Ключ + "_" + НомерГода;
			ЗначениеЧислителя = 0;
			Для каждого ЭлементРасчета Из РасчетПоказателя.Значение.Числитель Цикл
				Множитель = ?(Лев(ЭлементРасчета, 1) = "-", -1, 1);
				ИмяДанных = "П" + СтрЗаменить(ЭлементРасчета, "-", "") + "_" + НомерГода;
				ЗначениеЧислителя = ЗначениеЧислителя + Множитель * ДанныеОтчетности[ИмяДанных];
			КонецЦикла;
			ЗначениеЗнаменателя = 0;
			Для каждого ЭлементРасчета Из РасчетПоказателя.Значение.Знаменатель Цикл
				Множитель = ?(Лев(ЭлементРасчета, 1) = "-", -1, 1);
				ИмяДанных = "П" + СтрЗаменить(ЭлементРасчета, "-", "") + "_" + НомерГода;
				ЗначениеЗнаменателя = ЗначениеЗнаменателя + Множитель * ДанныеОтчетности[ИмяДанных];
			КонецЦикла;
			ЗначениеПоказателя = ?(ЗначениеЗнаменателя = 0, 0, Окр(ЗначениеЧислителя / ЗначениеЗнаменателя, 3));
			Показатели.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		КонецЦикла;
		
		Кредитоспособность1 = Показатели["Кредитоспособность1_" + НомерГода];
		Категория1 = ?(Кредитоспособность1 >= 0.1, 1, ?(Кредитоспособность1 >= 0.05, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория1_" + НомерГода, Категория1);
		
		Кредитоспособность2 = Показатели["Кредитоспособность2_" + НомерГода];
		Категория2 = ?(Кредитоспособность2 >= 0.8, 1, ?(Кредитоспособность2 >= 0.5, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория2_" + НомерГода, Категория2);
		
		Кредитоспособность3 = Показатели["Кредитоспособность3_" + НомерГода];
		Категория3 = ?(Кредитоспособность3 >= 1.5, 1, ?(Кредитоспособность3 >= 1, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория3_" + НомерГода, Категория3);
		
		Кредитоспособность4 = Показатели["Кредитоспособность4_" + НомерГода];
		Если ЭтоТорговля Тогда
			Категория4 = ?(Кредитоспособность4 >= 0.25, 1, ?(Кредитоспособность4 >= 0.15, 2, 3));
		Иначе
			Категория4 = ?(Кредитоспособность4 >= 0.4, 1, ?(Кредитоспособность4 >= 0.25, 2, 3));
		КонецЕсли;
		Показатели.Вставить("КредитоспособностьКатегория4_" + НомерГода, Категория4);
		
		Кредитоспособность5 = Показатели["Кредитоспособность5_" + НомерГода];
		Категория5 = ?(Кредитоспособность5 >= 0.1, 1, ?(Кредитоспособность5 >= 0, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория5_" + НомерГода, Категория5);
		
		Кредитоспособность6 = Показатели["Кредитоспособность6_" + НомерГода];
		Категория6 = ?(Кредитоспособность6 >= 0.06, 1, ?(Кредитоспособность6 >= 0, 2, 3));
		Показатели.Вставить("КредитоспособностьКатегория6_" + НомерГода, Категория6);
		
		Кредитоспособность = 0;
		Для Номер = 1 По 6 Цикл
			Категория    = Показатели["КредитоспособностьКатегория" + Номер + "_" + НомерГода];
			ВесКатегории = Показатели["КредитоспособностьВесКатегории" + Номер];
			Кредитоспособность = Кредитоспособность + Категория * ВесКатегории;
		КонецЦикла;
		Кредитоспособность = Окр(Кредитоспособность, 2);
		Показатели.Вставить("Кредитоспособность_" + НомерГода, Кредитоспособность);
		
		Если НомерГода = "1" Тогда
			ОценкаКредитоспособность = ?(Кредитоспособность <= 1.25, "ХорошаяОценка", 
				?(Кредитоспособность <= 2.35, "СредняяОценка", "ПлохаяОценка"));
			Показатели.ОценкаКредитоспособность = ОценкаКредитоспособность;
			Если ОценкаКредитоспособность = "ПлохаяОценка" Тогда
				Показатели.ПояснениеОценкиКредитоспособность = НСтр("ru='Кредитование связано с повышенным риском'");
			ИначеЕсли ОценкаКредитоспособность = "СредняяОценка" Тогда
				Показатели.ПояснениеОценкиКредитоспособность = НСтр("ru='Кредитование требует взвешенного подхода'");
			Иначе // "ХорошаяОценка"
				Показатели.ПояснениеОценкиКредитоспособность = НСтр("ru='Кредитоспособность не вызывает сомнений'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказателиРентабельностьАктивов(Показатели, СтрокаОтчетности, ДанныеПоГодам, ИнформацияОСвязях)
	
	Показатели.Вставить("ОценкаРентабельностьАктивов", "");
	Показатели.Вставить("ПояснениеОценкиРентабельностьАктивов", "");
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	Для каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		// Чистая прибыль
		ИмяПоказателя = "РентабельностьАктивов1_" + НомерГода;
		ЧистаяПрибыль = ДанныеОтчетности["П2400_" + НомерГода];
		Показатели.Вставить(ИмяПоказателя, ЧистаяПрибыль);
		// Активы
		ИмяПоказателя = "РентабельностьАктивов2_" + НомерГода;
		Активы = ДанныеОтчетности["П1600_" + НомерГода];
		Показатели.Вставить(ИмяПоказателя, Активы);
		// Средняя цифра по отрасли
		РентабельностьПоОтрасли = СредняяРентабельностьАктивовПоОтрасли(ИнформацияОСвязях.ВидыДеятельности, ДанныеГода.Год);
		ИмяПоказателя = "РентабельностьАктивов3_" + НомерГода;
		СредняяРентабельность = РентабельностьПоОтрасли.Рентабельность;
		Показатели.Вставить(ИмяПоказателя, СредняяРентабельность);
		Показатели.Вставить("ВидДеятельности", РентабельностьПоОтрасли.ВидДеятельности);
		// 90% от средней
		ИмяПоказателя = "РентабельностьАктивов4_" + НомерГода;
		ПредельнаяРентабельность = Окр(0.9 * СредняяРентабельность, 2);
		Показатели.Вставить(ИмяПоказателя, ПредельнаяРентабельность);
		// Рентабельность контрагента
		ИмяПоказателя = "РентабельностьАктивов_" + НомерГода;
		РентабельностьАктивов = ?(Активы = 0, 0, Окр(ЧистаяПрибыль / Активы * 100, 2));
		Показатели.Вставить(ИмяПоказателя, РентабельностьАктивов);
		
		Если НомерГода = "1" Тогда
			ОценкаРентабельностьАктивов = ?(РентабельностьАктивов < ПредельнаяРентабельность, "ПлохаяОценка", 
				?(РентабельностьАктивов <= СредняяРентабельность, "СредняяОценка", "ХорошаяОценка"));
			Показатели.ОценкаРентабельностьАктивов = ОценкаРентабельностьАктивов;
			Если ОценкаРентабельностьАктивов = "ПлохаяОценка" Тогда
				Показатели.ПояснениеОценкиРентабельностьАктивов = ?(СредняяРентабельность = 0, 
					НСтр("ru='Ниже нуля'"), 
					НСтр("ru='Значительно ниже средней'"));
			ИначеЕсли ОценкаРентабельностьАктивов = "СредняяОценка" Тогда
				Показатели.ПояснениеОценкиРентабельностьАктивов = ?(СредняяРентабельность = 0, 
					НСтр("ru='Равна нулю'"), 
					НСтр("ru='Немного ниже средней'"));
			Иначе // "ХорошаяОценка"
				Показатели.ПояснениеОценкиРентабельностьАктивов = ?(СредняяРентабельность = 0, 
					НСтр("ru='Выше нуля'"), 
					НСтр("ru='Выше средней'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказателиРентабельностьПродаж(Показатели, СтрокаОтчетности, ДанныеПоГодам, ИнформацияОСвязях)
	
	Показатели.Вставить("ОценкаРентабельностьПродаж", "");
	Показатели.Вставить("ПояснениеОценкиРентабельностьПродаж", "");
	
	ДанныеОтчетности = СтрокаОтчетности.Показатели;
	Для каждого ДанныеГода Из ДанныеПоГодам Цикл
		НомерГода = ДанныеГода.НомерГода;
		// Прибыль от продаж
		ИмяПоказателя = "РентабельностьПродаж1_" + НомерГода;
		Если СтрокаОтчетности.ТипОтчетности = "2" Тогда
			ПрибыльОтПродаж = ДанныеОтчетности["П2200_" + НомерГода];
		Иначе // "1"
			ПрибыльОтПродаж = ДанныеОтчетности["П2110_" + НомерГода]
				- ДанныеОтчетности["П2120_" + НомерГода]
				- ДанныеОтчетности["П2210_" + НомерГода]
				- ДанныеОтчетности["П2220_" + НомерГода];
		КонецЕсли;
		Показатели.Вставить(ИмяПоказателя, ПрибыльОтПродаж);
		// Себестоимость продаж
		ИмяПоказателя = "РентабельностьПродаж2_" + НомерГода;
		Себестоимость = ДанныеОтчетности["П2120_" + НомерГода]
			+ ДанныеОтчетности["П2210_" + НомерГода]
			+ ДанныеОтчетности["П2220_" + НомерГода];
		Показатели.Вставить(ИмяПоказателя, Себестоимость);
		// Средняя цифра по отрасли
		РентабельностьПоОтрасли = СредняяРентабельностьПродажПоОтрасли(ИнформацияОСвязях.ВидыДеятельности, ДанныеГода.Год);
		ИмяПоказателя = "РентабельностьПродаж3_" + НомерГода;
		СредняяРентабельность = РентабельностьПоОтрасли.Рентабельность;
		Показатели.Вставить(ИмяПоказателя, СредняяРентабельность);
		Показатели.Вставить("ВидДеятельности", РентабельностьПоОтрасли.ВидДеятельности);
		// 90% от средней
		ИмяПоказателя = "РентабельностьПродаж4_" + НомерГода;
		ПредельнаяРентабельность = Окр(0.9 * СредняяРентабельность, 2);
		Показатели.Вставить(ИмяПоказателя, ПредельнаяРентабельность);
		// Рентабельность контрагента
		ИмяПоказателя = "РентабельностьПродаж_" + НомерГода;
		РентабельностьПродаж = ?(Себестоимость = 0, 0, Окр(ПрибыльОтПродаж / Себестоимость * 100, 2));
		Показатели.Вставить(ИмяПоказателя, РентабельностьПродаж);
		
		Если НомерГода = "1" Тогда
			ОценкаРентабельностьПродаж = ?(РентабельностьПродаж < ПредельнаяРентабельность, "ПлохаяОценка", 
				?(РентабельностьПродаж <= СредняяРентабельность, "СредняяОценка", "ХорошаяОценка"));
			Показатели.ОценкаРентабельностьПродаж = ОценкаРентабельностьПродаж;
			Если ОценкаРентабельностьПродаж = "ПлохаяОценка" Тогда
				Показатели.ПояснениеОценкиРентабельностьПродаж = ?(СредняяРентабельность = 0, 
					НСтр("ru='Ниже нуля'"), 
					НСтр("ru='Значительно ниже средней'"));
			ИначеЕсли ОценкаРентабельностьПродаж = "СредняяОценка" Тогда
				Показатели.ПояснениеОценкиРентабельностьПродаж = ?(СредняяРентабельность = 0, 
					НСтр("ru='Равна нулю'"), 
					НСтр("ru='Немного ниже средней'"));
			Иначе // "ХорошаяОценка"
				Показатели.ПояснениеОценкиРентабельностьПродаж = ?(СредняяРентабельность = 0, 
					НСтр("ru='Выше нуля'"), 
					НСтр("ru='Выше средней'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоПроизводственноеПредприятие(ВидыДеятельности)
	
	Если ВидыДеятельности.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОсновнойКодОКВЭД = ВидыДеятельности[0].КодОКВЭД;
	Если ВидыДеятельности[0].ЭтоОКВЭД2 Тогда
		ПроизводственныеКоды = СтрРазделить(
			"10;12;13;14;15;16;17;19;08.92.2;20;21;22;23;24;25;26;27;28;29;30;31;32;33;35", ";", Ложь);
	Иначе
		ПроизводственныеКоды = СтрРазделить(
			"15;16;17;18;19;20;21;23;24;25;26;27;28;29;30;31;32;33;34;35;36;40", ";", Ложь);
	КонецЕсли;
	
	Для каждого ПроизводственныйКод Из ПроизводственныеКоды Цикл
	    Если Лев(ОсновнойКодОКВЭД, СтрДлина(ПроизводственныйКод)) = ПроизводственныйКод Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;

КонецФункции

Функция ЭтоТорговоеПредприятие(ВидыДеятельности)
	
	Если ВидыДеятельности.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОсновнойКодОКВЭД = ВидыДеятельности[0].КодОКВЭД;
	Если ВидыДеятельности[0].ЭтоОКВЭД2 Тогда
		ТорговыеКоды = СтрРазделить("45;46;47;64.91", ";", Ложь);
	Иначе
		ТорговыеКоды = СтрРазделить("50;51;52;65.21", ";", Ложь);
	КонецЕсли;
	
	Для каждого ТорговыйКод Из ТорговыеКоды Цикл
	    Если Лев(ОсновнойКодОКВЭД, СтрДлина(ТорговыйКод)) = ТорговыйКод Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;

КонецФункции

Функция СредняяРентабельностьАктивовПоОтрасли(ВидыДеятельности, Год)
	
	Результат = Новый Структура("ВидДеятельности,Рентабельность", Неопределено, 0);
	Если ВидыДеятельности.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ВидыДеятельности[0].ЭтоОКВЭД2 Тогда
		ОсновнойКодОКВЭД = ГруппаРентабельностиПоКодуОКВЭД2(ВидыДеятельности[0].КодОКВЭД);
	Иначе
		ОсновнойКодОКВЭД = Лев(ВидыДеятельности[0].КодОКВЭД, 2);
	КонецЕсли;
	Если ПустаяСтрока(ОсновнойКодОКВЭД) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ВидДеятельности = ВидыДеятельности[0].НаименованиеОКВЭД;
	
	Макет = ПолучитьМакет("ПредельныеЗначенияРентабельностиИНалоговойНагрузки");
	ОбластьКлассификатор = Макет.Область("Классификатор");
	ОбластьСтроки = Макет.НайтиТекст(ОсновнойКодОКВЭД, , ОбластьКлассификатор, , Истина);
	Если ОбластьСтроки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	НомерСтроки = ОбластьСтроки.Верх;
	ОбластьРентабельностьАктивов = Макет.Область("РентабельностьАктивов");
	ОбластьКолонки = Макет.НайтиТекст(Год, , ОбластьРентабельностьАктивов, , Истина);
	НомерКолонки   = ОбластьКолонки.Лево;
	Результат.Рентабельность = Число(Макет.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст);
	
	Возврат Результат;

КонецФункции

Функция СредняяРентабельностьПродажПоОтрасли(ВидыДеятельности, Год)
	
	Результат = Новый Структура("ВидДеятельности,Рентабельность", Неопределено, 0);
	Если ВидыДеятельности.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ВидыДеятельности[0].ЭтоОКВЭД2 Тогда
		ОсновнойКодОКВЭД = ГруппаРентабельностиПоКодуОКВЭД2(ВидыДеятельности[0].КодОКВЭД);
	Иначе
		ОсновнойКодОКВЭД = Лев(ВидыДеятельности[0].КодОКВЭД, 2);
	КонецЕсли;
	Если ПустаяСтрока(ОсновнойКодОКВЭД) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ВидДеятельности = ВидыДеятельности[0].НаименованиеОКВЭД;
	
	Макет = ПолучитьМакет("ПредельныеЗначенияРентабельностиИНалоговойНагрузки");
	ОбластьКлассификатор = Макет.Область("Классификатор");
	ОбластьСтроки = Макет.НайтиТекст(ОсновнойКодОКВЭД, , ОбластьКлассификатор, , Истина);
	Если ОбластьСтроки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	НомерСтроки = ОбластьСтроки.Верх;
	ОбластьРентабельностьПродаж = Макет.Область("РентабельностьПродаж");
	ОбластьКолонки = Макет.НайтиТекст(Год, , ОбластьРентабельностьПродаж, , Истина);
	НомерКолонки   = ОбластьКолонки.Лево;
	Результат.Рентабельность = Число(Макет.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст);
	
	Возврат Результат;

КонецФункции

Функция ГруппаРентабельностиПоКодуОКВЭД2(КодОКВЭД2)
	
	// Ключ - код ОКВЭД или группа редакции 2, значение - группа редакции 1.
	СоответствиеКодов = Новый Соответствие; 
	СоответствиеКодов.Вставить("01",      "01");
	СоответствиеКодов.Вставить("02",      "01");
	СоответствиеКодов.Вставить("03",      "05");
	СоответствиеКодов.Вставить("05",      "10");
	СоответствиеКодов.Вставить("08.92",   "10");
	СоответствиеКодов.Вставить("06",      "10");
	СоответствиеКодов.Вставить("07.21",   "10");
	СоответствиеКодов.Вставить("09.1",    "10");
	СоответствиеКодов.Вставить("07",      "13");
	СоответствиеКодов.Вставить("08",      "13");
	СоответствиеКодов.Вставить("09.9",    "13");
	СоответствиеКодов.Вставить("11",      "15");
	СоответствиеКодов.Вставить("12",      "15");
	СоответствиеКодов.Вставить("13",      "17");
	СоответствиеКодов.Вставить("14",      "17");
	СоответствиеКодов.Вставить("15.11.1", "17");
	СоответствиеКодов.Вставить("15",      "19");
	СоответствиеКодов.Вставить("16",      "20");
	СоответствиеКодов.Вставить("17",      "21");
	СоответствиеКодов.Вставить("18",      "22");
	СоответствиеКодов.Вставить("58",      "22");
	СоответствиеКодов.Вставить("19",      "23");
	СоответствиеКодов.Вставить("24.46",   "23");
	СоответствиеКодов.Вставить("20",      "24");
	СоответствиеКодов.Вставить("26.80",   "24");
	СоответствиеКодов.Вставить("21",      "24");
	СоответствиеКодов.Вставить("22",      "25");
	СоответствиеКодов.Вставить("23",      "26");
	СоответствиеКодов.Вставить("24",      "27");
	СоответствиеКодов.Вставить("25",      "28");
	СоответствиеКодов.Вставить("33.1",    "28");
	СоответствиеКодов.Вставить("33.11",   "28");
	СоответствиеКодов.Вставить("33.12",   "28");
	СоответствиеКодов.Вставить("28",      "29");
	СоответствиеКодов.Вставить("25.4",    "29");
	СоответствиеКодов.Вставить("27.5",    "29");
	СоответствиеКодов.Вставить("33",      "29");
	СоответствиеКодов.Вставить("28.23",   "30");
	СоответствиеКодов.Вставить("27",      "30");
	СоответствиеКодов.Вставить("26",      "30");
	СоответствиеКодов.Вставить("32",      "30");
	СоответствиеКодов.Вставить("33.13",   "30");
	СоответствиеКодов.Вставить("33.14",   "30");
	СоответствиеКодов.Вставить("95.12",   "30");
	СоответствиеКодов.Вставить("29",      "34");
	СоответствиеКодов.Вставить("30",      "34");
	СоответствиеКодов.Вставить("28.99.3", "34");
	СоответствиеКодов.Вставить("33.15",   "34");
	СоответствиеКодов.Вставить("33.16",   "34");
	СоответствиеКодов.Вставить("33.17",   "34");
	СоответствиеКодов.Вставить("33.19",   "34");
	СоответствиеКодов.Вставить("33.2",    "34");
	СоответствиеКодов.Вставить("31",      "36");
	СоответствиеКодов.Вставить("38",      "36");
	СоответствиеКодов.Вставить("35",      "40");
	СоответствиеКодов.Вставить("36",      "40");
	СоответствиеКодов.Вставить("41",      "45");
	СоответствиеКодов.Вставить("42",      "45");
	СоответствиеКодов.Вставить("43",      "45");
	СоответствиеКодов.Вставить("45",      "50");
	СоответствиеКодов.Вставить("47.3",    "50");
	СоответствиеКодов.Вставить("46",      "51");
	СоответствиеКодов.Вставить("47",      "52");
	СоответствиеКодов.Вставить("55",      "55");
	СоответствиеКодов.Вставить("56",      "55");
	СоответствиеКодов.Вставить("49",      "60");
	СоответствиеКодов.Вставить("50",      "61");
	СоответствиеКодов.Вставить("51",      "62");
	СоответствиеКодов.Вставить("52",      "63");
	СоответствиеКодов.Вставить("65",      "64");
	СоответствиеКодов.Вставить("66",      "65");
	СоответствиеКодов.Вставить("67",      "65");
	СоответствиеКодов.Вставить("74",      "70");
	СоответствиеКодов.Вставить("73",      "70");
	СоответствиеКодов.Вставить("85.2",    "75");
	СоответствиеКодов.Вставить("74.60",   "80");
	СоответствиеКодов.Вставить("80",      "85");
	СоответствиеКодов.Вставить("91.3",    "90");
	СоответствиеКодов.Вставить("91.5",    "90");
	СоответствиеКодов.Вставить("92",      "90");
	СоответствиеКодов.Вставить("92.71",   "92");
	СоответствиеКодов.Вставить("52.7",    "95");
	СоответствиеКодов.Вставить("72.5",    "95");
	СоответствиеКодов.Вставить("32.20.9", "95");
	СоответствиеКодов.Вставить("32.30.9", "95");
	СоответствиеКодов.Вставить("99",      "95");
	
	ДлинаКода = СтрДлина(КодОКВЭД2);
	Для КоличествоЗнаков = 0 По ДлинаКода - 2 Цикл
		КодДляПоиска = Лев(КодОКВЭД2, ДлинаКода - КоличествоЗнаков);
		ГруппаОКВЭД1 = СоответствиеКодов[КодДляПоиска];
		Если ГруппаОКВЭД1 <> Неопределено Тогда
			Возврат ГруппаОКВЭД1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";

КонецФункции

#КонецОбласти

#Область ПроверкиКонтролирующимиОрганами

Процедура СформироватьРезультатПроверкиКонтролирующимиОрганами(ИнформацияОПроверках, ДанныеОтчета)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ОбластиМакета = ВсеОбластиМакета("Проверки");
	ОбластиРасшифровки = НоваяТаблицаОбластиРасшифровки();
	
	// Шапка
	ТабличныйДокумент.Вывести(ОбластиМакета.Шапка);
	
	ЕстьПроверки = ИнформацияОПроверках.Проверки.Количество() > 0;
	
	Если ЕстьПроверки Тогда
	
		// Проверки с группировкой по месяцам
		
		ТаблицаПериоды = ИнформацияОПроверках.Проверки.Скопировать(, "ПериодПроверки");
		ТаблицаПериоды.Свернуть("ПериодПроверки");
		ТаблицаПериоды.Сортировать("ПериодПроверки");
		ИнформацияОПроверках.Проверки.Индексы.Добавить("ПериодПроверки");
		НомерПроверки = 0;
		
		Для каждого СтрокаПериода Из ТаблицаПериоды Цикл
			
			// Период
			ОбластиМакета.ПериодПроверки.Параметры.Заполнить(СтрокаПериода);
			ТабличныйДокумент.Вывести(ОбластиМакета.ПериодПроверки);
			ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
			
			// Проверки
			ОтборПоПериоду = Новый Структура("ПериодПроверки", СтрокаПериода.ПериодПроверки);
			ПроверкиПериода = ИнформацияОПроверках.Проверки.Скопировать(ОтборПоПериоду);
			ПроверкиПериода.Сортировать("ДатаПроверки,КонтролирующийОрган");
			Для каждого СтрокаПроверки Из ПроверкиПериода Цикл
				НомерПроверки = НомерПроверки + 1;
				Проверка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1, %2",
					СтрокаПроверки.КонтролирующийОрган,
					?(СтрокаПроверки.ПлановаяПроверка, НСтр("ru='плановая проверка'"), НСтр("ru='внеплановая проверка'")));
				ОбластиМакета.Проверка.Параметры.Проверка = Проверка;
				ТабличныйДокумент.Вывести(ОбластиМакета.Проверка);
				ОбластиМакета.ОписаниеПроверки.Параметры.Заполнить(СтрокаПроверки);
				ТабличныйДокумент.Вывести(ОбластиМакета.ОписаниеПроверки);
				Если ЗначениеЗаполнено(СтрокаПроверки.ЦельПроверки) Тогда
					ОбластиМакета.ЦельПроверки.Параметры.Заполнить(СтрокаПроверки);
					ТабличныйДокумент.Вывести(ОбластиМакета.ЦельПроверки);
				КонецЕсли;
				ОбластиМакета.РезультатПроверки.Параметры.Заполнить(СтрокаПроверки);
				ТабличныйДокумент.Вывести(ОбластиМакета.РезультатПроверки);
				
				// Нарушения
				ЕстьНарушения = СтрокаПроверки.Нарушения.Количество() > 0;
				Если ЕстьНарушения Тогда
					
					// Свернуто
					ИмяОбластиРасшифровки = "Проверка" + Формат(НомерПроверки, "ЧГ=");
					Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
						"Показать", "РезультатПроверки", ИмяОбластиРасшифровки);
					ОбластиМакета.ПоказатьНарушения.Параметры.Расшифровка = Расшифровка;
					ТабличныйДокумент.Вывести(ОбластиМакета.ПоказатьНарушения);
				
					// Развернуто
					СтрокаОбласти = ОбластиРасшифровки.Добавить();
					СтрокаОбласти.ИмяОбласти   = ИмяОбластиРасшифровки;
					СтрокаОбласти.ПерваяСтрока = ТабличныйДокумент.ВысотаТаблицы + 1;
					
					Для каждого СтрокаНарушения Из СтрокаПроверки.Нарушения Цикл
						ОбластиМакета.НомерНарушения.Параметры.Заполнить(СтрокаНарушения);
						ТабличныйДокумент.Вывести(ОбластиМакета.НомерНарушения);
						Если ЗначениеЗаполнено(СтрокаНарушения.Нарушение) Тогда
							ОбластиМакета.Нарушение.Параметры.Заполнить(СтрокаНарушения);
							ТабличныйДокумент.Вывести(ОбластиМакета.Нарушение);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаНарушения.НарушенныйАкт) Тогда
							ОбластиМакета.НарушенныйАкт.Параметры.Заполнить(СтрокаНарушения);
							ТабличныйДокумент.Вывести(ОбластиМакета.НарушенныйАкт);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаНарушения.Предписание) Тогда
							ОбластиМакета.Предписание.Параметры.Заполнить(СтрокаНарушения);
							ТабличныйДокумент.Вывести(ОбластиМакета.Предписание);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаНарушения.Исполнение) Тогда
							ОбластиМакета.Исполнение.Параметры.Заполнить(СтрокаНарушения);
							ТабличныйДокумент.Вывести(ОбластиМакета.Исполнение);
						КонецЕсли;
					КонецЦикла;
					
					Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
						"Свернуть", "РезультатПроверки", ИмяОбластиРасшифровки);
					ОбластиМакета.СвернутьНарушения.Параметры.Расшифровка = Расшифровка;
					ТабличныйДокумент.Вывести(ОбластиМакета.СвернутьНарушения);
					СтрокаОбласти.ПоследняяСтрока = ТабличныйДокумент.ВысотаТаблицы;
					ТабличныйДокумент.Область(СтрокаОбласти.ПерваяСтрока, , СтрокаОбласти.ПоследняяСтрока).Видимость = Ложь;
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластиМакета.Разделитель);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ОбластиРасшифровки.ЗаполнитьЗначения("РезультатПроверки", "ИмяДокумента");
		Для каждого СтрокаТаблицы Из ОбластиРасшифровки Цикл
			НоваяСтрока = ДанныеОтчета.ОбластиРасшифровки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
	Иначе
	
		ТабличныйДокумент.Вывести(ОбластиМакета.ШапкаНетДанных);
	
	КонецЕсли; 
	
	ДанныеОтчета.Вставить("РезультатПроверки", ТабличныйДокумент);
	ДанныеОтчета.Вставить("ИмяФайлаПроверки", 
		СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Досье %1 - проверки'"),
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
					ИнформацияОПроверках.НаименованиеСокращенное, ""))));
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ВывестиСтрокуЕще(ТабличныйДокумент, ОбластиМакета, ИмяДокумента, ИмяОбластиРасшифровки, КоличествоВсего)
	
	Если КоличествоВсего = 0 Тогда
		ТекстЕще = НСтр("ru='Еще'");
	Иначе
		ТекстЕще = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Еще %1'"),
			КоличествоВсего - 1);
	КонецЕсли;
	ОбластиМакета.Еще.Параметры.ТекстЕще = ТекстЕще;
	Расшифровка = Новый Структура("Действие,ИмяДокумента,ИмяОбласти", 
		"Показать", ИмяДокумента, ИмяОбластиРасшифровки);
	ОбластиМакета.Еще.Параметры.Расшифровка = Расшифровка;
	ТабличныйДокумент.Вывести(ОбластиМакета.Еще);

КонецПроцедуры

Функция ВсеОбластиМакета(ИмяМакета)
	
	Макет     = ПолучитьМакет(ИмяМакета);
	Результат = Новый Структура;
	Для каждого Область Из Макет.Области Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Результат.Вставить(Область.Имя, Макет.ПолучитьОбласть(Область.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции 

Функция ВсеКартинкиТабличногоДокумента(ТабличныйДокумент)
	
	Результат = Новый Структура;
	Для каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		Если Рисунок.ТипРисунка = ТипРисункаТабличногоДокумента.Картинка Тогда
			Результат.Вставить(Рисунок.Имя, Рисунок);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаОбластиРасшифровки()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИмяДокумента",    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяОбласти",      Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПерваяСтрока",    Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ПоследняяСтрока", Новый ОписаниеТипов("Число"));
	Возврат Результат;
	
КонецФункции 

Функция ПериодыБухгалтерскойОтчетности()

	Результат = Новый Структура;
	Результат.Вставить("Год_1", "2015");
	Результат.Вставить("Год_2", "2014");
	Результат.Вставить("Год_3", "2013");
	Результат.Вставить("КонецГода_1", Формат(Дата(2015,12,31), "ДЛФ=DD"));
	Результат.Вставить("КонецГода_2", Формат(Дата(2014,12,31), "ДЛФ=DD"));
	Результат.Вставить("КонецГода_3", Формат(Дата(2013,12,31), "ДЛФ=DD"));
	Возврат Результат;

КонецФункции 

#КонецОбласти	

#КонецОбласти	

#КонецЕсли