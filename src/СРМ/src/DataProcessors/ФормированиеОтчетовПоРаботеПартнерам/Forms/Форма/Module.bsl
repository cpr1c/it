#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьСтатусыПоУмолчанию();
	ЗаполнитьДеревоЗадач();
	УстановитьУсловноеОформлениеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//TODO: Вставить содержимое обработчика
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	//TODO: Вставить содержимое обработчика
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗначенияДляВыбора = УправлениеЗадачамиПовтИсп.УпорядоченныйСписокСтатусов();
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отмеченные", Статусы);
	ПараметрыОткрытия.Вставить("ОписаниеТипов", Новый ОписаниеТипов("СправочникСсылка.СтатусыЗадач"));
	ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ЗначенияДляВыбора);
	ПараметрыОткрытия.Вставить("ЗначенияДляВыбораЗаполнены", Элемент.СписокВыбора.Количество() > 0);
//	ПараметрыОткрытия.Вставить("ОграничиватьВыборУказаннымиЗначениями", ПараметрыОткрытия.ЗначенияДляВыбораЗаполнены);
	ПараметрыОткрытия.Вставить("Представление", Элемент.Заголовок);
//	ПараметрыОткрытия.Вставить("ПараметрыВыбора", Новый Массив(С));
	ПараметрыОткрытия.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	Обработчик = Новый ОписаниеОповещения("СтатусыНачалоВыбораЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыОткрытия, ЭтотОбъект,,,, Обработчик, Режим);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачи

&НаКлиенте
Процедура ЗадачиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекДанные = Элементы.Задачи.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Задачи.ТекущийЭлемент = Элементы.ЗадачиПометка Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Изменено = Истина;
	ТекДанные.Пометка = Истина;
	ЗадачиПометкаПриИзмененииНаСервере(ТекДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПометкаПриИзменении(Элемент)
	ЗадачиПометкаПриИзмененииНаСервере(Элементы.Задачи.ТекущаяСтрока);
КонецПроцедуры


&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТЧ = Задачи.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ЗадачиНомер" Тогда
		ПоказатьЗначение(Новый ОписаниеОповещения, СтрокаТЧ.Задача);
	ИначеЕсли Поле.Имя = "ЗадачиФактическиеТрудозатраты" Тогда 
		УправлениеЗадачамиКлиент.ОткрытьТрудозатратыПоЗадаче(СтрокаТЧ.Задача);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьСписокЗадач(Команда)
	ЗаполнитьДеревоЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияЗадач(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	ПрименитьИзмененияЗадачНаСервере();
КонецПроцедуры



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПометкуПодчиненныхСтрок(ТекущаяСтрока, Пометка)
	Для Каждого СтрокаТЧ ИЗ ТекущаяСтрока.ПолучитьЭлементы() Цикл
		УстановитьПометкуПодчиненныхСтрок(СтрокаТЧ, Пометка);
		
		СтрокаТЧ.Пометка = Пометка;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуРодительскихЭлементов(ТекущаяСтрока)
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЕстьПометка = Ложь;
	Для Каждого Стр ИЗ Родитель.ПолучитьЭлементы() Цикл
		Если Стр.Пометка Тогда
			ЕстьПометка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Родитель.Пометка = ЕстьПометка;
	
	УстановитьПометкуРодительскихЭлементов(Родитель);
КонецПроцедуры


&НаСервере
Процедура ЗадачиПометкаПриИзмененииНаСервере(ТекущаяСтрока)
	СтрокаТЧ = Задачи.НайтиПоИдентификатору(ТекущаяСтрока);
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УстановитьПометкуПодчиненныхСтрок(СтрокаТЧ, СтрокаТЧ.Пометка);
	УстановитьПометкуРодительскихЭлементов(СтрокаТЧ);
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачуВДанныеДляОтчетовПоРаботам(СтрокаДерева, СоответствиеДанныхОтчетовПоРаботам)
	СтрокиПоПартнеру = СоответствиеДанныхОтчетовПоРаботам[СтрокаДерева.Партнер];
	Если СтрокиПоПартнеру = Неопределено Тогда
		СоответствиеДанныхОтчетовПоРаботам.Вставить(СтрокаДерева.Партнер, Новый Массив);
		СтрокиПоПартнеру = СоответствиеДанныхОтчетовПоРаботам[СтрокаДерева.Партнер];
	КонецЕсли;	
	
	СтрокиПоПартнеру.Добавить(СтрокаДерева.ПолучитьИдентификатор());
КонецПроцедуры

&НаСервере
Процедура ПрименитьИзмененияЗадачи(СтрокаДерева, СоответствиеДанныхОтчетовПоРаботам)
	Если СтрокаДерева.Изменено Тогда
		ЗадачаОбъект = СтрокаДерева.Задача.ПолучитьОбъект();

		ПоляИзменяемые = Новый Массив;
		ПоляИзменяемые.Добавить("Тема");
		ПоляИзменяемые.Добавить("КонтактОбращения");
		ПоляИзменяемые.Добавить("ВидОплаты");
		ПоляИзменяемые.Добавить("Статус");
		ПоляИзменяемые.Добавить("ОценкаТрудозатрат");
		ПоляИзменяемые.Добавить("Исполнитель");
		ПоляИзменяемые.Добавить("Спринт");
		ПоляИзменяемые.Добавить("КатегорияЗакрытия");

		ЗаполнитьЗначенияСвойств(ЗадачаОбъект, СтрокаДерева, СтрСоединить(ПоляИзменяемые, ","));

		Если Не ЗадачаОбъект.ПроверитьЗаполнение() Тогда
			Сообщить("Не все поля заполнены правильно для задачи "+ЗадачаОбъект);
			Возврат;
		КонецЕсли;

		Попытка
			ЗадачаОбъект.Записать();
			СтрокаДерева.Изменено = Ложь;

			ЗаполнитьЗначенияСвойств(СтрокаДерева, ЗадачаОбъект, "ДатаВыполнения,ДатаЗакрытия");

		Исключение
			Сообщить("Не удалось обновить данные по задаче " + ЗадачаОбъект + ": " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;

	ДобавитьЗадачуВДанныеДляОтчетовПоРаботам(СтрокаДерева, СоответствиеДанныхОтчетовПоРаботам);

КонецПроцедуры

&НаСервере
Процедура ПрименитьИзмененияПоДеревуЗадач(Дерево, СоответствиеДанныхОтчетовПоРаботам)
	Для Каждого СтрокаТЧ Из Дерево.ПолучитьЭлементы() Цикл
		Если Не СтрокаТЧ.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.Уровень<>2 Тогда
			ПрименитьИзмененияПоДеревуЗадач(СтрокаТЧ, СоответствиеДанныхОтчетовПоРаботам);
		Иначе
			ПрименитьИзмененияЗадачи(СтрокаТЧ, СоответствиеДанныхОтчетовПоРаботам);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетыПоРаботе(СоответствиеДанныхОтчетовПоРаботам)
	Для Каждого КлючЗначение Из СоответствиеДанныхОтчетовПоРаботам Цикл
		ОтчетПоРаботам = Документы.ОтчетПоРаботамПартнеру.ТекущийОтчетПоРаботамПартнера(КлючЗначение.Ключ);
		Если ЗначениеЗаполнено(ОтчетПоРаботам) Тогда
			ОтчетПоРаботамОбъект = ОтчетПоРаботам.ПолучитьОбъект();
		Иначе
			ОтчетПоРаботамОбъект = Документы.ОтчетПоРаботамПартнеру.СоздатьДокумент();
			ОтчетПоРаботамОбъект.Партнер = КлючЗначение.Ключ;
			ОтчетПоРаботамОбъект.Дата = ТекущаяДатаСеанса();
			ОтчетПоРаботамОбъект.Заполнить(Неопределено);
			ОтчетПоРаботамОбъект.УстановитьНовыйНомер();
			ОтчетПоРаботамОбъект.Комментарий = "Сформирован автоматически обработкой формирования отчетов по партнерам "+ТекущаяДатаСеанса();
		КонецЕсли;
		
		Для Каждого ИдентификаторСтрокиДерева Из КлючЗначение.Значение Цикл
			СтрокаДерева = Задачи.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Задача", СтрокаДерева.Задача);
			НайденныеСтроки = ОтчетПоРаботамОбъект.Задачи.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество()>0 Тогда
				Сообщить("Задача "+СтрокаДерева.Задача+" была добавлена ранее в отчет");
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ОтчетПоРаботамОбъект.Задачи.Добавить();
			НоваяСтрока.Задача = СтрокаДерева.Задача;
			НоваяСтрока.Исполнитель = СтрокаДерева.Исполнитель;
			НоваяСтрока.ВидОплаты = СтрокаДерева.ВидОплаты;
			НоваяСтрока.КоличествоЧасов = СтрокаДерева.ОценкаТрудозатрат;
			НоваяСтрока.КонтактОбращения = СтрокаДерева.КонтактОбращения;
		КонецЦикла;
		
		Попытка
			ОтчетПоРаботамОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Не удалось добавить задачи по партнеру "+КлючЗначение.Ключ+" в отчет по нему");
			Продолжить;
		КонецПопытки;
		
		Для Каждого ИдентификаторСтрокиДерева Из КлючЗначение.Значение Цикл
			СтрокаДерева = Задачи.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
			СтрокаДерева.ДобавленаВОтчет = Истина;
			СтрокаДерева.Пометка = Ложь;
			УстановитьПометкуРодительскихЭлементов(СтрокаДерева);
		КонецЦикла;
		
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ПрименитьИзмененияЗадачНаСервере()
	СоответствиеДанныхОтчетовПоРаботам = Новый Соответствие;
	
	ПрименитьИзмененияПоДеревуЗадач(Задачи, СоответствиеДанныхОтчетовПоРаботам);
	СформироватьОтчетыПоРаботе(СоответствиеДанныхОтчетовПоРаботам);
	
КонецПроцедуры


&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	УсловноеОформление.Элементы.Очистить();
	
	// Уровень исполнителя
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НовыйЭлементОформления.Отбор, "Задачи.Уровень", 0);
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	

	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиНомер");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиТема");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиПартнер");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиПроект");
	
	// Уровень проект
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НовыйЭлементОформления.Отбор, "Задачи.Уровень", 1);
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	

	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиНомер");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиТема");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиПартнер");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиИсполнитель");
	
	// Измененные строки
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НовыйЭлементОформления.Отбор, "Задачи.Изменено", Истина);
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗолотистый);	

	ДобавитьПолеОформления(НовыйЭлементОформления, "Задачи");
	
	//Разрешаем редактировать только уровень задач
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование = Истина;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НовыйЭлементОформления.Отбор, "Задачи.Уровень", 2,
		ВидСравненияКомпоновкиДанных.НеРавно);
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиНомер");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиТема");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиПартнер");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиИсполнитель");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиКонтактОбращения");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиВидОплаты");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиКатегорияЗакрытия");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиСтатус");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиСпринт");
	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиОценкаТрудозатрат");

	
	//Разрешаем редактировать только уровень задач
	НовыйЭлементОформления = УсловноеОформление.Элементы.Добавить();
	НовыйЭлементОформления.Использование = Истина;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НовыйЭлементОформления.Отбор, "Задачи.ДобавленаВОтчет", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НовыйЭлементОформления.Отбор, "Задачи.Уровень", 2);
	НовыйЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ДобавитьПолеОформления(НовыйЭлементОформления, "ЗадачиПометка");
	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолеОформления(ЭлементОформления, ИмяПоля)
	НовоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗадач()
	Задачи.ПолучитьЭлементы().Очистить();
	
	ЗАпрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Задача,
	|	Задача.Исполнитель КАК Исполнитель,
	|	Задача.ОценкаТрудозатрат КАК ОценкаТрудозатрат,
	|	Задача.ВидОплаты КАК ВидОплаты,
	|	Задача.КонтактОбращения КАК КонтактОбращения,
	|	Задача.Проект КАК Проект,
	|	Задача.Спринт КАК Спринт,
	|	Задача.Статус КАК Статус,
	|	Задача.Тема КАК Тема,
	|	Задача.КатегорияЗакрытия КАК КатегорияЗакрытия,
	|	Задача.Номер КАК Номер,
	|	Задача.ДатаЗакрытия КАК ДатаЗакрытия,
	|	Задача.ДатаВыполнения КАК ДатаВыполнения,
	|	Задача.Проект.Партнер КАК Партнер,
	|	ЕСТЬNULL(ТрудозатратыОбороты.ФактОборот, 0) КАК ФактическиеТрудозатраты
	|ИЗ
	|	Документ.Задача КАК Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Трудозатраты.Обороты КАК ТрудозатратыОбороты
	|		ПО Задача.Ссылка = ТрудозатратыОбороты.Предмет
	|ГДЕ
	|	Задача.Статус В (&Статусы)
	|	И (Задача.ДатаЗакрытия >= &ДатаНачалаУчета
	|	ИЛИ Задача.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1))
	|	И НЕ Задача.Ссылка В
	|		(ВЫБРАТЬ
	|			ОтчетПоРаботамПартнеруЗадачи.Задача
	|		ИЗ
	|			Документ.ОтчетПоРаботамПартнеру.Задачи КАК ОтчетПоРаботамПартнеруЗадачи
	|		ГДЕ
	|			ОтчетПоРаботамПартнеруЗадачи.Ссылка.Проведен)
	|ИТОГИ
	|ПО
	|	Исполнитель,
	|	Проект";
	Запрос.УстановитьПараметр("ДатаНачалаУчета", Константы.ДатаНачалаФормированияОтчетовПоРаботамПартнерам.Получить());
	Запрос.УстановитьПараметр("Статусы",Статусы);
	
	ВыборкаИсполнитель=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИсполнитель.Следующий() ЦИкл
		СтрокаИсполнитель=Задачи.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИсполнитель,ВыборкаИсполнитель);
		СтрокаИсполнитель.Уровень = 0;
		
		ВыборкаПроект = ВыборкаИсполнитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПроект.Следующий() Цикл
			СтрокаПроект = СтрокаИсполнитель.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПроект, ВыборкаПроект);
			СтрокаПроект.Уровень = 1;
			
			Выборка = ВыборкаПроект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				НС = СтрокаПроект.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НС, Выборка);
				НС.Уровень = 2;
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;		
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСтатусыПоУмолчанию()
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СтатусыЗадач.Ссылка,
	|	СтатусыЗадач.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	СтатусыЗадач.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СтатусыЗадач КАК СтатусыЗадач
	|ГДЕ
	|	СтатусыЗадач.Вид В (&Вид)
	|	И НЕ СтатусыЗадач.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания,
	|	Наименование";
	ВидыСтатусов = Новый Массив;
	ВидыСтатусов.Добавить(Перечисления.ВидыСтатусовЗадач.Выполнена);
	ВидыСтатусов.Добавить(Перечисления.ВидыСтатусовЗадач.Закрыта);
	ВидыСтатусов.Добавить(Перечисления.ВидыСтатусовЗадач.Отклонена);
	Запрос.УстановитьПараметр("Вид", ВидыСтатусов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Статусы.Добавить(Выборка.Ссылка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СтатусыНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Статусы.Очистить();
	Для Каждого Элемент Из Результат Цикл
		Если Не Элемент.Пометка	Тогда
			Продолжить;
		КонецЕсли;
		
		Статусы.Добавить(Элемент.Значение);
	КонецЦикла;

	ЗаполнитьДеревоЗадач();
КонецПроцедуры

#КонецОбласти