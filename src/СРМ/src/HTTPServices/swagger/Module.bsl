// Возвращает файлы swagger-ui из соответствующих макетов
//
Функция SwaggerFileGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	НаименованиеМакета = СтрЗаменить(Запрос["ПараметрыURL"].Получить("File"), ".", "_");
	НаименованиеМакета = СтрЗаменить(НаименованиеМакета, "-", "_");
	Попытка
		
		Если НаименованиеМакета = "swagger_json" Тогда
			
			Ответ.Заголовки.Вставить("Content-Type", "application/json");
			Ответ.УстановитьТелоИзСтроки(СформироватьБазовыйSwaggerJson(СтрЗаменить(ПолучитьБазовыйURLСПортом(Запрос), "/swagger", "")),
				КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
		Иначе
			Макет = ПолучитьОбщийМакет(НаименованиеМакета);
			Если Прав(НаименованиеМакета, 5) = "_html" Тогда
				
				Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=UTF-8");
				Данные = ПолучитьОбщийМакет(НаименованиеМакета).ПолучитьТекст();
				Ответ.УстановитьТелоИзСтроки(СтрЗаменить(Данные, "{БазовыйURL}", ПолучитьБазовыйURLСПортом(Запрос)),
					КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
					
			ИначеЕсли Прав(НаименованиеМакета, 4) = "_css" Тогда
					
				Ответ.Заголовки.Вставить("Content-Type", "text/css");
				Данные = Новый ТекстовыйДокумент;
				Данные.Прочитать(Макет.ОткрытьПотокДляЧтения(), КодировкаТекста.UTF8);
				Ответ.УстановитьТелоИзСтроки(Данные.ПолучитьТекст(),
					КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
					
			ИначеЕсли Прав(НаименованиеМакета, 3) = "_js" Тогда
				
				Ответ.Заголовки.Вставить("Content-Type", "text/javascript");
				Данные = Новый ТекстовыйДокумент;
				Данные.Прочитать(Макет.ОткрытьПотокДляЧтения(), КодировкаТекста.UTF8);
				Ответ.УстановитьТелоИзСтроки(Данные.ПолучитьТекст(),
					КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
					
			ИначеЕсли Прав(НаименованиеМакета, 4) = "_png" Тогда

				Ответ.Заголовки.Вставить("Content-Type", "image/png");
				Ответ.УстановитьТелоИзДвоичныхДанных(Макет);
			Иначе
				Ответ.УстановитьТелоИзДвоичныхДанных(Макет);
			КонецЕсли;
		КонецЕсли;
		
		// TODO: Либо загрузить css и js без map, либо обрабатывать запросы на файлы .map
		
	Исключение
		ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Ошибка получения файла из макета %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), НаименованиеМакета),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Новый HTTPСервисОтвет(404);
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьБазовыйURLСПортом(Запрос)
	
	БазовыйURL = Запрос.БазовыйURL;
	Если СтрНайти(Запрос.Заголовки["Host"], ":") > 0 Тогда
		МассивHost = СтрЗаменить(Запрос.Заголовки["Host"], ":", Символы.ПС);
		БазовыйURL = СтрЗаменить(БазовыйURL, СтрПолучитьСтроку(МассивHost, 1), Запрос.Заголовки["Host"])
	КонецЕсли;
	
	Возврат БазовыйURL;
	
КонецФункции

Функция СформироватьБазовыйSwaggerJson(БазовыйURL)
	
	СтруктураФайлаSwagger = Новый Структура;
	СтруктураФайлаSwagger.Вставить("openapi","3.0.0"); 
	
	СтруктураФайлаSwagger.Вставить("schemes", Новый Массив);
	СтруктураФайлаSwagger.schemes.Добавить("https");
	СтруктураФайлаSwagger.schemes.Добавить("http");
	
	СтруктураФайлаSwagger.Вставить("info", Новый Структура);
	СтруктураФайлаSwagger.info.Вставить("description",Метаданные.ПодробнаяИнформация);
	СтруктураФайлаSwagger.info.Вставить("version",Метаданные.Версия);
	СтруктураФайлаSwagger.info.Вставить("title",Метаданные.КраткаяИнформация);
	//СтруктураФайлаSwagger.info.Вставить("termsOfService",Метаданные.АдресИнформацииОКонфигурации);
	СтруктураФайлаSwagger.info.Вставить("contact", Новый Структура);
	СтруктураФайлаSwagger.info.contact.Вставить("name", Метаданные.Поставщик);
	СтруктураФайлаSwagger.info.contact.Вставить("url", Метаданные.АдресИнформацииОПоставщике);
	СтруктураФайлаSwagger.info.contact.Вставить("email", "112@cprit.ru");
	
	СтруктураФайлаSwagger.info.Вставить("license", Новый Структура);
	СтруктураФайлаSwagger.info.license.Вставить("name","GPL-3.0 License");
	СтруктураФайлаSwagger.info.license.Вставить("url","https://github.com/cpr1c/it/blob/main/LICENSE");
	
	СтруктураФайлаSwagger.Вставить("servers", Новый Массив);
	
	НовыйОписаниеСервера = Новый Структура;
	НовыйОписаниеСервера.Вставить("url", БазовыйURL);
	СтруктураФайлаSwagger.servers.Добавить(НовыйОписаниеСервера);
	
	НовыйОписаниеСервера = Новый Структура;
	Если СтрНайти(БазовыйURL,"http://") >0 Тогда
		НовыйОписаниеСервера.Вставить("url", СтрЗаменить(БазовыйURL,"http://","https://"));
	Иначе
		НовыйОписаниеСервера.Вставить("url", СтрЗаменить(БазовыйURL,"https://","http://"));
	КонецЕсли;
	СтруктураФайлаSwagger.servers.Добавить(НовыйОписаниеСервера);
	
	СтруктураФайлаSwagger.Вставить("components", Новый Структура);
	
	СтруктураФайлаSwagger.Вставить("security", Новый Массив);
	СтруктураФайлаSwagger.security.Добавить(Новый Структура("login", Новый Массив));
	
	СтруктураФайлаSwagger.components.Вставить("securitySchemes", Новый Структура);
	СтруктураФайлаSwagger.components.securitySchemes.Вставить("login", Новый Структура);
	СтруктураФайлаSwagger.components.securitySchemes.login.Вставить("type","http");
	СтруктураФайлаSwagger.components.securitySchemes.login.Вставить("scheme","Basic");
	СтруктураФайлаSwagger.components.securitySchemes.login.Вставить("description","Логин и пароль");
	
	
	СтруктураФайлаSwagger.Вставить("tags", Новый Массив);
	СтруктураФайлаSwagger.Вставить("paths", Новый Соответствие);
	
	Для каждого HTTPСервис Из Метаданные.HTTPСервисы Цикл
		Если HTTPСервис.Имя = "swagger" Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйТэг = Новый Структура;
		НовыйТэг.Вставить("name", HTTPСервис.КорневойURL);
		НовыйТэг.Вставить("description", HTTPСервис.Синоним);
		
		СтруктураФайлаSwagger.tags.Добавить(НовыйТэг);
		
		Для Каждого ШаблонЗапроса Из HTTPСервис.ШаблоныURL Цикл
			ПутьЗапроса = Новый Структура;
			ПутьЗапроса.Вставить("summary", ШаблонЗапроса.Имя);
			ПутьЗапроса.Вставить("description", ШаблонЗапроса.Синоним);
			
			Для Каждого Метод Из ШаблонЗапроса.Методы Цикл
				ОписаниеМетода = Новый Структура;
				ОписаниеМетода.Вставить("tags", Новый Массив);
				ОписаниеМетода.tags.Добавить(HTTPСервис.КорневойURL);
				
				ОписаниеМетода.Вставить("summary", Метод.Имя);
				ОписаниеМетода.Вставить("description", Метод.Синоним);
				ОписаниеМетода.Вставить("operationId", ""+HTTPСервис.КорневойURL+"_"+ШаблонЗапроса.Имя+"_" +НРег(Метод.HTTPМетод));
				
				//ОписаниеМетода.Вставить("parameters", Новый Массив);
				ОписаниеМетода.Вставить("responses", Новый Структура);
				//
				//
				//УспешныйОтвет = Новый Структура;
				//УспешныйОтвет.Вставить("description", "Ответ");
				//
				//ОписаниеМетода.responses.Вставить("200", УспешныйОтвет);
				
				
				ПутьЗапроса.Вставить(НРег(Метод.HTTPМетод), ОписаниеМетода);
			КонецЦикла;
			
			СтруктураФайлаSwagger.paths.Вставить("/"+HTTPСервис.КорневойURL+ШаблонЗапроса.Шаблон, ПутьЗапроса);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаписатьДанныеJSON(СтруктураФайлаSwagger);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, Символы.Таб));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("openapi");
	ЗаписьJSON.ЗаписатьЗначение("3.0.0");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("info");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("description");
	ЗаписьJSON.ЗаписатьЗначение(Метаданные.Комментарий);
	ЗаписьJSON.ЗаписатьИмяСвойства("title");
	ЗаписьJSON.ЗаписатьЗначение(Метаданные.Имя);
	ЗаписьJSON.ЗаписатьИмяСвойства("version");
	ЗаписьJSON.ЗаписатьЗначение(Метаданные.Версия);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("servers");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("url");
	ЗаписьJSON.ЗаписатьЗначение(БазовыйURL);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("paths");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Для каждого HTTPСервис Из Метаданные.HTTPСервисы Цикл
		Если HTTPСервис.Имя = "Swag_Сервис" Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			МодульОписанияHTTPСервиса = ОбщегоНазначения.ОбщийМодуль(HTTPСервис.Имя + "Описание");
			Описание = МодульОписанияHTTPСервиса.ПолучитьОписаниеHTTPСервиса();
			Объекты = МодульОписанияHTTPСервиса.ПолучитьОбъектыHTTPСервиса();
		Исключение
		КонецПопытки;
		
		Для каждого ШаблонURL Из HTTPСервис.ШаблоныURL Цикл
			
			ЗаписьJSON.ЗаписатьИмяСвойства("/" + HTTPСервис.КорневойURL + ШаблонURL.Шаблон);
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			Для каждого Метод Из ШаблонURL.Методы Цикл
				
				ЗаписьJSON.ЗаписатьИмяСвойства(НРег(Метод.HTTPМетод));
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
				ЗаписьJSON.ЗаписатьИмяСвойства("tags");
				ЗаписьJSON.ЗаписатьНачалоМассива();
				ЗаписьJSON.ЗаписатьЗначение(?(ЗначениеЗаполнено(HTTPСервис.Синоним), HTTPСервис.Синоним, HTTPСервис.Имя));
				ЗаписьJSON.ЗаписатьКонецМассива();
				
				//ОписаниеМетода = Swag_ОбработкаHTTP.ПолучитьЗначениеОписанияМетода(Описание, ШаблонURL.Имя + Метод.HTTPМетод, "Описание");
				//Если ЗначениеЗаполнено(ОписаниеМетода) Тогда
				//	ЗаписьJSON.ЗаписатьИмяСвойства("summary");
				//	ЗаписьJSON.ЗаписатьЗначение(ОписаниеМетода);
				//КонецЕсли;
				
				ЗаписьJSON.ЗаписатьИмяСвойства("parameters");
				ЗаписьJSON.ЗаписатьНачалоМассива();
				
				//ПараметрыМетода = Swag_ОбработкаHTTP.ПолучитьМассивЭлементовОписания(Описание, ШаблонURL.Имя + Метод.HTTPМетод, "Параметры");
				//Для каждого ПараметрМетода Из ПараметрыМетода Цикл
				//	
				//	ЗаписьJSON.ЗаписатьНачалоОбъекта();
				//	ЗаписьJSON.ЗаписатьИмяСвойства("name");
				//	ЗаписьJSON.ЗаписатьЗначение(ПараметрМетода.Имя);
				//	ЗаписьJSON.ЗаписатьИмяСвойства("description");
				//	ЗаписьJSON.ЗаписатьЗначение(ПараметрМетода.Описание);
				//	ЗаписьJSON.ЗаписатьИмяСвойства("in");
				//	ЗаписьJSON.ЗаписатьЗначение(ПараметрМетода.Тип);
				//	ЗаписьJSON.ЗаписатьИмяСвойства("required");
				//	ЗаписьJSON.ЗаписатьЗначение(ПараметрМетода.Обязательный);
				//	ЗаписьJSON.ЗаписатьИмяСвойства("deprecated");
				//	ЗаписьJSON.ЗаписатьЗначение(ПараметрМетода.Устарел);
				//	ЗаписьJSON.ЗаписатьКонецОбъекта();
				//	
				//КонецЦикла;
				
				ЗаписьJSON.ЗаписатьКонецМассива(); // parameters
				
				//ОписаниеТелаЗапроса = Swag_ОбработкаHTTP.ПолучитьЗначениеОписанияМетода(Описание, ШаблонURL.Имя + Метод.HTTPМетод, "ТелоЗапроса");
				//Если ЗначениеЗаполнено(ОписаниеТелаЗапроса) Тогда
				//	ЗаписьJSON.ЗаписатьИмяСвойства("requestBody");
				//	ЗаписьJSON.ЗаписатьНачалоОбъекта();
				//	
				//	Если ТипЗнч(ОписаниеТелаЗапроса.МассивТиповMIME) = Тип("Массив") И ОписаниеТелаЗапроса.МассивТиповMIME.Количество() > 0 Тогда
				//		ЗаписьJSON.ЗаписатьИмяСвойства("content");
				//		ЗаписьJSON.ЗаписатьНачалоОбъекта();
				//		
				//		Для каждого ТипMIME Из ОписаниеТелаЗапроса.МассивТиповMIME Цикл
				//			ЗаписьJSON.ЗаписатьИмяСвойства(ТипMIME.Заголовок);
				//			
				//			ЗаписьJSON.ЗаписатьНачалоОбъекта();
				//			
				//			ЗаписьJSON.ЗаписатьИмяСвойства("schema");
				//			ЗаписьJSON.ЗаписатьНачалоОбъекта();
				//			Если ЗначениеЗаполнено(ТипMIME.Тип) Тогда
				//				ЗаписьJSON.ЗаписатьИмяСвойства("type");
				//				ЗаписьJSON.ЗаписатьЗначение(ТипMIME.Тип);
				//				Если ТипMIME.Тип = "array" Тогда
				//					ЗаписьJSON.ЗаписатьИмяСвойства("items");
				//					ЗаписьJSON.ЗаписатьНачалоОбъекта();
				//					ЗаписьJSON.ЗаписатьИмяСвойства("$ref");
				//					ЗаписьJSON.ЗаписатьЗначение(ТипMIME.Схема);
				//					ЗаписьJSON.ЗаписатьКонецОбъекта();
				//				КонецЕсли;
				//			ИначеЕсли ЗначениеЗаполнено(ТипMIME.Схема) Тогда
				//				ЗаписьJSON.ЗаписатьИмяСвойства("$ref");
				//				ЗаписьJSON.ЗаписатьЗначение(ТипMIME.Схема);
				//			КонецЕсли;
				//			ЗаписьJSON.ЗаписатьКонецОбъекта(); // schema
				//			
				//			ЗаписьJSON.ЗаписатьКонецОбъекта();
				//		КонецЦикла;
				//		
				//		ЗаписьJSON.ЗаписатьКонецОбъекта();
				//	КонецЕсли;
				//	
				//	ЗаписьJSON.ЗаписатьИмяСвойства("description");
				//	ЗаписьJSON.ЗаписатьЗначение(ОписаниеТелаЗапроса.Описание);
				//	
				//	ЗаписьJSON.ЗаписатьКонецОбъекта(); // requestBody
				//КонецЕсли;
				
				//ОтветыМетода = Swag_ОбработкаHTTP.ПолучитьМассивЭлементовОписания(Описание, ШаблонURL.Имя + Метод.HTTPМетод, "Ответы");
				ЗаписьJSON.ЗаписатьИмяСвойства("responses");
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
				//Для каждого ОтветМетода Из ОтветыМетода Цикл
				//	
				//	ЗаписьJSON.ЗаписатьИмяСвойства(Строка(ОтветМетода.Код));
				//	ЗаписьJSON.ЗаписатьНачалоОбъекта();
				//	
				//	ЗаписьJSON.ЗаписатьИмяСвойства("description");
				//	ЗаписьJSON.ЗаписатьЗначение(ОтветМетода.Описание);
				//	Если ТипЗнч(ОтветМетода.МассивТиповMIME) = Тип("Массив") И ОтветМетода.МассивТиповMIME.Количество() > 0 Тогда
				//		ЗаписьJSON.ЗаписатьИмяСвойства("content");
				//		ЗаписьJSON.ЗаписатьНачалоОбъекта();
				//		
				//		Для каждого ТипMIME Из ОтветМетода.МассивТиповMIME Цикл
				//			
				//			ЗаписьJSON.ЗаписатьИмяСвойства(ТипMIME.Заголовок);
				//			ЗаписьJSON.ЗаписатьНачалоОбъекта();
				//			
				//			ЗаписьJSON.ЗаписатьИмяСвойства("schema");
				//			ЗаписьJSON.ЗаписатьНачалоОбъекта();
				//			Если ЗначениеЗаполнено(ТипMIME.Тип) Тогда
				//				ЗаписьJSON.ЗаписатьИмяСвойства("type");
				//				ЗаписьJSON.ЗаписатьЗначение(ТипMIME.Тип);
				//				Если ТипMIME.Тип = "array" Тогда
				//					ЗаписьJSON.ЗаписатьИмяСвойства("items");
				//					ЗаписьJSON.ЗаписатьНачалоОбъекта();
				//					ЗаписьJSON.ЗаписатьИмяСвойства("$ref");
				//					ЗаписьJSON.ЗаписатьЗначение(ТипMIME.Схема);
				//					ЗаписьJSON.ЗаписатьКонецОбъекта();
				//				КонецЕсли;
				//			ИначеЕсли ЗначениеЗаполнено(ТипMIME.Схема) Тогда
				//				ЗаписьJSON.ЗаписатьИмяСвойства("$ref");
				//				ЗаписьJSON.ЗаписатьЗначение(ТипMIME.Схема);
				//			КонецЕсли;
				//			ЗаписьJSON.ЗаписатьКонецОбъекта(); // schema
				//			
				//			ЗаписьJSON.ЗаписатьКонецОбъекта();
				//			
				//		КонецЦикла;
				//		
				//		ЗаписьJSON.ЗаписатьКонецОбъекта();
				//	КонецЕсли;
				//	
				//	ЗаписьJSON.ЗаписатьКонецОбъекта();
				//	
				//КонецЦикла;
				
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				
				ЗаписьJSON.ЗаписатьИмяСвойства("security");
				ЗаписьJSON.ЗаписатьНачалоМассива();
				
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				ЗаписьJSON.ЗаписатьИмяСвойства("basic");
				ЗаписьJSON.ЗаписатьНачалоМассива();
				ЗаписьJSON.ЗаписатьКонецМассива();
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				
				ЗаписьJSON.ЗаписатьКонецМассива();
				
				ЗаписьJSON.ЗаписатьКонецОбъекта(); // security
				
			КонецЦикла;
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
		КонецЦикла;
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецОбъекта(); // paths
	
	ЗаписьJSON.ЗаписатьИмяСвойства("components");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Если ЗначениеЗаполнено(Объекты) И Объекты.Количество() > 0 Тогда
		
		ЗаписьJSON.ЗаписатьИмяСвойства("schemas");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		Для каждого ОбъектСервиса Из Объекты Цикл
			
			ЗаписьJSON.ЗаписатьИмяСвойства(ОбъектСервиса.Имя);
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("type");
			ЗаписьJSON.ЗаписатьЗначение(ОбъектСервиса.Тип);
			
			Если ТипЗнч(ОбъектСервиса.МассивСвойств) = Тип("Массив") И ОбъектСервиса.МассивСвойств.Количество() > 0 Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства("properties");
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
				Для каждого СвойствоОбъекта Из ОбъектСервиса.МассивСвойств Цикл
					ЗаписьJSON.ЗаписатьИмяСвойства(СвойствоОбъекта.Имя);
					ЗаписьJSON.ЗаписатьНачалоОбъекта();
					
					ЗаписьJSON.ЗаписатьИмяСвойства("type");
					ЗаписьJSON.ЗаписатьЗначение(СвойствоОбъекта.Тип);
					ЗаписьJSON.ЗаписатьИмяСвойства("description");
					ЗаписьJSON.ЗаписатьЗначение(СвойствоОбъекта.Описание);
					
					Если СвойствоОбъекта.Тип = "array" Тогда
						ЗаписьJSON.ЗаписатьИмяСвойства("items");
						ЗаписьJSON.ЗаписатьНачалоОбъекта();
						ЗаписьJSON.ЗаписатьИмяСвойства("$ref");
						ЗаписьJSON.ЗаписатьЗначение(СвойствоОбъекта.Схема);
						ЗаписьJSON.ЗаписатьКонецОбъекта();
					ИначеЕсли ЗначениеЗаполнено(СвойствоОбъекта.Пример) Тогда
						ЗаписьJSON.ЗаписатьИмяСвойства("example");
						ЗаписьJSON.ЗаписатьЗначение(СвойствоОбъекта.Пример);
					КонецЕсли;
					
					ЗаписьJSON.ЗаписатьКонецОбъекта();
				КонецЦикла;
				
				ЗаписьJSON.ЗаписатьКонецОбъекта(); // properties
			КонецЕсли;
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
		КонецЦикла;
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("securitySchemes");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("basic");
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("type");
	ЗаписьJSON.ЗаписатьЗначение("http");
	ЗаписьJSON.ЗаписатьИмяСвойства("scheme");
	ЗаписьJSON.ЗаписатьЗначение("basic");
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта(); // securitySchemes
	
	ЗаписьJSON.ЗаписатьКонецОбъекта(); // components
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция IndexGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "text/html; charset=utf-8");
	
	ТекстHTMLСтраницыСвагера = ПолучитьОбщийМакет("Swagger_ui_Indexhtml").ПолучитьТекст();
	Ответ.УстановитьТелоИзСтроки(ТекстHTMLСтраницыСвагера);
	
	Возврат Ответ;
КонецФункции

Функция faviconGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "image/png; charset=utf-8");
	Ответ.УстановитьТелоИзДвоичныхДанных(БиблиотекаКартинок.ЛоготипКонфигурации.ПолучитьДвоичныеДанные());
	
	Возврат Ответ;
КонецФункции

Функция swaggerjsonGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	//Ответ.Заголовки.Вставить("Content-Type", "application/json");
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	Ответ.УстановитьТелоИзСтроки(СформироватьБазовыйSwaggerJson(СтрЗаменить(ПолучитьБазовыйURLСПортом(Запрос), "/swagger", "")),
	КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции
