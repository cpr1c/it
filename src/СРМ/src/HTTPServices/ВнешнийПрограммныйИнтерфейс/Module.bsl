

#Область Задачи

Функция СписокЗадачGET(Запрос)
	ПараметрыЛога = ВнешнийПрограммныйИнтерфейс.НовыеПараметрыЛогаHTTPЗапроса(Запрос);
	Если Не ВнешнийПрограммныйИнтерфейс.ВнешнийПрограммныйИнтерфейсВключен() Тогда
		Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервисаПриОтключенномПрограммномИнтерфейсе(ПараметрыЛога);
	КонецЕсли;

	ДатаСозданияОт = Запрос.ПараметрыЗапроса.Получить("datestartfrom");
	ДатаСозданияДо = Запрос.ПараметрыЗапроса.Получить("datestartto");
	
	ДатаЗакрытияОт = Запрос.ПараметрыЗапроса.Получить("dateclosefrom");
	ДатаЗакрытияДо = Запрос.ПараметрыЗапроса.Получить("datecloseto");
	
	ИдентификаторСтатуса = Запрос.ПараметрыЗапроса.Получить("status");
	Если ИдентификаторСтатуса = Неопределено Тогда 
		Статус = Неопределено;
	Иначе
		Попытка
			Статус = Справочники.СтатусыЗадач.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторСтатуса));
		Исключение
			Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(Истина, "Не найден указанный статус", ПараметрыЛога);
		КонецПопытки;
	КонецЕсли;
	ИдентификаторПроекта = Запрос.ПараметрыЗапроса.Получить("project");
	Если ИдентификаторПроекта = Неопределено Тогда 
		Проект = Неопределено;
	Иначе
		Попытка
			Проект = Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПроекта));
		Исключение
			Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(Истина, "Не найден указанный проект", ПараметрыЛога);
		КонецПопытки;
	КонецЕсли;
	ИдентификаторИсполнителя = Запрос.ПараметрыЗапроса.Получить("asigned");
	Если ИдентификаторИсполнителя = Неопределено Тогда 
		Исполнитель = Неопределено;
	Иначе
		Попытка
			Исполнитель = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторИсполнителя));
		Исключение
			Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(Истина, "Не найден указанный исполнитель", ПараметрыЛога);
		КонецПопытки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка,
	|	Задача.Номер КАК Номер,
	|	Задача.Автор КАК Автор,
	|	Задача.ДатаЗакрытия КАК ДатаЗакрытия,
	|	Задача.ДатаВыполнения КАК ДатаВыполнения,
	|	Задача.ДатаНачалаРаботПоЗадаче КАК ДатаНачалаРаботПоЗадаче,
	|	Задача.ДатаСоздания КАК ДатаСоздания,
	|	Задача.Исполнитель КАК Исполнитель,
	|	Задача.Основание КАК Основание,
	|	Задача.ОценкаТрудозатрат КАК ОценкаТрудозатрат,
	|	Задача.ОценкаТрудозатратИсполнителя КАК ОценкаТрудозатратИсполнителя,
	|	Задача.Проект КАК Проект,
	|	Задача.РодительскаяЗадача КАК РодительскаяЗадача,
	|	Задача.Содержание КАК Содержание,
	|	Задача.СрокИсполнения КАК СрокИсполнения,
	|	Задача.СрокИсполненияАвто КАК СрокИсполненияАвто,
	|	Задача.Статус КАК Статус,
	|	Задача.Тема КАК Тема,
	|	Задача.ВидОплаты КАК ВидОплаты,
	|	Задача.СодержаниеФормат КАК СодержаниеФормат,
	|	Задача.СодержаниеHTML КАК СодержаниеHTML,
	|	Задача.КатегорияЗакрытия КАК КатегорияЗакрытия,
	|	Задача.Дата КАК Дата,
	|	Задача.ДатаИзменения КАК ДатаИзменения
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ДатаСозданияОт <> НЕОПРЕДЕЛЕНО
	|				ТОГДА Задача.ДатаСоздания >= &ДатаСозданияОт
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ДатаСозданияДо <> НЕОПРЕДЕЛЕНО
	|				ТОГДА Задача.ДатаСоздания <= &ДатаСозданияДо
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ДатаЗакрытияОт <> НЕОПРЕДЕЛЕНО
	|				ТОГДА Задача.ДатаЗакрытия >= &ДатаЗакрытияОт
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ДатаЗакрытияДо <> НЕОПРЕДЕЛЕНО
	|				ТОГДА Задача.ДатаЗакрытия <= &ДатаЗакрытияДо
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Исполнитель <> НЕОПРЕДЕЛЕНО
	|				ТОГДА Задача.Исполнитель = &Исполнитель
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Проект <> НЕОПРЕДЕЛЕНО
	|				ТОГДА Задача.Проект = &Проект
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Статус <> НЕОПРЕДЕЛЕНО
	|				ТОГДА Задача.Статус = &Статус
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Если ДатаСозданияОт = Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаСозданияОт", ДатаСозданияОт);
	Иначе
		Запрос.УстановитьПараметр("ДатаСозданияОт", СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаСозданияОт));
	КонецЕсли;
	Если ДатаСозданияДо = Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаСозданияДо", ДатаСозданияДо);
	Иначе
		Запрос.УстановитьПараметр("ДатаСозданияДо", СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаСозданияДо));
	КонецЕсли;
	Если ДатаЗакрытияОт = Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаЗакрытияОт", ДатаЗакрытияОт);
	Иначе
		Запрос.УстановитьПараметр("ДатаЗакрытияОт", СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаЗакрытияОт));
	КонецЕсли;
	Если ДатаЗакрытияДо = Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаЗакрытияДо", ДатаЗакрытияДо);
	Иначе
		Запрос.УстановитьПараметр("ДатаЗакрытияДо", СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаЗакрытияДо));
	КонецЕсли;
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Статус", Статус);
	
	МассивЗадач = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Описание = Новый Структура;
		Описание.Вставить("Тема", Выборка.Тема);
		Описание.Вставить("Номер", Выборка.Номер);
		Описание.Вставить("Дата", Выборка.Дата);
		Описание.Вставить("ДатаСоздания", Выборка.ДатаСоздания);
		Описание.Вставить("ДатаВыполнения", Выборка.ДатаВыполнения);
		Описание.Вставить("ДатаЗакрытия", Выборка.ДатаЗакрытия);
		Описание.Вставить("ДатаИзменения", Выборка.ДатаИзменения);
		Описание.Вставить("ДатаНачалаРаботПоЗадаче", Выборка.ДатаНачалаРаботПоЗадаче);
		Описание.Вставить("Проект", ВнешнийПрограммныйИнтерфейс.ОписаниеПроекта(Выборка.Проект));
		Описание.Вставить("Автор", ВнешнийПрограммныйИнтерфейс.ОписаниеПользователя(Выборка.Автор));
		Описание.Вставить("Исполнитель", ВнешнийПрограммныйИнтерфейс.ОписаниеПользователя(Выборка.Исполнитель));
		Описание.Вставить("ОценкаТрудозатрат", Выборка.ОценкаТрудозатрат);
		Описание.Вставить("ОценкаТрудозатратИсполнителя", Выборка.ОценкаТрудозатратИсполнителя);
		Если ЗначениеЗаполнено(Выборка.РодительскаяЗадача) Тогда
			Описание.Вставить("РодительскаяЗадача", Выборка.РодительскаяЗадача.Номер);
		Иначе
			Описание.Вставить("РодительскаяЗадача", Неопределено);	
		КонецЕсли;
		Описание.Вставить("Содержание", Выборка.Содержание);
		Описание.Вставить("СрокИсполнения", Выборка.СрокИсполнения);
		Описание.Вставить("СрокИсполненияАвто", Выборка.СрокИсполненияАвто);
		Описание.Вставить("СодержаниеФормат", ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.СодержаниеФормат));
		Описание.Вставить("СодержаниеHTML", Выборка.СодержаниеHTML);
		Описание.Вставить("Статус", ВнешнийПрограммныйИнтерфейс.ОписаниеСтатуса(Выборка.Статус));
		Описание.Вставить("КатегорияЗакрытия", ВнешнийПрограммныйИнтерфейс.ОписаниеКатегорииЗадачи(Выборка.КатегорияЗакрытия));
		Описание.Вставить("ВидОплаты", ВнешнийПрограммныйИнтерфейс.ОписаниеВидОплаты(Выборка.ВидОплаты));
		Описание.Вставить("Трудозатраты", УправлениеЗадачами.ПолучитьТрудозатратыПоЗадаче(Выборка.Ссылка));
		
		МассивЗадач.Добавить(Описание);
	КонецЦикла;
	
	Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(Ложь, МассивЗадач, ПараметрыЛога);
	
КонецФункции

Функция ДанныеЗадачиGET(Запрос)
	ПараметрыЛога = ВнешнийПрограммныйИнтерфейс.НовыеПараметрыЛогаHTTPЗапроса(Запрос);
	Если Не ВнешнийПрограммныйИнтерфейс.ВнешнийПрограммныйИнтерфейсВключен() Тогда
		Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервисаПриОтключенномПрограммномИнтерфейсе(ПараметрыЛога);
	КонецЕсли;
	
	Идентификатор = Запрос.ПараметрыURL["id"];
	
	Попытка
		НайденнаяСсылка = Документы.Задача.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
	Исключение
		
		НайденнаяСсылка = УправлениеЗадачами.НайтиЗадачуПоНомеру(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Идентификатор));
		
		Если Не ЗначениеЗаполнено(НайденнаяСсылка) Тогда 
			Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(Истина, "Задача не найдена", ПараметрыЛога);
		КонецЕсли;
	КонецПопытки;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденнаяСсылка,"Ссылка") = Неопределено Тогда
		Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(Истина, "Задача не найдена", ПараметрыЛога);
	КонецЕсли;
	
	Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(Ложь, ВнешнийПрограммныйИнтерфейс.ОписаниеЗадачи(НайденнаяСсылка), ПараметрыЛога);
КонецФункции

#КонецОбласти

#Область Пользователи

Функция ПользователиGET(Запрос)
	ПараметрыЛога = ВнешнийПрограммныйИнтерфейс.НовыеПараметрыЛогаHTTPЗапроса(Запрос);
	Если Не ВнешнийПрограммныйИнтерфейс.ВнешнийПрограммныйИнтерфейсВключен() Тогда
		Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервисаПриОтключенномПрограммномИнтерфейсе(ПараметрыЛога);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Наименование КАК Наименование,
	|	Пользователи.Недействителен КАК Недействителен,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Недействителен";
	
	ЕстьОшибки = Ложь;
	МассивПользователей = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
			Продолжить;
		КонецЕсли;
		МассивПользователей.Добавить(ВнешнийПрограммныйИнтерфейс.ОписаниеПользователя(Выборка));
	КонецЦикла;
	
	Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(ЕстьОшибки, МассивПользователей, ПараметрыЛога);
КонецФункции

#КонецОбласти

Функция СписокПроектовGET(Запрос)
	ПараметрыЛога = ВнешнийПрограммныйИнтерфейс.НовыеПараметрыЛогаHTTPЗапроса(Запрос);
	Если Не ВнешнийПрограммныйИнтерфейс.ВнешнийПрограммныйИнтерфейсВключен() Тогда
		Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервисаПриОтключенномПрограммномИнтерфейсе(ПараметрыЛога);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Ссылка,
	|	Проекты.Наименование КАК Наименование,
	|	Проекты.Родитель КАК Родитель,
	|	Проекты.Партнер КАК Партнер,
	|	Проекты.Описание КАК Описание,
	|	Проекты.Архивный КАК Архивный,
	|	Проекты.Вид КАК Вид
	|ИЗ
	|	Справочник.Проекты КАК Проекты";
	
	ЕстьОшибки = Ложь;
	МассивДанных = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДанных.Добавить(ВнешнийПрограммныйИнтерфейс.ОписаниеПроекта(Выборка));
	КонецЦикла;
	
	Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(ЕстьОшибки, МассивДанных, ПараметрыЛога);
КонецФункции

Функция ДанныеПроектаGET(Запрос)
	ПараметрыЛога = ВнешнийПрограммныйИнтерфейс.НовыеПараметрыЛогаHTTPЗапроса(Запрос);
	Если Не ВнешнийПрограммныйИнтерфейс.ВнешнийПрограммныйИнтерфейсВключен() Тогда
		Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервисаПриОтключенномПрограммномИнтерфейсе(ПараметрыЛога);
	КонецЕсли;
	
	ИдентификаторПроекта = Запрос.ПараметрыURL["id"];	
	
	Попытка
		НайденныйПроект = Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПроекта));
	Исключение
		Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(Истина, "Проект с текущим идентификатором не найден", ПараметрыЛога);
	КонецПопытки;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденныйПроект,"Ссылка") = Неопределено Тогда
		Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(Истина, "Проект с текущим идентификатором не найден", ПараметрыЛога);
	КонецЕсли;
	
	Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(Ложь, ВнешнийПрограммныйИнтерфейс.ОписаниеПроекта(НайденныйПроект), ПараметрыЛога);
КонецФункции

Функция СписокСтатусовGET(Запрос)
	ПараметрыЛога = ВнешнийПрограммныйИнтерфейс.НовыеПараметрыЛогаHTTPЗапроса(Запрос);
	Если Не ВнешнийПрограммныйИнтерфейс.ВнешнийПрограммныйИнтерфейсВключен() Тогда
		Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервисаПриОтключенномПрограммномИнтерфейсе(ПараметрыЛога);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыЗадач.Ссылка КАК Ссылка,
	|	СтатусыЗадач.Наименование КАК Наименование,
	|	СтатусыЗадач.Вид КАК Вид
	|ИЗ
	|	Справочник.СтатусыЗадач КАК СтатусыЗадач";
	
	ЕстьОшибки = Ложь;
	МассивДанных = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДанных.Добавить(ВнешнийПрограммныйИнтерфейс.ОписаниеСтатуса(Выборка));
	КонецЦикла;
	
	Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(ЕстьОшибки, МассивДанных, ПараметрыЛога);
КонецФункции

Функция СписокКатегорийЗадачGET(Запрос)
	ПараметрыЛога = ВнешнийПрограммныйИнтерфейс.НовыеПараметрыЛогаHTTPЗапроса(Запрос);
	Если Не ВнешнийПрограммныйИнтерфейс.ВнешнийПрограммныйИнтерфейсВключен() Тогда
		Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервисаПриОтключенномПрограммномИнтерфейсе(ПараметрыЛога);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииЗакрытияЗадач.Ссылка КАК Ссылка,
	|	КатегорииЗакрытияЗадач.Наименование КАК Наименование,
	|	КатегорииЗакрытияЗадач.Родитель КАК Родитель
	|ИЗ
	|	Справочник.КатегорииЗакрытияЗадач КАК КатегорииЗакрытияЗадач";
	
	ЕстьОшибки = Ложь;
	МассивДанных = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДанных.Добавить(ВнешнийПрограммныйИнтерфейс.ОписаниеКатегорииЗадачи(Выборка));
	КонецЦикла;
	
	Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(ЕстьОшибки, МассивДанных, ПараметрыЛога);
КонецФункции

Функция ВидыОплатGET(Запрос)
	ПараметрыЛога = ВнешнийПрограммныйИнтерфейс.НовыеПараметрыЛогаHTTPЗапроса(Запрос);
	Если Не ВнешнийПрограммныйИнтерфейс.ВнешнийПрограммныйИнтерфейсВключен() Тогда
		Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервисаПриОтключенномПрограммномИнтерфейсе(ПараметрыЛога);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОплатыЗадач.Ссылка КАК Ссылка,
	|	ВидыОплатыЗадач.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВидыОплатыЗадач КАК ВидыОплатыЗадач";
	
	ЕстьОшибки = Ложь;
	МассивДанных = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДанных.Добавить(ВнешнийПрограммныйИнтерфейс.ОписаниеВидОплаты(Выборка));
	КонецЦикла;
	
	Возврат ВнешнийПрограммныйИнтерфейс.ОтветСервиса(ЕстьОшибки, МассивДанных, ПараметрыЛога);
КонецФункции
